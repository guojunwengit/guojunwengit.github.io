<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/03/25/Ubuntu/Ubuntu%E5%AE%89%E8%A3%85golang/"/>
      <url>/2023/03/25/Ubuntu/Ubuntu%E5%AE%89%E8%A3%85golang/</url>
      
        <content type="html"><![CDATA[<h3 id="在-Ubuntu-上安装-Golang"><a href="#在-Ubuntu-上安装-Golang" class="headerlink" title="在 Ubuntu 上安装 Golang"></a>在 Ubuntu 上安装 Golang</h3><h4 id="解压到指定文件中"><a href="#解压到指定文件中" class="headerlink" title="解压到指定文件中"></a>解压到指定文件中</h4><p>执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置环境: 修改 ~/.bashrc</p><pre class="line-numbers language-none"><code class="language-none">export GOROOT=/usr/local/goexport GOPATH=$HOME/goexport PATH=$GOPATH/bin:$GOROOT/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后检查</p><pre class="line-numbers language-none"><code class="language-none">source ~/.bashrcgo version返回：go version go1.20.2 linux/amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/05/Golang/a/"/>
      <url>/2022/12/05/Golang/a/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu服务器配置</title>
      <link href="/2022/11/18/Ubuntu/Ubuntu/"/>
      <url>/2022/11/18/Ubuntu/Ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="Ubuntu-系统如何使用-root-用户登录实例？"><a href="#Ubuntu-系统如何使用-root-用户登录实例？" class="headerlink" title="Ubuntu 系统如何使用 root 用户登录实例？"></a>Ubuntu 系统如何使用 root 用户登录实例？</h3><ol><li><p>执行以下命令，打开 <code>sshd_config</code> 配置文件。</p><pre class="line-numbers language-none"><code class="language-none">sudo vi /etc/ssh/sshd_config <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>按 <strong>i</strong> 切换至编辑模式，找到 <code>#Authentication</code>，将 <code>PermitRootLogin</code> 参数修改为 <code>yes</code>。如果 <code>PermitRootLogin</code> 参数被注释，请去掉首行的注释符号（<code>#</code>）。如下图所示：</p><p><img src="C:\Users\Oxyay\AppData\Roaming\Typora\typora-user-images\image-20221121142009125.png" alt="image-20221121142009125"></p><p><img src="C:\Users\Oxyay\AppData\Roaming\Typora\typora-user-images\image-20221121142159448.png" alt="image-20221121142159448"></p></li><li><p>找到 <code>#Authentication</code>，将 <code>PasswordAuthentication</code> 参数修改为 yes。如下图所示：</p></li><li><p>若 <code>sshd_config</code> 配置文件中无此配置项，则添加 <code>PasswordAuthentication yes</code> 项即可。</p></li><li><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件并返回。</p></li><li><p>执行以下命令，重启 ssh 服务。</p><pre class="line-numbers language-none"><code class="language-none">sudo service ssh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="在-Ubuntu-上安装-Docker-引擎"><a href="#在-Ubuntu-上安装-Docker-引擎" class="headerlink" title="在 Ubuntu 上安装 Docker 引擎"></a>在 Ubuntu 上安装 Docker 引擎</h3><h4 id="安装-Docker-引擎"><a href="#安装-Docker-引擎" class="headerlink" title="安装 Docker 引擎"></a>安装 Docker 引擎</h4><ol><li><p>更新<code>apt</code>包索引：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要安装最新版本，请运行：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr></li><li><p><code>hello-world</code>通过运行镜像验证 Docker Engine 安装是否成功 ：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令下载测试图像并在容器中运行它。当容器运行时，它会打印一条确认消息并退出。</p></li></ol><p>您现在已经成功安装并启动了 Docker 引擎。用户组存在但不包含任何用户，这<code>docker</code>就是为什么您需要使用它<code>sudo</code> 来运行 Docker 命令。继续<a href="https://docs.docker.com/engine/install/linux-postinstall/">Linux 后安装</a> ，以允许非特权用户运行 Docker 命令和其他可选配置步骤。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Mysql</title>
      <link href="/2022/11/10/docker/Docker%E5%AE%89%E8%A3%85Mysql/"/>
      <url>/2022/11/10/docker/Docker%E5%AE%89%E8%A3%85Mysql/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysqlgrant all privileges on *.* to 'root'@'%' with grant option; # 为root用户授予所有库和表的(CURD)权限grant select, update, delete, insert on *.* to 'root'@'%' with grant option;# 第二步，刷新权限表flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装redis</title>
      <link href="/2022/11/10/docker/Docker%E5%AE%89%E8%A3%85redis/"/>
      <url>/2022/11/10/docker/Docker%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">docker run -d --name redis -p 6379:6379 redis/redis-stack-server:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装Centos7并开启ssh</title>
      <link href="/2022/10/31/docker/Docker%E5%AE%89%E8%A3%85Centos7/"/>
      <url>/2022/10/31/docker/Docker%E5%AE%89%E8%A3%85Centos7/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装Centos7并开启ssh"><a href="#Docker安装Centos7并开启ssh" class="headerlink" title="Docker安装Centos7并开启ssh"></a>Docker安装Centos7并开启ssh</h1><p>后台启动centos7容器，指定容器名字为centos7，并把docker上centos的22<a href="https://so.csdn.net/so/search?q=%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84&amp;spm=1001.2101.3001.7020">端口映射</a>到本机8082端口(端口号可以自己指定)</p><pre class="line-numbers language-none"><code class="language-none">docker run -it -d -p 8082:22 --name=centos7 --privileged centos:7 /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到Centos7容器</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it centos7  /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/docker/image-20221031230409703.png" alt="image-20221031230409703"></p><p>安装ssh服务和网络必须软件</p><pre class="line-numbers language-none"><code class="language-none">yum install net-tools.x86_64 -yyum install -y openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完后重启SSH服务</p><pre class="line-numbers language-none"><code class="language-none">systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 设置root用户密码</p><pre class="line-numbers language-none"><code class="language-none">passwd -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/docker/image-20221031230105688.png" alt="image-20221031230105688"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>42.接雨水</title>
      <link href="/2022/09/24/leetcode_hot100/34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
      <url>/2022/09/24/leetcode_hot100/34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42.接雨水"></a>42.接雨水</h3><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回&nbsp;[-1, -1]。</p><p>你必须设计并实现时间复杂度为&nbsp;O(log n)&nbsp;的算法解决此问题。</p><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>使用二分查找找出target出现的第一个位置，如果整个数组都小于target 查找target的位置会出现在n，其它不存在情况都可以直接访问数组进行判断。<br>target的结束位置就是找到第一个大于target的数，直接查找target+1即可,当大于targe的数不存在时，二分查找返回的是nums的长度n,n-1就是数组的最后一个元素，直接返回即可。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>42.接雨水</title>
      <link href="/2022/09/21/leetcode_hot100/42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
      <url>/2022/09/21/leetcode_hot100/42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42.接雨水"></a>42.接雨水</h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><a href="https://leetcode.cn/problems/trapping-rain-water/">https://leetcode.cn/problems/trapping-rain-water/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>leftMax记录左边最高柱子的高度，rightMax记录右边最高柱子的高度，默认从0和n-1开始，leftMax</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> 双向指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、kubernetes数据存储</title>
      <link href="/2022/09/20/kubernetes/%E5%85%AB%E3%80%81kubernetes%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2022/09/20/kubernetes/%E5%85%AB%E3%80%81kubernetes%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况下是不乐意看到的。为了持久化保存容器的数据，kubernetes引入了Volume的概念。</p><p>​    Volume是Pod中能够被多个容器访问的共享目录，它被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下，kubernetes通过Volume实现同一个Pod中不同容器之间的数据共享以及数据的持久化存储。Volume的生命容器不与Pod中单个容器的生命周期相关，当容器终止或者重启时，Volume中的数据也不会丢失。</p><p>kubernetes的Volume支持多种类型，比较常见的有下面几个：</p><ul><li>简单存储：EmptyDir、HostPath、NFS</li><li>高级存储：PV、PVC</li><li>配置存储：ConfigMap、Secret</li></ul><h2 id="基本存储"><a href="#基本存储" class="headerlink" title="基本存储"></a>基本存储</h2><h3 id="EmptyDir"><a href="#EmptyDir" class="headerlink" title="EmptyDir"></a>EmptyDir</h3><p>​    EmptyDir是最基础的Volume类型，一个EmptyDir就是Host上的一个空目录。</p><p>​    EmptyDir是在Pod被分配到Node时创建的，它的初始内容为空，并且无须指定宿主机上对应的目录文件，因为kubernetes会自动分配一个目录，当Pod销毁时， EmptyDir中的数据也会被永久删除。 EmptyDir用途如下：</p><ul><li><p>临时空间，例如用于某些应用程序运行时所需的临时目录，且无须永久保留</p></li><li><p>一个容器需要从另一个容器中获取数据的目录（多容器共享目录）</p></li></ul><p>接下来，通过一个容器之间文件共享的案例来使用一下EmptyDir。</p><p>​    在一个Pod中准备两个容器nginx和busybox，然后声明一个Volume分别挂在到两个容器的目录中，然后nginx容器负责向Volume中写日志，busybox中通过命令将日志内容读到控制台。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220921200610866.png" alt="image-20220921200610866"></p><p>创建一个volume-emptydir.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>emptydir  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.14<span class="token punctuation">-</span>alpine    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>  <span class="token comment"># 将logs-volume挂在到nginx容器中，对应的目录为 /var/log/nginx</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"tail -f /logs/access.log"</span><span class="token punctuation">]</span> <span class="token comment"># 初始命令，动态读取指定文件中内容</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>  <span class="token comment"># 将logs-volume 挂在到busybox容器中，对应的目录为 /logs</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /logs  <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 声明volume， name为logs-volume，类型为emptyDir</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f volume-emptydir.yaml</span>pod<span class="token operator">/</span>volume<span class="token operator">-</span>emptydir created<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods volume-emptydir -n dev -o wide</span>NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> volume<span class="token operator">-</span>emptydir   2<span class="token operator">/</span>2     Running   0          97s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>100   node1  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 通过podIp访问nginx</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.244.1.100</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 通过kubectl logs命令查看指定容器的标准输出</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl logs -f volume-emptydir -n dev -c busybox</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0 <span class="token operator">-</span> <span class="token operator">-</span> <span class="token punctuation">[</span>13<span class="token operator">/</span>Apr<span class="token operator">/</span>2020:10:58:47 <span class="token operator">+</span>0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> 200 612 <span class="token string">"-"</span> <span class="token string">"curl/7.29.0"</span> <span class="token string">"-"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HostPath"><a href="#HostPath" class="headerlink" title="HostPath"></a>HostPath</h3><p>​    上节课提到，EmptyDir中数据不会被持久化，它会随着Pod的结束而销毁，如果想简单的将数据持久化到主机中，可以选择HostPath。</p><p>​    HostPath就是将Node主机中一个实际目录挂在到Pod中，以供容器使用，这样的设计就可以保证Pod销毁了，但是数据依据可以存在于Node主机上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220921200834022.png" alt="image-20220921200834022"></p><p>创建一个volume-hostpath.yaml：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>hostpath  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"tail -f /logs/access.log"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /logs  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>       <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/logs      <span class="token key atrule">type</span><span class="token punctuation">:</span> DirectoryOrCreate  <span class="token comment"># 目录存在就使用，不存在就先创建后使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">关于type的值的一点说明：DirectoryOrCreate 目录存在就使用，不存在就先创建后使用Directory目录必须存在FileOrCreate  文件存在就使用，不存在就先创建后使用File 文件必须存在    Socketunix套接字必须存在CharDevice字符设备必须存在BlockDevice 块设备必须存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f volume-hostpath.yaml</span>pod<span class="token operator">/</span>volume<span class="token operator">-</span>hostpath created<span class="token comment"># 查看Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods volume-hostpath -n dev -o wide</span>NAME                  READY   STATUS    RESTARTS   AGE   IP             NODE   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pod<span class="token operator">-</span>volume<span class="token operator">-</span>hostpath   2<span class="token operator">/</span>2     Running   0          16s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>104   node1  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#访问nginx</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.244.1.104</span><span class="token comment"># 接下来就可以去host的/root/logs目录下查看存储的文件了</span><span class="token comment">###  注意: 下面的操作需要到Pod所在的节点运行（案例中是node1）</span><span class="token namespace">[root@node1 ~]</span><span class="token comment"># ls /root/logs/</span>access<span class="token punctuation">.</span>log  error<span class="token punctuation">.</span>log<span class="token comment"># 同样的道理，如果在此目录下创建一个文件，到容器中也是可以看到的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>​    HostPath可以解决数据持久化的问题，但是一旦Node节点故障了，Pod如果转移到了别的节点，又会出现问题了，此时需要准备单独的网络存储系统，比较常用的用NFS、CIFS。</p><p>​    NFS是一个网络文件存储系统，可以搭建一台NFS服务器，然后将Pod中的存储直接连接到NFS系统上，这样的话，无论Pod在节点上怎么转移，只要Node跟NFS的对接没问题，数据就可以成功访问。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220921200854470.png" alt="image-20220921200854470"></p><p>1）首先要准备nfs的服务器，这里为了简单，直接是master节点做nfs服务器</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 在master上安装nfs服务</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum install nfs-utils -y</span><span class="token comment"># 准备一个共享目录</span><span class="token namespace">[root@master ~]</span><span class="token comment"># mkdir /root/data/nfs -pv</span><span class="token comment"># 将共享目录以读写权限暴露给192.168.109.0/24网段中的所有主机</span><span class="token namespace">[root@master ~]</span><span class="token comment"># vim /etc/exports</span><span class="token namespace">[root@master ~]</span><span class="token comment"># more /etc/exports</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>nfs     192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>0<span class="token operator">/</span>24<span class="token punctuation">(</span>rw<span class="token punctuation">,</span>no_root_squash<span class="token punctuation">)</span><span class="token comment"># 启动nfs服务</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl start nfs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）接下来，要在的每个node节点上都安装下nfs，这样的目的是为了node节点可以驱动nfs设备</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 在node上安装nfs服务，注意不需要启动</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum install nfs-utils -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）接下来，就可以编写pod的配置文件了，创建volume-nfs.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>nfs  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/nginx  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"tail -f /logs/access.log"</span><span class="token punctuation">]</span>     <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /logs  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logs<span class="token punctuation">-</span>volume    <span class="token key atrule">nfs</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.80.100  <span class="token comment">#nfs服务器地址</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/data/nfs <span class="token comment">#共享文件路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）最后，运行下pod，观察结果</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f volume-nfs.yaml</span>pod<span class="token operator">/</span>volume<span class="token operator">-</span>nfs created<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods volume-nfs -n dev</span>NAME                  READY   STATUS    RESTARTS   AGEvolume<span class="token operator">-</span>nfs        2<span class="token operator">/</span>2     Running   0          2m9s<span class="token comment"># 查看nfs服务器上的共享目录，发现已经有文件了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># ls /root/data/</span>access<span class="token punctuation">.</span>log  error<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##高级存储</p><h3 id="PV和PVC"><a href="#PV和PVC" class="headerlink" title="PV和PVC"></a>PV和PVC</h3><p>​    前面已经学习了使用NFS提供存储，此时就要求用户会搭建NFS系统，并且会在yaml配置nfs。由于kubernetes支持的存储系统有很多，要求客户全都掌握，显然不现实。为了能够屏蔽底层存储实现的细节，方便用户使用， kubernetes引入PV和PVC两种资源对象。</p><p>​    PV（Persistent Volume）是持久化卷的意思，是对底层的共享存储的一种抽象。一般情况下PV由kubernetes管理员进行创建和配置，它与底层具体的共享存储技术有关，并通过插件完成与共享存储的对接。</p><p>​    PVC（Persistent Volume Claim）是持久卷声明的意思，是用户对于存储需求的一种声明。换句话说，PVC其实就是用户向kubernetes系统发出的一种资源需求申请。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220921200935685.png" alt="image-20220921200935685"></p><p>使用了PV和PVC之后，工作可以得到进一步的细分：</p><ul><li>存储：存储工程师维护</li><li>PV：  kubernetes管理员维护</li><li>PVC：kubernetes用户维护</li></ul><h3 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h3><p>PV是存储资源的抽象，下面是资源清单文件:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1  <span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pv2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">nfs</span><span class="token punctuation">:</span> <span class="token comment"># 存储类型，与底层真正存储对应</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>  <span class="token comment"># 存储能力，目前只支持存储空间的设置</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token comment"># 访问模式</span>  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> <span class="token comment"># 存储类别</span>  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> <span class="token comment"># 回收策略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PV 的关键配置参数说明：</p><ul><li><p><strong>存储类型</strong></p><p>底层实际存储的类型，kubernetes支持多种存储类型，每种存储类型的配置都有所差异</p></li><li><p><strong>存储能力（capacity）</strong></p></li></ul><p>​      目前只支持存储空间的设置( storage=1Gi )，不过未来可能会加入IOPS、吞吐量等指标的配置</p><ul><li><p><strong>访问模式（accessModes）</strong></p><p>用于描述用户应用对存储资源的访问权限，访问权限包括下面几种方式：</p><ul><li>ReadWriteOnce（RWO）：读写权限，但是只能被单个节点挂载</li><li>ReadOnlyMany（ROX）：  只读权限，可以被多个节点挂载</li><li>ReadWriteMany（RWX）：读写权限，可以被多个节点挂载</li></ul><p><code>需要注意的是，底层不同的存储类型可能支持的访问模式不同</code></p></li><li><p><strong>回收策略（persistentVolumeReclaimPolicy）</strong></p><p>当PV不再被使用了之后，对其的处理方式。目前支持三种策略：</p><ul><li>Retain  （保留）  保留数据，需要管理员手工清理数据</li><li>Recycle（回收）  清除 PV 中的数据，效果相当于执行 rm -rf /thevolume/*</li><li>Delete  （删除） 与 PV 相连的后端存储完成 volume 的删除操作，当然这常见于云服务商的存储服务</li></ul><p><code>需要注意的是，底层不同的存储类型可能支持的回收策略不同</code></p></li><li><p><strong>存储类别</strong></p><p>PV可以通过storageClassName参数指定一个存储类别</p><ul><li><p>具有特定类别的PV只能与请求了该类别的PVC进行绑定</p></li><li><p>未设定类别的PV则只能与不请求任何类别的PVC进行绑定</p></li></ul></li><li><p><strong>状态（status）</strong></p><p>一个 PV 的生命周期中，可能会处于4中不同的阶段：</p><ul><li>Available（可用）：     表示可用状态，还未被任何 PVC 绑定</li><li>Bound（已绑定）：     表示 PV 已经被 PVC 绑定</li><li>Released（已释放）： 表示 PVC 被删除，但是资源还未被集群重新声明</li><li>Failed（失败）：         表示该 PV 的自动回收失败</li></ul></li></ul><p><strong>实验</strong></p><p>使用NFS作为存储，来演示PV的使用，创建3个PV，对应NFS中的3个暴露的路径。</p><ol><li>准备NFS环境</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建目录</span><span class="token namespace">[root@master ~]</span><span class="token comment"># mkdir /root/data/{pv1,pv2,pv3} -pv</span><span class="token comment"># 暴露服务</span><span class="token namespace">[root@master ~]</span><span class="token comment"># more /etc/exports</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>pv1     192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>0<span class="token operator">/</span>24<span class="token punctuation">(</span>rw<span class="token punctuation">,</span>no_root_squash<span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>pv2     192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>0<span class="token operator">/</span>24<span class="token punctuation">(</span>rw<span class="token punctuation">,</span>no_root_squash<span class="token punctuation">)</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>pv3     192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>0<span class="token operator">/</span>24<span class="token punctuation">(</span>rw<span class="token punctuation">,</span>no_root_squash<span class="token punctuation">)</span><span class="token comment"># 重启服务</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  systemctl restart nfs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建pv.yaml</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span>  pv1<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>     <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/data/pv1    <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.80.100<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span>  pv2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>     <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/data/pv2    <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.80.100    <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span>  pv3<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>     <span class="token key atrule">storage</span><span class="token punctuation">:</span> 3Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Retain  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /root/data/pv3    <span class="token key atrule">server</span><span class="token punctuation">:</span> 192.168.80.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建 pv</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pv.yaml</span>persistentvolume<span class="token operator">/</span>pv1 createdpersistentvolume<span class="token operator">/</span>pv2 createdpersistentvolume<span class="token operator">/</span>pv3 created<span class="token comment"># 查看pv</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pv -o wide</span>NAME   CAPACITY   ACCESS MODES  RECLAIM POLICY  STATUS      AGE   VOLUMEMODEpv1    1Gi        RWX            Retain        Available    10s   Filesystempv2    2Gi        RWX            Retain        Available    10s   Filesystempv3    3Gi        RWX            Retain        Available    9s    Filesystem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PVC"><a href="#PVC" class="headerlink" title="PVC"></a>PVC</h3><p>PVC是资源的申请，用来声明对存储空间、访问模式、存储类别需求信息。下面是资源清单文件:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pvc  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span> <span class="token comment"># 访问模式</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 采用标签对PV选择</span>  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> <span class="token comment"># 存储类别</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment"># 请求空间</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PVC 的关键配置参数说明：</p><ul><li><strong>访问模式（accessModes）</strong></li></ul><p>​       用于描述用户应用对存储资源的访问权限</p><ul><li><p><strong>选择条件（selector）</strong></p><p>通过Label Selector的设置，可使PVC对于系统中己存在的PV进行筛选</p></li><li><p><strong>存储类别（storageClassName）</strong></p><p>PVC在定义时可以设定需要的后端存储的类别，只有设置了该class的pv才能被系统选出</p></li><li><p><strong>资源请求（Resources ）</strong></p><p>描述对存储资源的请求</p></li></ul><p><strong>实验</strong></p><ol><li> 创建pvc.yaml，申请pv</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pvc1  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi      <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pvc2  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi     <span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pvc3  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pvc</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pvc.yaml</span>persistentvolumeclaim<span class="token operator">/</span>pvc1 createdpersistentvolumeclaim<span class="token operator">/</span>pvc2 createdpersistentvolumeclaim<span class="token operator">/</span>pvc3 created<span class="token comment"># 查看pvc</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pvc  -n dev -o wide</span>NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE   VOLUMEMODEpvc1   Bound    pv1      1Gi        RWX                           10s   Filesystempvc2   Bound    pv2      2Gi        RWX                           10s   Filesystempvc3   Bound    pv3      3Gi        RWX                           10s   Filesystem<span class="token comment"># 查看pv</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pv -o wide</span>NAME  CAPACITY ACCESS MODES  RECLAIM POLICY  STATUS    CLAIM       AGE     VOLUMEMODEpv1    1Gi        RWx        Retain          Bound    dev<span class="token operator">/</span>pvc1    20s    Filesystempv2    2Gi        RWX        Retain          Bound    dev<span class="token operator">/</span>pvc2    20s    Filesystempv3    3Gi        RWX        Retain          Bound    dev<span class="token operator">/</span>pvc3    20s    Filesystem   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> 创建pods.yaml, 使用pv</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod1  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"while true;do echo pod1 &gt;&gt; /root/out.txt; sleep 10; done;"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /root/  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume      <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>        <span class="token key atrule">claimName</span><span class="token punctuation">:</span> pvc1        <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod2  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"while true;do echo pod2 &gt;&gt; /root/out.txt; sleep 10; done;"</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /root/  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume      <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>        <span class="token key atrule">claimName</span><span class="token punctuation">:</span> pvc2        <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pods.yaml</span>pod<span class="token operator">/</span>pod1 createdpod<span class="token operator">/</span>pod2 created<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME   READY   STATUS    RESTARTS   AGE   IP            NODE   pod1   1<span class="token operator">/</span>1     Running   0          14s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>69   node1   pod2   1<span class="token operator">/</span>1     Running   0          14s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>70   node1  <span class="token comment"># 查看pvc</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pvc -n dev -o wide</span>NAME   STATUS   VOLUME   CAPACITY   ACCESS MODES      AGE   VOLUMEMODEpvc1   Bound    pv1      1Gi        RWX               94m   Filesystempvc2   Bound    pv2      2Gi        RWX               94m   Filesystempvc3   Bound    pv3      3Gi        RWX               94m   Filesystem<span class="token comment"># 查看pv</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pv -n dev -o wide</span>NAME   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM       AGE     VOLUMEMODEpv1    1Gi        RWX            Retain           Bound    dev<span class="token operator">/</span>pvc1    5h11m   Filesystempv2    2Gi        RWX            Retain           Bound    dev<span class="token operator">/</span>pvc2    5h11m   Filesystempv3    3Gi        RWX            Retain           Bound    dev<span class="token operator">/</span>pvc3    5h11m   Filesystem<span class="token comment"># 查看nfs中的文件存储</span><span class="token namespace">[root@master ~]</span><span class="token comment"># more /root/data/pv1/out.txt</span>node1node1<span class="token namespace">[root@master ~]</span><span class="token comment"># more /root/data/pv2/out.txt</span>node2node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>PVC和PV是一一对应的，PV和PVC之间的相互作用遵循以下生命周期：</p><ul><li><p><strong>资源供应</strong>：管理员手动创建底层存储和PV</p></li><li><p><strong>资源绑定</strong>：用户创建PVC，kubernetes负责根据PVC的声明去寻找PV，并绑定</p><p>在用户定义好PVC之后，系统将根据PVC对存储资源的请求在已存在的PV中选择一个满足条件的</p><ul><li><p>一旦找到，就将该PV与用户定义的PVC进行绑定，用户的应用就可以使用这个PVC了</p></li><li><p>如果找不到，PVC则会无限期处于Pending状态，直到等到系统管理员创建了一个符合其要求的PV</p></li></ul><p>PV一旦绑定到某个PVC上，就会被这个PVC独占，不能再与其他PVC进行绑定了</p></li><li><p><strong>资源使用</strong>：用户可在pod中像volume一样使用pvc</p><p>Pod使用Volume的定义，将PVC挂载到容器内的某个路径进行使用。</p></li><li><p><strong>资源释放</strong>：用户删除pvc来释放pv</p><p>当存储资源使用完毕后，用户可以删除PVC，与该PVC绑定的PV将会被标记为“已释放”，但还不能立刻与其他PVC进行绑定。通过之前PVC写入的数据可能还被留在存储设备上，只有在清除之后该PV才能再次使用。</p></li><li><p><strong>资源回收</strong>：kubernetes根据pv设置的回收策略进行资源的回收</p><p>对于PV，管理员可以设定回收策略，用于设置与之绑定的PVC释放资源之后如何处理遗留数据的问题。只有PV的存储空间完成回收，才能供新的PVC绑定和使用</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220921201150011.png" alt="image-20220921201150011"></p><h2 id="配置存储"><a href="#配置存储" class="headerlink" title="配置存储"></a>配置存储</h2><h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><p>ConfigMap是一种比较特殊的存储卷，它的主要作用是用来存储配置信息的。</p><p>创建configmap.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> configmap  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    username:admin    password:123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，使用此配置文件创建configmap</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建configmap</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f configmap.yaml</span>configmap<span class="token operator">/</span>configmap created<span class="token comment"># 查看configmap详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe cm configmap -n dev</span>Name:         configmapNamespace:    devLabels:       &lt;none&gt;Annotations:  &lt;none&gt;<span class="token keyword">Data</span>====info:<span class="token operator">--</span>-<span class="token operator">-</span>username:adminpassword:123456Events:  &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来创建一个pod-configmap.yaml，将上面创建的configmap挂载进去</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>configmap  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span> <span class="token comment"># 将configmap挂载到目录</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /configmap/config  <span class="token key atrule">volumes</span><span class="token punctuation">:</span> <span class="token comment"># 引用configmap</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> configmap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-configmap.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>configmap created<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-configmap -n dev</span>NAME            READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>configmap   1<span class="token operator">/</span>1     Running   0          6s<span class="token comment">#进入容器</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl exec -it pod-configmap -n dev /bin/sh</span><span class="token comment"># cd /configmap/config/</span><span class="token comment"># ls</span>info<span class="token comment"># more info</span>username:adminpassword:123456<span class="token comment"># 可以看到映射已经成功，每个configmap都映射成了一个目录</span><span class="token comment"># key---&gt;文件     value----&gt;文件中的内容</span><span class="token comment"># 此时如果更新configmap的内容, 容器中的值也会动态更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>​    在kubernetes中，还存在一种和ConfigMap非常类似的对象，称为Secret对象。它主要用于存储敏感信息，例如密码、秘钥、证书等等。</p><ol><li> 首先使用base64对数据进行编码</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># echo -n 'admin' | base64 #准备username</span>YWRtaW4=<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># echo -n '123456' | base64 #准备password</span>MTIzNDU2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> 接下来编写secret.yaml，并创建Secret</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> secret  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> YWRtaW4=  <span class="token key atrule">password</span><span class="token punctuation">:</span> MTIzNDU2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建secret</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f secret.yaml</span>secret<span class="token operator">/</span>secret created<span class="token comment"># 查看secret详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe secret secret -n dev</span>Name:         secretNamespace:    devLabels:       &lt;none&gt;Annotations:  &lt;none&gt;<span class="token function">Type</span>:  Opaque<span class="token keyword">Data</span>====password:  6 bytesusername:  5 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>创建pod-secret.yaml，将上面创建的secret挂载进去：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>secret  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span> <span class="token comment"># 将secret挂载到目录</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /secret/config  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-secret.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>secret created<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-secret -n dev</span>NAME            READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>secret      1<span class="token operator">/</span>1     Running   0          2m28s<span class="token comment"># 进入容器，查看secret信息，发现已经自动解码了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl exec -it pod-secret /bin/sh -n dev</span><span class="token operator">/</span> <span class="token comment"># ls /secret/config/</span>password  username<span class="token operator">/</span> <span class="token comment"># more /secret/config/username</span>admin<span class="token operator">/</span> <span class="token comment"># more /secret/config/password</span>123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，已经实现了利用secret实现了信息的编码。</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、kubernetesService详解</title>
      <link href="/2022/09/20/kubernetes/%E4%B8%83%E3%80%81kubernetesService%E8%AF%A6%E8%A7%A3%20/"/>
      <url>/2022/09/20/kubernetes/%E4%B8%83%E3%80%81kubernetesService%E8%AF%A6%E8%A7%A3%20/</url>
      
        <content type="html"><![CDATA[<h2 id="Service介绍"><a href="#Service介绍" class="headerlink" title="Service介绍"></a>Service介绍</h2><p>​    在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定的，这也就意味着不方便直接采用pod的ip对服务进行访问。</p><p>​    为了解决这个问题，kubernetes提供了Service资源，Service会对提供同一个服务的多个pod进行聚合，并且提供一个统一的入口地址。通过访问Service的入口地址就能访问到后面的pod服务。</p><img src="assets/image-20200408194716912.png" style="zoom:100%;border:1px solid"><p>​    Service在很多情况下只是一个概念，真正起作用的其实是kube-proxy服务进程，每个Node节点上都运行着一个kube-proxy服务进程。当创建Service的时候会通过api-server向etcd写入创建的service的信息，而kube-proxy会基于监听的机制发现这种Service的变动，然后<strong>它会将最新的Service信息转换成对应的访问规则</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920155800937.png" alt="image-20220920155800937"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 10.97.97.97:80 是service提供的访问入口</span><span class="token comment"># 当访问这个入口的时候，可以发现后面有三个pod的服务在等待调用，</span><span class="token comment"># kube-proxy会基于rr（轮询）的策略，将请求分发到其中一个pod上去</span><span class="token comment"># 这个规则会同时在集群内的所有节点上都生成，所以在任何一个节点上访问都可以。</span><span class="token namespace">[root@node1 ~]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version 1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>size=4096<span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  <span class="token operator">-</span>&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97:80 rr  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>39:80               Masq    1      0          0  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>40:80               Masq    1      0          0  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>33:80               Masq    1      0          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kube-proxy目前支持三种工作模式:</p><p><strong>userspace 模式</strong></p><p>​    userspace模式下，kube-proxy会为每一个Service创建一个监听端口，发向Cluster IP的请求被Iptables规则重定向到kube-proxy监听的端口上，kube-proxy根据LB算法选择一个提供服务的Pod并和其建立链接，以将请求转发到Pod上。<br>​    该模式下，kube-proxy充当了一个四层负责均衡器的角色。由于kube-proxy运行在userspace中，在进行转发处理时会增加内核和用户空间之间的数据拷贝，虽然比较稳定，但是效率比较低。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920155820129.png" alt="image-20220920155820129"></p><p><strong>iptables 模式</strong></p><p>​    iptables模式下，kube-proxy为service后端的每个Pod创建对应的iptables规则，直接将发向Cluster IP的请求重定向到一个Pod IP。<br>​    该模式下kube-proxy不承担四层负责均衡器的角色，只负责创建iptables规则。该模式的优点是较userspace模式效率更高，但不能提供灵活的LB策略，当后端Pod不可用时也无法进行重试。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920155832009.png" alt="image-20220920155832009"></p><p><strong>ipvs 模式</strong></p><p>​    ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高。除此以外，ipvs支持更多的LB算法。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920155847038.png" alt="image-20220920155847038"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 此模式必须安装ipvs内核模块，否则会降级为iptables</span><span class="token comment"># 开启ipvs</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl edit cm kube-proxy -n kube-system</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete pod -l k8s-app=kube-proxy -n kube-system</span><span class="token namespace">[root@node1 ~]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version 1<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1 <span class="token punctuation">(</span>size=4096<span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  <span class="token operator">-</span>&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97:80 rr  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>39:80               Masq    1      0          0  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>40:80               Masq    1      0          0  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>33:80               Masq    1      0          0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Service类型"><a href="#Service类型" class="headerlink" title="Service类型"></a>Service类型</h2><p>Service的资源清单文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service  <span class="token comment"># 资源类型</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1  <span class="token comment"># 资源版本</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment"># 元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> service <span class="token comment"># 资源名称</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev <span class="token comment"># 命名空间</span><span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 描述</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 标签选择器，用于确定当前service代理哪些pod</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token comment"># Service类型，指定service的访问方式</span>  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span>  <span class="token comment"># 虚拟服务的ip地址</span>  <span class="token key atrule">sessionAffinity</span><span class="token punctuation">:</span> <span class="token comment"># session亲和性，支持ClientIP、None两个选项</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 端口信息</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP       <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3017</span>  <span class="token comment"># service端口</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">5003</span> <span class="token comment"># pod端口</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31122</span> <span class="token comment"># 主机端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ClusterIP：默认值，它是Kubernetes系统自动分配的虚拟IP，只能在集群内部访问</li><li>NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务</li><li>LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境支持</li><li>ExternalName： 把集群外部的服务引入集群内部，直接使用</li></ul><h2 id="Service使用"><a href="#Service使用" class="headerlink" title="Service使用"></a>Service使用</h2><h3 id="实验环境准备"><a href="#实验环境准备" class="headerlink" title="实验环境准备"></a>实验环境准备</h3><p>在使用service之前，首先利用Deployment创建出3个pod，注意要为pod设置<code>app=nginx-pod</code>的标签</p><p>创建deployment.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>deployment  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f deployment.yaml</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment created<span class="token comment"># 查看pod详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide --show-labels</span>NAME                             READY   STATUS     IP            NODE     LABELSpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>2lvtq   1<span class="token operator">/</span>1     Running    10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>26   node1    app=nginx<span class="token operator">-</span>podpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>ctbzb   1<span class="token operator">/</span>1     Running    10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>24   node2    app=nginx<span class="token operator">-</span>podpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>lv528   1<span class="token operator">/</span>1     Running    10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25   node1    app=nginx<span class="token operator">-</span>pod<span class="token comment"># 为了方便后面的测试，修改下三台nginx的index.html页面（三台修改的IP地址不一致）</span><span class="token comment"># kubectl exec -it pc-deployment-6696798b78-2lvtq -n dev /bin/sh</span><span class="token comment"># echo "10.244.1.26" &gt; /usr/share/nginx/html/index.html</span><span class="token comment">#修改完毕之后，访问测试</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.244.1.26</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>26<span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.244.2.24</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>24<span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.244.1.25</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ClusterIP类型的Service"><a href="#ClusterIP类型的Service" class="headerlink" title="ClusterIP类型的Service"></a>ClusterIP类型的Service</h3><p>创建service-clusterip.yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>clusterip  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> 10.97.97.97 <span class="token comment"># service的ip地址，如果不写，默认会生成一个</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token comment"># Service端口       </span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment"># pod端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f service-clusterip.yaml</span>service<span class="token operator">/</span>service<span class="token operator">-</span>clusterip created<span class="token comment"># 查看service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get svc -n dev -o wide</span>NAME                <span class="token function">TYPE</span>        CLUSTER<span class="token operator">-</span>IP    EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGE   SELECTORservice<span class="token operator">-</span>clusterip   ClusterIP   10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97   &lt;none&gt;        80<span class="token operator">/</span>TCP    13s   app=nginx<span class="token operator">-</span>pod<span class="token comment"># 查看service的详细信息</span><span class="token comment"># 在这里有一个Endpoints列表，里面就是当前service可以负载到的服务入口</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe svc service-clusterip -n dev</span>Name:              service<span class="token operator">-</span>clusteripNamespace:         devLabels:            &lt;none&gt;Annotations:       &lt;none&gt;Selector:          app=nginx<span class="token operator">-</span>pod<span class="token function">Type</span>:              ClusterIPIP:                10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97Port:              &lt;unset&gt;  80<span class="token operator">/</span>TCPTargetPort:        80<span class="token operator">/</span>TCPEndpoints:         10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>24:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>26:80Session Affinity:  NoneEvents:            &lt;none&gt;<span class="token comment"># 查看ipvs的映射规则</span><span class="token namespace">[root@master ~]</span><span class="token comment"># ipvsadm -Ln</span>TCP  10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97:80 rr  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>24:80               Masq    1      0          0           <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25:80               Masq    1      0          0           <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>26:80               Masq    1      0          0<span class="token comment"># 访问10.97.97.97:80观察效果</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.97.97.97:80</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Endpoint</strong></p><p>​    Endpoint是kubernetes中的一个资源对象，存储在etcd中，用来记录一个service对应的所有pod的访问地址，它是根据service配置文件中selector描述产生的。</p><p>​    一个Service由一组Pod组成，这些Pod通过Endpoints暴露出来，<strong>Endpoints是实现实际服务的端点集合</strong>。换句话说，service和pod之间的联系是通过endpoints实现的。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920161933786.png" alt="image-20220920161933786"></p><p><strong>负载分发策略</strong></p><p>对Service的访问被分发到了后端的Pod上去，目前kubernetes提供了两种负载分发策略：</p><ul><li><p>如果不定义，默认使用kube-proxy的策略，比如随机、轮询</p></li><li><p>基于客户端地址的会话保持模式，即来自同一个客户端发起的所有请求都会转发到固定的一个Pod上</p><p>此模式可以使在spec中添加<code>sessionAffinity:ClientIP</code>选项</p></li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看ipvs的映射规则【rr 轮询】</span><span class="token namespace">[root@master ~]</span><span class="token comment"># ipvsadm -Ln</span>TCP  10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97:80 rr  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>24:80               Masq    1      0          0           <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25:80               Masq    1      0          0           <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>26:80               Masq    1      0          0<span class="token comment"># 循环访问测试</span><span class="token namespace">[root@master ~]</span><span class="token comment"># while true;do curl 10.97.97.97:80; sleep 5; done;</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>2610<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>2510<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>2410<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>2610<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>2510<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>24<span class="token comment"># 修改分发策略----sessionAffinity:ClientIP</span><span class="token comment"># 查看ipvs规则【persistent 代表持久】</span><span class="token namespace">[root@master ~]</span><span class="token comment"># ipvsadm -Ln</span>TCP  10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97<span class="token punctuation">.</span>97:80 rr persistent 10800  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>39:80               Masq    1      0          0  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>40:80               Masq    1      0          0  <span class="token operator">-</span>&gt; 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>33:80               Masq    1      0          0<span class="token comment"># 循环访问测试</span><span class="token namespace">[root@master ~]</span><span class="token comment"># while true;do curl 10.97.97.97; sleep 5; done;</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>2510<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>2510<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>25  <span class="token comment"># 删除service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f service-clusterip.yaml</span>service <span class="token string">"service-clusterip"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HeadLiness类型的Service"><a href="#HeadLiness类型的Service" class="headerlink" title="HeadLiness类型的Service"></a>HeadLiness类型的Service</h3><p>​    在某些场景中，开发人员可能不想使用Service提供的负载均衡功能，而希望自己来控制负载均衡策略，针对这种情况，kubernetes提供了HeadLiness  Service，这类Service不会分配Cluster IP，如果想要访问service，只能通过service的域名进行查询。</p><p>创建service-headliness.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>headliness  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None <span class="token comment"># 将clusterIP设置为None，即可创建headliness Service</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f service-headliness.yaml</span>service<span class="token operator">/</span>service<span class="token operator">-</span>headliness created<span class="token comment"># 获取service， 发现CLUSTER-IP未分配</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get svc service-headliness -n dev -o wide</span>NAME                 <span class="token function">TYPE</span>        CLUSTER<span class="token operator">-</span>IP   EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGE   SELECTORservice<span class="token operator">-</span>headliness   ClusterIP   None         &lt;none&gt;        80<span class="token operator">/</span>TCP    11s   app=nginx<span class="token operator">-</span>pod<span class="token comment"># 查看service详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe svc service-headliness  -n dev</span>Name:              service<span class="token operator">-</span>headlinessNamespace:         devLabels:            &lt;none&gt;Annotations:       &lt;none&gt;Selector:          app=nginx<span class="token operator">-</span>pod<span class="token function">Type</span>:              ClusterIPIP:                NonePort:              &lt;unset&gt;  80<span class="token operator">/</span>TCPTargetPort:        80<span class="token operator">/</span>TCPEndpoints:         10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>24:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>26:80Session Affinity:  NoneEvents:            &lt;none&gt;<span class="token comment"># 查看域名的解析情况</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl exec -it pc-deployment-66cb59b984-8p84h -n dev /bin/sh</span><span class="token operator">/</span> <span class="token comment"># cat /etc/resolv.conf</span>nameserver 10<span class="token punctuation">.</span>96<span class="token punctuation">.</span>0<span class="token punctuation">.</span>10search dev<span class="token punctuation">.</span>svc<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>local svc<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>local cluster<span class="token punctuation">.</span>local<span class="token namespace">[root@master ~]</span><span class="token comment"># dig @10.96.0.10 service-headliness.dev.svc.cluster.local</span>service<span class="token operator">-</span>headliness<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>svc<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>local<span class="token punctuation">.</span> 30 INA 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>25service<span class="token operator">-</span>headliness<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>svc<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>local<span class="token punctuation">.</span> 30 INA 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>26service<span class="token operator">-</span>headliness<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>svc<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>local<span class="token punctuation">.</span> 30 INA 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NodePort类型的Service"><a href="#NodePort类型的Service" class="headerlink" title="NodePort类型的Service"></a>NodePort类型的Service</h3><p>​    在之前的样例中，创建的Service的ip地址只有集群内部才可以访问，如果希望将Service暴露给集群外部使用，那么就要使用到另外一种类型的Service，称为NodePort类型。NodePort的工作原理其实就是<strong>将service的端口映射到Node的一个端口上</strong>，然后就可以通过<code>NodeIp:NodePort</code>来访问service了。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920162922654.png" alt="image-20220920162922654"></p><p>创建service-nodeport.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>nodeport  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort <span class="token comment"># service类型</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30002</span> <span class="token comment"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f service-nodeport.yaml</span>service<span class="token operator">/</span>service<span class="token operator">-</span>nodeport created<span class="token comment"># 查看service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get svc -n dev -o wide</span>NAME               <span class="token function">TYPE</span>       CLUSTER<span class="token operator">-</span>IP      EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>       SELECTORservice<span class="token operator">-</span>nodeport   NodePort   10<span class="token punctuation">.</span>107<span class="token punctuation">.</span>158<span class="token punctuation">.</span>87   &lt;none&gt;        80:30002<span class="token operator">/</span>TCP  app=nginx<span class="token operator">-</span>pod<span class="token comment"># 接下来可以通过电脑主机的浏览器去访问集群中任意一个nodeip的30002端口，即可访问到pod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LoadBalancer类型的Service"><a href="#LoadBalancer类型的Service" class="headerlink" title="LoadBalancer类型的Service"></a>LoadBalancer类型的Service</h3><p>​    LoadBalancer和NodePort很相似，目的都是向外部暴露一个端口，区别在于LoadBalancer会在集群的外部再来做一个负载均衡设备，而这个设备需要外部环境支持的，外部服务发送到这个设备上的请求，会被设备负载之后转发到集群中。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920163252388.png" alt="image-20220920163252388"></p><h3 id="ExternalName类型的Service"><a href="#ExternalName类型的Service" class="headerlink" title="ExternalName类型的Service"></a>ExternalName类型的Service</h3><p>​     ExternalName类型的Service用于引入集群外部的服务，它通过<code>externalName</code>属性指定外部一个服务的地址，然后在集群内部访问此service就可以访问到外部的服务了。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920163325567.png" alt="image-20220920163325567"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>externalname  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> ExternalName <span class="token comment"># service类型</span>  <span class="token key atrule">externalName</span><span class="token punctuation">:</span> www.baidu.com  <span class="token comment">#改成ip地址也可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl  create -f service-externalname.yaml</span>service<span class="token operator">/</span>service<span class="token operator">-</span>externalname created<span class="token comment"># 域名解析</span><span class="token namespace">[root@master ~]</span><span class="token comment"># dig @10.96.0.10 service-externalname.dev.svc.cluster.local</span>service<span class="token operator">-</span>externalname<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>svc<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span>local<span class="token punctuation">.</span> 30 IN CNAME www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token punctuation">.</span>30INCNAMEwww<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span>www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span>30INA36<span class="token punctuation">.</span>152<span class="token punctuation">.</span>44<span class="token punctuation">.</span>95www<span class="token punctuation">.</span>a<span class="token punctuation">.</span>shifen<span class="token punctuation">.</span>com<span class="token punctuation">.</span>30INA36<span class="token punctuation">.</span>152<span class="token punctuation">.</span>44<span class="token punctuation">.</span>96<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ingress介绍"><a href="#Ingress介绍" class="headerlink" title="Ingress介绍"></a>Ingress介绍</h2><p>​     在前面课程中已经提到，Service对集群之外暴露服务的主要方式有两种：NotePort和LoadBalancer，但是这两种方式，都有一定的缺点：</p><ul><li>NodePort方式的缺点是会占用很多集群机器的端口，那么当集群服务变多的时候，这个缺点就愈发明显</li><li>LB方式的缺点是每个service需要一个LB，浪费、麻烦，并且需要kubernetes之外设备的支持</li></ul><p>​    基于这种现状，kubernetes提供了Ingress资源对象，Ingress只需要一个NodePort或者一个LB就可以满足暴露多个Service的需求。工作机制大致如下图表示：</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920163801245.png" alt="image-20220920163801245"></p><p>​    实际上，Ingress相当于一个7层的负载均衡器，是kubernetes对反向代理的一个抽象，它的工作原理类似于Nginx，可以理解成在<strong>Ingress里建立诸多映射规则，Ingress Controller通过监听这些配置规则并转化成Nginx的反向代理配置 , 然后对外部提供服务</strong>。在这里有两个核心概念：</p><ul><li>ingress：kubernetes中的一个对象，作用是定义请求如何转发到service的规则</li><li>ingress controller：具体实现反向代理及负载均衡的程序，对ingress定义的规则进行解析，根据配置的规则来实现请求转发，实现方式有很多，比如Nginx, Contour, Haproxy等等</li></ul><p>Ingress（以Nginx为例）的工作原理如下：</p><ol><li>用户编写Ingress规则，说明哪个域名对应kubernetes集群中的哪个Service</li><li>Ingress控制器动态感知Ingress服务规则的变化，然后生成一段对应的Nginx反向代理配置</li><li>Ingress控制器会将生成的Nginx配置写入到一个运行着的Nginx服务中，并动态更新</li><li>到此为止，其实真正在工作的就是一个Nginx了，内部配置了用户定义的请求转发规则</li></ol><h2 id="Ingress使用"><a href="#Ingress使用" class="headerlink" title="Ingress使用"></a><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920164539268.png" alt="image-20220920164539268">Ingress使用</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>搭建ingress环境</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建文件夹</span><span class="token namespace">[root@master ~]</span><span class="token comment"># mkdir ingress-controller</span><span class="token namespace">[root@master ~]</span><span class="token comment"># cd ingress-controller/</span><span class="token comment"># 获取ingress-nginx，本次案例使用的是0.30版本</span><span class="token namespace">[root@master ingress-controller]</span><span class="token comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml</span><span class="token namespace">[root@master ingress-controller]</span><span class="token comment"># wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml</span><span class="token comment"># 修改mandatory.yaml文件中的仓库</span><span class="token comment"># 修改quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span><span class="token comment"># 为quay-mirror.qiniu.com/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0</span><span class="token comment"># 创建ingress-nginx</span><span class="token namespace">[root@master ingress-controller]</span><span class="token comment"># kubectl apply -f ./</span><span class="token comment"># 查看ingress-nginx</span><span class="token namespace">[root@master ingress-controller]</span><span class="token comment"># kubectl get pod -n ingress-nginx</span>NAME                                        READY   STATUS              RESTARTS   AGEnginx<span class="token operator">-</span>ingress<span class="token operator">-</span>controller<span class="token operator">-</span>7f74f657bd<span class="token operator">-</span>mtw6f   0<span class="token operator">/</span>1     ContainerCreating   0          13s<span class="token comment"># 查看service</span><span class="token namespace">[root@master ingress-controller]</span><span class="token comment"># kubectl get svc -n ingress-nginx</span>NAME            <span class="token function">TYPE</span>       CLUSTER<span class="token operator">-</span>IP     EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>                      AGEingress<span class="token operator">-</span>nginx   NodePort   10<span class="token punctuation">.</span>100<span class="token punctuation">.</span>1<span class="token punctuation">.</span>107   &lt;none&gt;        80:30802<span class="token operator">/</span>TCP<span class="token punctuation">,</span>443:31294<span class="token operator">/</span>TCP   34s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>准备service和pod</strong></p><p>为了后面的实验比较方便，创建如下图所示的模型</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220920164821152.png" alt="image-20220920164821152"></p><p>创建tomcat-nginx.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>deployment  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat        <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">:</span>8.5<span class="token punctuation">-</span>jre10<span class="token punctuation">-</span>slim        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>service  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>pod  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f tomcat-nginx.yaml</span><span class="token comment"># 查看</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get svc -n dev</span>NAME             <span class="token function">TYPE</span>        CLUSTER<span class="token operator">-</span>IP   EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>    AGEnginx<span class="token operator">-</span>service    ClusterIP   None         &lt;none&gt;        80<span class="token operator">/</span>TCP     5stomcat<span class="token operator">-</span>service   ClusterIP   None         &lt;none&gt;        8080<span class="token operator">/</span>TCP   5s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Http代理"><a href="#Http代理" class="headerlink" title="Http代理"></a>Http代理</h3><p>创建ingress-http.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>http  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> nginx.oxyay.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> tomcat.oxyay.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>service          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f ingress-http.yaml</span>ingress<span class="token punctuation">.</span>extensions<span class="token operator">/</span>ingress<span class="token operator">-</span>http created<span class="token comment"># 查看</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get ing ingress-http -n dev</span>NAME           HOSTS                                  ADDRESS   PORTS   AGEingress<span class="token operator">-</span>http   nginx<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com<span class="token punctuation">,</span>tomcat<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com             80      80s<span class="token comment"># 查看详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe ing ingress-http  -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Rules:Host                Path  Backends<span class="token operator">--</span>-<span class="token operator">-</span>                <span class="token operator">--</span>-<span class="token operator">-</span>  <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>nginx<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com   <span class="token operator">/</span> nginx<span class="token operator">-</span>service:80 <span class="token punctuation">(</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>35:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>36:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>37:80<span class="token punctuation">)</span>tomcat<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com  <span class="token operator">/</span> tomcat<span class="token operator">-</span>service:8080<span class="token punctuation">(</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>34:8080<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>40:8080<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>41:8080<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 接下来,在本地电脑上配置host文件,解析上面的两个域名到192.168.80.100(master)上</span><span class="token comment"># 然后,就可以分别访问tomcat.oxyay.com:30802  和  nginx.oxyay.com:30802 查看效果了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Https代理"><a href="#Https代理" class="headerlink" title="Https代理"></a>Https代理</h3><p>创建证书</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 生成证书</span>openssl req <span class="token operator">-</span>x509 <span class="token operator">-</span>sha256 <span class="token operator">-</span>nodes <span class="token operator">-</span>days 365 <span class="token operator">-</span>newkey rsa:2048 <span class="token operator">-</span>keyout tls<span class="token punctuation">.</span>key <span class="token operator">-</span>out tls<span class="token punctuation">.</span>crt <span class="token operator">-</span>subj <span class="token string">"/C=CN/ST=BJ/L=BJ/O=nginx/CN=oxyay.com"</span><span class="token comment"># 创建密钥</span>kubectl create secret tls tls<span class="token operator">-</span>secret <span class="token operator">--</span>key tls<span class="token punctuation">.</span>key <span class="token operator">--</span>cert tls<span class="token punctuation">.</span>crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建ingress-https.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>https  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">tls</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> nginx.oxyay.com      <span class="token punctuation">-</span> tomcat.oxyay.com      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> tls<span class="token punctuation">-</span>secret <span class="token comment"># 指定秘钥</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> nginx.oxyay.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>service          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> tomcat.oxyay.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>service          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f ingress-https.yaml</span>ingress<span class="token punctuation">.</span>extensions<span class="token operator">/</span>ingress<span class="token operator">-</span>https created<span class="token comment"># 查看</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get ing ingress-https -n dev</span>NAME            HOSTS                              ADDRESS        PORTS     AGEingress<span class="token operator">-</span>https   nginx<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com<span class="token punctuation">,</span>tomcat<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com   10<span class="token punctuation">.</span>100<span class="token punctuation">.</span>1<span class="token punctuation">.</span>107   80<span class="token punctuation">,</span> 443   94s<span class="token comment"># 查看详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe ing ingress-https -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>TLS:  tls<span class="token operator">-</span>secret terminates nginx<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com<span class="token punctuation">,</span>tomcat<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>comRules:  Host              Path  Backends  <span class="token operator">--</span>-<span class="token operator">-</span>              <span class="token operator">--</span>-<span class="token operator">-</span>  <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>  nginx<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com                       <span class="token operator">/</span>   nginx<span class="token operator">-</span>service:80 <span class="token punctuation">(</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>35:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>36:80<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>37:80 <span class="token operator">+</span> 3 more<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  tomcat<span class="token punctuation">.</span>oxyay<span class="token punctuation">.</span>com                      <span class="token operator">/</span>   tomcat<span class="token operator">-</span>service:8080 <span class="token punctuation">(</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>34:8080<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>40:8080<span class="token punctuation">,</span>10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>41:8080<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 下面可以通过浏览器访问https://nginx.oxyay.com:30802 和 https://tomcat.oxyay.com:31294来查看了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、kubernetesPod详解</title>
      <link href="/2022/09/08/kubernetes/%E4%BA%94%E3%80%81kubernetesPod%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/09/08/kubernetes/%E4%BA%94%E3%80%81kubernetesPod%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Pod介绍"><a href="#Pod介绍" class="headerlink" title="Pod介绍"></a>Pod介绍</h2><h3 id="Pod结构"><a href="#Pod结构" class="headerlink" title="Pod结构"></a>Pod结构</h3><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908210649779.png" alt="image-20220908210649779"></p><p>每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类：</p><ul><li><p>用户程序所在的容器，数量可多可少</p></li><li><p>Pause容器，这是每个Pod都会有的一个<strong>根容器</strong>，它的作用有两个：</p><ul><li><p>可以以它为依据，评估整个Pod的健康状态</p></li><li><p>可以在根容器上设置Ip地址，其它容器都此Ip（Pod IP），以实现Pod内部的网路通信</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">这里是Pod内部的通讯，Pod的之间的通讯采用虚拟二层网络技术来实现，我们当前环境用的是Flannel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h3 id="Pod定义"><a href="#Pod定义" class="headerlink" title="Pod定义"></a>Pod定义</h3><p>下面是Pod的资源清单：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1     <span class="token comment">#必选，版本号，例如v1</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod       　 <span class="token comment">#必选，资源类型，例如 Pod</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>       　 <span class="token comment">#必选，元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> string     <span class="token comment">#必选，Pod名称</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> string  <span class="token comment">#Pod所属的命名空间,默认为"default"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>       　　  <span class="token comment">#自定义标签列表</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string      　          <span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token comment">#必选，Pod中容器的详细定义</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token comment">#必选，Pod中容器列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string   <span class="token comment">#必选，容器名称</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> string  <span class="token comment">#必选，容器的镜像名称</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> Always<span class="token punctuation">|</span>Never<span class="token punctuation">|</span>IfNotPresent <span class="token punctuation">]</span>  <span class="token comment">#获取镜像的策略 </span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span>   <span class="token comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span>      <span class="token comment">#容器的启动命令参数列表</span>    <span class="token key atrule">workingDir</span><span class="token punctuation">:</span> string  <span class="token comment">#容器的工作目录</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>       <span class="token comment">#挂载到容器内部的存储卷配置</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string      <span class="token comment">#引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名</span>      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> string <span class="token comment">#存储卷在容器内mount的绝对路径，应少于512字符</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> boolean <span class="token comment">#是否为只读模式</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment">#需要暴露的端口库号列表</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string        <span class="token comment">#端口的名称</span>      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> int  <span class="token comment">#容器需要监听的端口号</span>      <span class="token key atrule">hostPort</span><span class="token punctuation">:</span> int       <span class="token comment">#容器所在主机需要监听的端口号，默认与Container相同</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> string    <span class="token comment">#端口协议，支持TCP和UDP，默认TCP</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span>   <span class="token comment">#容器运行前需设置的环境变量列表</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string  <span class="token comment">#环境变量名称</span>      <span class="token key atrule">value</span><span class="token punctuation">:</span> string <span class="token comment">#环境变量的值</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment">#资源限制和请求的设置</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token comment">#资源限制的设置</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> string     <span class="token comment">#Cpu的限制，单位为core数，将用于docker run --cpu-shares参数</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> string  <span class="token comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span> <span class="token comment">#资源请求的设置</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> string    <span class="token comment">#Cpu请求，容器启动的初始可用数量</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> string <span class="token comment">#内存请求,容器启动的初始可用数量</span>    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span> <span class="token comment">#生命周期钩子</span><span class="token key atrule">postStart</span><span class="token punctuation">:</span> <span class="token comment">#容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启</span><span class="token key atrule">preStop</span><span class="token punctuation">:</span> <span class="token comment">#容器终止前执行此钩子,无论结果如何,容器都会终止</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>  <span class="token comment">#对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>       　 <span class="token comment">#对Pod容器内检查方式设置为exec方式</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">]</span>  <span class="token comment">#exec方式需要制定的命令或脚本</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>       <span class="token comment">#对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> string        <span class="token key atrule">port</span><span class="token punctuation">:</span> number        <span class="token key atrule">host</span><span class="token punctuation">:</span> string        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> string        <span class="token key atrule">HttpHeaders</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string          <span class="token key atrule">value</span><span class="token punctuation">:</span> string      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>     <span class="token comment">#对Pod内个容器健康检查方式设置为tcpSocket方式</span>         <span class="token key atrule">port</span><span class="token punctuation">:</span> number       <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">0</span>       <span class="token comment">#容器启动完成后首次探测的时间，单位为秒</span>       <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> 0    　　    <span class="token comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认1秒</span>       <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> 0     　　    <span class="token comment">#对容器监控检查的定期探测时间设置，单位秒，默认10秒一次</span>       <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">0</span>       <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">0</span>       <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>         <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Always <span class="token punctuation">|</span> Never <span class="token punctuation">|</span> OnFailure<span class="token punctuation">]</span>  <span class="token comment">#Pod的重启策略</span>  <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> &lt;string<span class="token punctuation">&gt;</span> <span class="token comment">#设置NodeName表示将该Pod调度到指定到名称的node节点上</span>  <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span> obeject <span class="token comment">#设置NodeSelector表示将该Pod调度到包含这个label的node上</span>  <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span> <span class="token comment">#Pull镜像时使用的secret名称，以key：secretkey格式指定</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string  <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token comment">#在该pod上定义共享存储卷列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> string    <span class="token comment">#共享存储卷名称 （volumes类型有很多种）</span>    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token comment">#类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值</span>    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span> string   <span class="token comment">#类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> string      　　        <span class="token comment">#Pod所在宿主机的目录，将被用于同期中mount的目录</span>    <span class="token key atrule">secret</span><span class="token punctuation">:</span>       　　　<span class="token comment">#类型为secret的存储卷，挂载集群与定义的secret对象到容器内部</span>      <span class="token key atrule">scretname</span><span class="token punctuation">:</span> string        <span class="token key atrule">items</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> string        <span class="token key atrule">path</span><span class="token punctuation">:</span> string    <span class="token key atrule">configMap</span><span class="token punctuation">:</span>         <span class="token comment">#类型为configMap的存储卷，挂载预定义的configMap对象到容器内部</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> string      <span class="token key atrule">items</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> string        <span class="token key atrule">path</span><span class="token punctuation">:</span> string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#小提示：</span><span class="token comment">#在这里，可通过一个命令来查看每种资源的可配置项</span><span class="token comment">#   kubectl explain 资源类型         查看某种资源可以配置的一级属性</span><span class="token comment">#kubectl explain 资源类型.属性     查看属性的子属性</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl explain pod</span>KIND:     PodVERSION:  v1FIELDS:   apiVersion   &lt;string&gt;   kind &lt;string&gt;   metadata     &lt;Object&gt;   spec &lt;Object&gt;   status       &lt;Object&gt;<span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl explain pod.metadata</span>KIND:     PodVERSION:  v1RESOURCE: metadata &lt;Object&gt;FIELDS:   annotations  &lt;map<span class="token namespace">[string]</span>string&gt;   clusterName  &lt;string&gt;   creationTimestamp    &lt;string&gt;   deletionGracePeriodSeconds   &lt;integer&gt;   deletionTimestamp    &lt;string&gt;   finalizers   &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>string&gt;   generateName &lt;string&gt;   generation   &lt;integer&gt;   labels       &lt;map<span class="token namespace">[string]</span>string&gt;   managedFields        &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object&gt;   name &lt;string&gt;   namespace    &lt;string&gt;   ownerReferences      &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object&gt;   resourceVersion      &lt;string&gt;   selfLink     &lt;string&gt;   uid  &lt;string&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在kubernetes中基本所有资源的一级属性都是一样的，主要包含5部分：</p><ul><li><p>apiVersion   &lt;string&gt;     版本，由kubernetes内部定义，版本号必须可以用 kubectl api-versions 查询到</p></li><li><p>kind &lt;string&gt;                类型，由kubernetes内部定义，版本号必须可以用 kubectl api-resources 查询到</p></li><li><p>metadata   &lt;Object&gt;     元数据，主要是资源标识和说明，常用的有name、namespace、labels等</p></li><li><p>spec &lt;Object&gt;               描述，这是配置中最重要的一部分，里面是对各种资源配置的详细描述                </p></li><li><p>status  &lt;Object&gt;            状态信息，里面的内容不需要定义，由kubernetes自动生成</p></li></ul><p>在上面的属性中，spec是接下来研究的重点，继续看下它的常见子属性:</p><ul><li>containers   &lt;[]Object&gt;       容器列表，用于定义容器的详细信息 </li><li>nodeName &lt;String&gt;           根据nodeName的值将pod调度到指定的Node节点上</li><li>nodeSelector   &lt;map[]&gt;      根据NodeSelector中定义的信息选择将该Pod调度到包含这些label的Node 上</li><li>hostNetwork  &lt;boolean&gt;    是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络</li><li>volumes      &lt;[]Object&gt;       存储卷，用于定义Pod上面挂在的存储信息 </li><li>restartPolicy    &lt;string&gt;       重启策略，表示Pod在遇到故障的时候的处理策略</li></ul><h2 id="Pod配置"><a href="#Pod配置" class="headerlink" title="Pod配置"></a>Pod配置</h2><p>本小节主要来研究<code>pod.spec.containers</code>属性，这也是pod配置中最为关键的一项配置。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl explain pod.spec.containers</span>KIND:     PodVERSION:  v1RESOURCE: containers &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object&gt;   <span class="token comment"># 数组，代表可以有多个容器</span>FIELDS:   name  &lt;string&gt;     <span class="token comment"># 容器名称</span>   image &lt;string&gt;     <span class="token comment"># 容器需要的镜像地址</span>   imagePullPolicy  &lt;string&gt; <span class="token comment"># 镜像拉取策略 </span>   command  &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>string&gt; <span class="token comment"># 容器的启动命令列表，如不指定，使用打包时使用的启动命令</span>   args     &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>string&gt; <span class="token comment"># 容器的启动命令需要的参数列表</span>   env      &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object&gt; <span class="token comment"># 容器环境变量的配置</span>   ports    &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object&gt;     <span class="token comment"># 容器需要暴露的端口号列表</span>   resources &lt;Object&gt;      <span class="token comment"># 资源限制和资源请求的设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>创建pod-base.yaml文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>base  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span> oxyay<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义了一个比较简单Pod的配置，里面有两个容器：</p><ul><li>nginx：用1.17.1版本的nginx镜像创建，（nginx是一个轻量级web容器）</li><li>busybox：用1.30版本的busybox镜像创建，（busybox是一个小巧的linux命令集合）</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl apply -f pod-base.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>base created<span class="token comment"># 查看Pod状况</span><span class="token comment"># READY 1/2 : 表示当前Pod中有2个容器，其中1个准备就绪，1个未就绪</span><span class="token comment"># RESTARTS  : 重启次数，因为有1个容器故障了，Pod一直在重启试图恢复它</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl get pod -n dev</span>NAME       READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>base   1<span class="token operator">/</span>2     Running   4          95s<span class="token comment"># 可以通过describe查看内部的详情</span><span class="token comment"># 此时已经运行起来了一个基本的Pod，虽然它暂时有问题</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl describe pod pod-base -n dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="镜像拉取"><a href="#镜像拉取" class="headerlink" title="镜像拉取"></a>镜像拉取</h3><p>创建pod-imagepullpolicy.yaml文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>imagepullpolicy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always <span class="token comment"># 用于设置镜像拉取策略</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>imagePullPolicy，用于设置镜像拉取策略，kubernetes支持配置三种拉取策略：</p><ul><li>Always：总是从远程仓库拉取镜像（一直远程下载）</li><li>IfNotPresent：本地有则使用本地镜像，本地没有则从远程仓库拉取镜像（本地有就本地  本地没远程下载）</li><li>Never：只使用本地镜像，从不去远程仓库拉取，本地没有就报错 （一直使用本地）</li></ul><blockquote><p>默认值说明：</p><p>​    如果镜像tag为具体版本号， 默认策略是：IfNotPresent</p><p>​    如果镜像tag为：latest（最终版本） ，默认策略是always</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl create -f pod-imagepullpolicy.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>imagepullpolicy created<span class="token comment"># 查看Pod详情</span><span class="token comment"># 此时明显可以看到nginx镜像有一步Pulling image "nginx:1.17.1"的过程</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl describe pod pod-imagepullpolicy -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Events:  <span class="token function">Type</span>     Reason     Age               <span class="token keyword">From</span>               Message  <span class="token operator">--</span>-<span class="token operator">-</span>     <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>     <span class="token operator">--</span>-<span class="token operator">-</span>              <span class="token operator">--</span>-<span class="token operator">-</span>               <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>  Normal   Scheduled  &lt;unknown&gt;         default<span class="token operator">-</span>scheduler  Successfully assigned dev<span class="token operator">/</span>pod<span class="token operator">-</span>imagePullPolicy to node1  Normal   Pulling    32s               kubelet<span class="token punctuation">,</span> node1     Pulling image <span class="token string">"nginx:1.17.1"</span>  Normal   Pulled     26s               kubelet<span class="token punctuation">,</span> node1     Successfully pulled image <span class="token string">"nginx:1.17.1"</span>  Normal   Created    26s               kubelet<span class="token punctuation">,</span> node1     Created container nginx  Normal   Started    25s               kubelet<span class="token punctuation">,</span> node1     Started container nginx  Normal   Pulled     7s <span class="token punctuation">(</span>x3 over 25s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Container image <span class="token string">"busybox:1.30"</span> already present on machine  Normal   Created    7s <span class="token punctuation">(</span>x3 over 25s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Created container busybox  Normal   Started    7s <span class="token punctuation">(</span>x3 over 25s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Started container busybox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><p>​    在前面的案例中，一直有一个问题没有解决，就是的busybox容器一直没有成功运行，那么到底是什么原因导致这个容器的故障呢？</p><p>​    原来busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command配置。</p><p>创建pod-command.yaml文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>command  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"touch /tmp/hello.txt;while true;do /bin/echo $(date +%T) &gt;&gt; /tmp/hello.txt; sleep 3; done;"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>command，用于在pod中的容器初始化完毕之后运行一个命令。</p><blockquote><p>稍微解释下上面命令的意思：</p><p>​    “/bin/sh”,”-c”,  使用sh执行命令</p><p>​    touch /tmp/hello.txt;   创建一个/tmp/hello.txt 文件</p><p>​    while true;do /bin/echo $(date +%T) &gt;&gt; /tmp/hello.txt; sleep 3; done;  每隔3秒向文件中写入当前时间</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl create  -f pod-command.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>command created<span class="token comment"># 查看Pod状态</span><span class="token comment"># 此时发现两个pod都正常运行了</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl get pods pod-command -n dev</span>NAME          READY   STATUS   RESTARTS   AGEpod<span class="token operator">-</span>command   2<span class="token operator">/</span>2     Runing   0          2s<span class="token comment"># 进入pod中的busybox容器，查看文件内容</span><span class="token comment"># 补充一个命令: kubectl exec  pod名称 -n 命名空间 -it -c 容器名称 /bin/sh  在容器内部执行命令</span><span class="token comment"># 使用这个命令就可以进入某个容器的内部，然后进行相关操作了</span><span class="token comment"># 比如，可以查看txt文件的内容</span><span class="token namespace">[root@master pod]</span><span class="token comment"># kubectl exec pod-command -n dev -it -c busybox /bin/sh</span><span class="token operator">/</span> <span class="token comment"># tail -f /tmp/hello.txt</span>13:17:3913:17:4213:17:45<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-md" data-language="md"><code class="language-md">特别说明：    通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。 1 如果command和args均没有写，那么用Dockerfile的配置。 2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command 3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数 4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>创建pod-env.yaml文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>env  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"while true;do /bin/echo $(date +%T);sleep 60; done;"</span><span class="token punctuation">]</span>    <span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token comment"># 设置环境变量列表</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"username"</span>      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"admin"</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"password"</span>      <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"123456"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>env，环境变量，用于在pod中的容器设置环境变量。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-env.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>env created<span class="token comment"># 进入容器，输出环境变量</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl exec pod-env -n dev -c busybox -it /bin/sh</span><span class="token operator">/</span> <span class="token comment"># echo $username</span>admin<span class="token operator">/</span> <span class="token comment"># echo $password</span>123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式不是很推荐，推荐将这些配置单独存储在配置文件中，这种方式将在后面介绍。</p><h3 id="端口设置"><a href="#端口设置" class="headerlink" title="端口设置"></a>端口设置</h3><p>本小节来介绍容器的端口设置，也就是containers的ports选项。</p><p>首先看下ports支持的子选项：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl explain pod.spec.containers.ports</span>KIND:     PodVERSION:  v1RESOURCE: ports &lt;<span class="token punctuation">[</span><span class="token punctuation">]</span>Object&gt;FIELDS:   name         &lt;string&gt;  <span class="token comment"># 端口名称，如果指定，必须保证name在pod中是唯一的</span>   containerPort&lt;integer&gt; <span class="token comment"># 容器要监听的端口(0&lt;x&lt;65536)</span>   hostPort     &lt;integer&gt; <span class="token comment"># 容器要在主机上公开的端口，如果设置，主机上只能运行容器的一个副本(一般省略) </span>   hostIP       &lt;string&gt;  <span class="token comment"># 要将外部端口绑定到的主机IP(一般省略)</span>   protocol     &lt;string&gt;  <span class="token comment"># 端口协议。必须是UDP、TCP或SCTP。默认为“TCP”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，编写一个测试案例，创建pod-ports.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>ports  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 设置容器暴露的端口列表</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-ports.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>ports created<span class="token comment"># 查看pod</span><span class="token comment"># 在下面可以明显看到配置信息</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-ports -n dev -o yaml</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>spec:  containers:  <span class="token operator">-</span> image: nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1    imagePullPolicy: IfNotPresent    name: nginx    ports:    <span class="token operator">-</span> containerPort: 80      name: nginx<span class="token operator">-</span>port      protocol: TCP<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问容器中的程序需要使用的是<code>podIp:containerPort</code></p><h3 id="资源配额"><a href="#资源配额" class="headerlink" title="资源配额"></a>资源配额</h3><p>​    容器中的程序要运行，肯定是要占用一定资源的，比如cpu和内存等，如果不对某个容器的资源做限制，那么它就可能吃掉大量资源，导致其它容器无法运行。针对这种情况，kubernetes提供了对内存和cpu的资源进行配额的机制，这种机制主要通过resources选项实现，他有两个子选项：</p><ul><li><p>limits：用于限制运行时容器的最大占用资源，当容器占用资源超过limits时会被终止，并进行重启</p></li><li><p>requests ：用于设置容器需要的最小资源，如果环境资源不够，容器将无法启动</p></li></ul><p>可以通过上面两个选项设置资源的上下限。</p><p>接下来，编写一个测试案例，创建pod-resources.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>resources  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token comment"># 资源配额</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token comment"># 限制资源（上限）</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token comment"># CPU限制，单位是core数</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"10Gi"</span> <span class="token comment"># 内存限制</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span> <span class="token comment"># 请求资源（下限）</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"1"</span>  <span class="token comment"># CPU限制，单位是core数</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"10Mi"</span>  <span class="token comment"># 内存限制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这对cpu和memory的单位做一个说明：</p><ul><li><p>cpu：core数，可以为整数或小数</p></li><li><p>memory： 内存大小，可以使用Gi、Mi、G、M等形式</p></li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 运行Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create  -f pod-resources.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>resources created<span class="token comment"># 查看发现pod运行正常</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-resources -n dev</span>NAME            READY   STATUS    RESTARTS   AGE  pod<span class="token operator">-</span>resources   1<span class="token operator">/</span>1     Running   0          39s   <span class="token comment"># 接下来，停止Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete  -f pod-resources.yaml</span>pod <span class="token string">"pod-resources"</span> deleted<span class="token comment"># 编辑pod，修改resources.requests.memory的值为10Gi</span><span class="token namespace">[root@master ~]</span><span class="token comment"># vim pod-resources.yaml</span><span class="token comment"># 再次启动pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create  -f pod-resources.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>resources created<span class="token comment"># 查看Pod状态，发现Pod启动失败</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-resources -n dev -o wide</span>NAME            READY   STATUS    RESTARTS   AGE          pod<span class="token operator">-</span>resources   0<span class="token operator">/</span>2     Pending   0          20s    <span class="token comment"># 查看pod详情会发现，如下提示</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pod pod-resources -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Warning  FailedScheduling  &lt;unknown&gt;  default<span class="token operator">-</span>scheduler  0<span class="token operator">/</span>2 nodes are available: 2 Insufficient memory<span class="token punctuation">.</span><span class="token punctuation">(</span>内存不足<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pod生命周期"><a href="#Pod生命周期" class="headerlink" title="Pod生命周期"></a>Pod生命周期</h2><p>我们一般将pod对象从创建至终的这段时间范围称为pod的生命周期，它主要包含下面的过程：</p><ul><li><p>pod创建过程</p></li><li><p>运行初始化容器（init container）过程</p></li><li><p>运行主容器（main container）</p><ul><li><p>容器启动后钩子（post start）、容器终止前钩子（pre stop）</p></li><li><p>容器的存活性探测（liveness probe）、就绪性探测（readiness probe）</p></li></ul></li><li><p>pod终止过程</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908224331988.png" alt="image-20220908224331988"></p><p>在整个生命周期中，Pod会出现5种<strong>状态</strong>（<strong>相位</strong>），分别如下：</p><ul><li>挂起（Pending）：apiserver已经创建了pod资源对象，但它尚未被调度完成或者仍处于下载镜像的过程中</li><li>运行中（Running）：pod已经被调度至某节点，并且所有容器都已经被kubelet创建完成</li><li>成功（Succeeded）：pod中的所有容器都已经成功终止并且不会被重启</li><li>失败（Failed）：所有容器都已经终止，但至少有一个容器终止失败，即容器返回了非0值的退出状态</li><li>未知（Unknown）：apiserver无法正常获取到pod对象的状态信息，通常由网络通信失败所导致</li></ul><h3 id="创建和终止"><a href="#创建和终止" class="headerlink" title="创建和终止"></a>创建和终止</h3><p><strong>pod的创建过程</strong></p><ol><li><p>用户通过kubectl或其他api客户端提交需要创建的pod信息给apiServer</p></li><li><p>apiServer开始生成pod对象的信息，并将信息存入etcd，然后返回确认信息至客户端</p></li><li><p>apiServer开始反映etcd中的pod对象的变化，其它组件使用watch机制来跟踪检查apiServer上的变动</p></li><li><p>scheduler发现有新的pod对象要创建，开始为Pod分配主机并将结果信息更新至apiServer</p></li><li><p>node节点上的kubelet发现有pod调度过来，尝试调用docker启动容器，并将结果回送至apiServer</p></li><li><p>apiServer将接收到的pod状态信息存入etcd中</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908224716944.png" alt="image-20220908224716944"></p></li></ol><p><strong>pod的终止过程</strong></p><ol><li>用户向apiServer发送删除pod对象的命令</li><li>apiServcer中的pod对象信息会随着时间的推移而更新，在宽限期内（默认30s），pod被视为dead</li><li>将pod标记为terminating状态</li><li>kubelet在监控到pod对象转为terminating状态的同时启动pod关闭过程</li><li>端点控制器监控到pod对象的关闭行为时将其从所有匹配到此端点的service资源的端点列表中移除</li><li>如果当前pod对象定义了preStop钩子处理器，则在其标记为terminating后即会以同步的方式启动执行</li><li>pod对象中的容器进程收到停止信号</li><li>宽限期结束后，若pod中还存在仍在运行的进程，那么pod对象会收到立即终止的信号</li><li>kubelet请求apiServer将此pod资源的宽限期设置为0从而完成删除操作，此时pod对于用户已不可见</li></ol><h3 id="初始化容器"><a href="#初始化容器" class="headerlink" title="初始化容器"></a>初始化容器</h3><p>初始化容器是在pod的主容器启动之前要运行的容器，主要是做一些主容器的前置工作，它具有两大特征：</p><ol><li>初始化容器必须运行完成直至结束，若某初始化容器运行失败，那么kubernetes需要重启它直到成功完成</li><li>初始化容器必须按照定义的顺序执行，当且仅当前一个成功之后，后面的一个才能运行</li></ol><p>初始化容器有很多的应用场景，下面列出的是最常见的几个：</p><ul><li>提供主容器镜像中不具备的工具程序或自定义代码</li><li>初始化容器要先于应用容器串行启动并运行完成，因此可用于延后应用容器的启动直至其依赖的条件得到满足</li></ul><p>接下来做一个案例，模拟下面这个需求：</p><p>​    假设要以主容器来运行nginx，但是要求在运行nginx之前先要能够连接上mysql和redis所在服务器</p><p>​    为了简化测试，事先规定好mysql<code>(192.168.109.201)</code>和redis<code>(192.168.109.202)</code>服务器的地址</p><p>创建pod-initcontainer.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>initcontainer  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> main<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>mysql    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'until ping 192.168.80.201 -c 1 ; do echo waiting for mysql...; sleep 2; done;'</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>redis    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'until ping 192.168.80.202 -c 1 ; do echo waiting for reids...; sleep 2; done;'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-initcontainer.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>initcontainer created<span class="token comment"># 查看pod状态</span><span class="token comment"># 发现pod卡在启动第一个初始化容器过程中，后面的容器不会运行</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kubectl describe pod  pod-initcontainer -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Events:  <span class="token function">Type</span>    Reason     Age   <span class="token keyword">From</span>               Message  <span class="token operator">--</span>-<span class="token operator">-</span>    <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>     <span class="token operator">--</span>-<span class="token operator">-</span>  <span class="token operator">--</span>-<span class="token operator">-</span>               <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>  Normal  Scheduled  49s   default<span class="token operator">-</span>scheduler  Successfully assigned dev<span class="token operator">/</span>pod<span class="token operator">-</span>initcontainer to node1  Normal  Pulled     48s   kubelet<span class="token punctuation">,</span> node1     Container image <span class="token string">"busybox:1.30"</span> already present on machine  Normal  Created    48s   kubelet<span class="token punctuation">,</span> node1     Created container <span class="token function">test-mysql</span>  Normal  Started    48s   kubelet<span class="token punctuation">,</span> node1     Started container <span class="token function">test-mysql</span><span class="token comment"># 动态查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-initcontainer -n dev -w</span>NAME                             READY   STATUS     RESTARTS   AGEpod<span class="token operator">-</span>initcontainer                0<span class="token operator">/</span>1     Init:0<span class="token operator">/</span>2   0          15spod<span class="token operator">-</span>initcontainer                0<span class="token operator">/</span>1     Init:1<span class="token operator">/</span>2   0          52spod<span class="token operator">-</span>initcontainer                0<span class="token operator">/</span>1     Init:1<span class="token operator">/</span>2   0          53spod<span class="token operator">-</span>initcontainer                0<span class="token operator">/</span>1     PodInitializing   0          89spod<span class="token operator">-</span>initcontainer                1<span class="token operator">/</span>1     Running           0          90s<span class="token comment"># 接下来新开一个shell，为当前服务器新增两个ip，观察pod的变化</span><span class="token namespace">[root@master ~]</span><span class="token comment"># ifconfig ens33:1 192.168.80.201 netmask 255.255.255.0 up</span><span class="token namespace">[root@master ~]</span><span class="token comment"># ifconfig ens33:2 192.168.80.202 netmask 255.255.255.0 up</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>钩子函数能够感知自身生命周期中的事件，并在相应的时刻到来时运行用户指定的程序代码。</p><p>kubernetes在主容器的启动之后和停止之前提供了两个钩子函数：</p><ul><li>post start：容器创建之后执行，如果失败了会重启容器</li><li>pre stop  ：容器终止之前执行，执行完成之后容器将成功终止，在其完成之前会阻塞删除容器的操作</li></ul><p>钩子处理器支持使用下面三种方式定义动作：</p><ul><li><p>Exec命令：在容器内执行一次命令</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">……  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">postStart</span><span class="token punctuation">:</span>       <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> cat        <span class="token punctuation">-</span> /tmp/healthy……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>TCPSocket：在当前容器尝试访问指定的socket</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">……        <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">postStart</span><span class="token punctuation">:</span>      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HTTPGet：在当前容器中向某url发起http请求</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">……  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">postStart</span><span class="token punctuation">:</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> / <span class="token comment">#URI地址</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment">#端口号</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.109.100 <span class="token comment">#主机地址</span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP <span class="token comment">#支持的协议，http或者https</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>接下来，以exec方式为例，演示下钩子函数的使用，创建pod-hook-exec.yaml文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>hook<span class="token punctuation">-</span>exec  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> main<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>         <span class="token key atrule">exec</span><span class="token punctuation">:</span> <span class="token comment"># 在容器启动的时候执行一个命令，修改掉nginx的默认首页内容</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"echo postStart... &gt; /usr/share/nginx/html/index.html"</span><span class="token punctuation">]</span>      <span class="token key atrule">preStop</span><span class="token punctuation">:</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span> <span class="token comment"># 在容器停止之前停止nginx服务</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/usr/sbin/nginx"</span><span class="token punctuation">,</span><span class="token string">"-s"</span><span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-hook-exec.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>hook<span class="token operator">-</span>exec created<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods  pod-hook-exec -n dev -o wide</span>NAME           READY   STATUS     RESTARTS   AGE    IP            NODE    pod<span class="token operator">-</span>hook<span class="token operator">-</span>exec  1<span class="token operator">/</span>1     Running    0          29s    10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>48   node2   <span class="token comment"># 访问pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl 10.244.2.48</span>postStart<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器探测"><a href="#容器探测" class="headerlink" title="容器探测"></a>容器探测</h3><p>​    容器探测用于检测容器中的应用实例是否正常工作，是保障业务可用性的一种传统机制。如果经过探测，实例的状态不符合预期，那么kubernetes就会把该问题实例” 摘除 “，不承担业务流量。kubernetes提供了两种探针来实现容器探测，分别是：</p><ul><li><p>liveness probes：存活性探针，用于检测应用实例当前是否处于正常运行状态，如果不是，k8s会重启容器</p></li><li><p>readiness probes：就绪性探针，用于检测应用实例当前是否可以接收请求，如果不能，k8s不会转发流量</p></li></ul><blockquote><p>livenessProbe 决定是否重启容器，readinessProbe 决定是否将请求转发给容器。</p></blockquote><p>上面两种探针目前均支持三种探测方式：</p><ul><li><p>Exec命令：在容器内执行一次命令，如果命令执行的退出码为0，则认为程序正常，否则不正常</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">……  <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>    <span class="token key atrule">exec</span><span class="token punctuation">:</span>      <span class="token key atrule">command</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> cat      <span class="token punctuation">-</span> /tmp/healthy……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>TCPSocket：将会尝试访问一个用户容器的端口，如果能够建立这条连接，则认为程序正常，否则不正常</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">……        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>    <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HTTPGet：调用容器内Web应用的URL，如果返回的状态码在200和399之间，则认为程序正常，否则不正常</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">……  <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>    <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> / <span class="token comment">#URI地址</span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment">#端口号</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment">#主机地址</span>      <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP <span class="token comment">#支持的协议，http或者https</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>下面以liveness probes为例，做几个演示：</p><p><strong>方式一：Exec</strong></p><p>创建pod-liveness-exec.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>liveness<span class="token punctuation">-</span>exec  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">exec</span><span class="token punctuation">:</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/cat"</span><span class="token punctuation">,</span><span class="token string">"/tmp/hello.txt"</span><span class="token punctuation">]</span> <span class="token comment"># 执行一个查看文件的命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 创建pod，观察效果</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-liveness-exec.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>liveness<span class="token operator">-</span>exec created<span class="token comment"># 查看Pod详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pods pod-liveness-exec -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  Normal   Created    20s <span class="token punctuation">(</span>x2 over 50s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Created container nginx  Normal   Started    20s <span class="token punctuation">(</span>x2 over 50s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Started container nginx  Normal   Killing    20s                kubelet<span class="token punctuation">,</span> node1     Container nginx failed liveness probe<span class="token punctuation">,</span> will be restarted  Warning  Unhealthy  0s <span class="token punctuation">(</span>x5 over 40s<span class="token punctuation">)</span>   kubelet<span class="token punctuation">,</span> node1     Liveness probe failed: <span class="token function">cat</span>: can<span class="token string">'t open '</span><span class="token operator">/</span>tmp<span class="token operator">/</span>hello11<span class="token punctuation">.</span>txt': No such file or directory  <span class="token comment"># 观察上面的信息就会发现nginx容器启动之后就进行了健康检查</span><span class="token comment"># 检查失败之后，容器被kill掉，然后尝试进行重启（这是重启策略的作用，后面讲解）</span><span class="token comment"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-liveness-exec -n dev</span>NAME                READY   STATUS             RESTARTS   AGEpod<span class="token operator">-</span>liveness<span class="token operator">-</span>exec   0<span class="token operator">/</span>1     CrashLoopBackOff   2          3m19s<span class="token comment"># 当然接下来，可以修改成一个存在的文件，比如/tmp/hello.txt，再试，结果就正常了......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：TCPSocket</strong></p><p>创建pod-liveness-tcpsocket.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>liveness<span class="token punctuation">-</span>tcpsocket  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span> <span class="token comment"># 尝试访问8080端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 创建pod，观察效果</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-liveness-tcpsocket.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>liveness<span class="token operator">-</span>tcpsocket created<span class="token comment"># 查看Pod详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pods pod-liveness-tcpsocket -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  Normal   Scheduled  31s                            default<span class="token operator">-</span>scheduler  Successfully assigned dev<span class="token operator">/</span>pod<span class="token operator">-</span>liveness<span class="token operator">-</span>tcpsocket to node2  Normal   Pulled     &lt;invalid&gt;                      kubelet<span class="token punctuation">,</span> node2     Container image <span class="token string">"nginx:1.17.1"</span> already present on machine  Normal   Created    &lt;invalid&gt;                      kubelet<span class="token punctuation">,</span> node2     Created container nginx  Normal   Started    &lt;invalid&gt;                      kubelet<span class="token punctuation">,</span> node2     Started container nginx  Warning  Unhealthy  &lt;invalid&gt; <span class="token punctuation">(</span>x2 over &lt;invalid&gt;<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node2     Liveness probe failed: dial tcp 10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>44:8080: connect: connection refused  <span class="token comment"># 观察上面的信息，发现尝试访问8080端口,但是失败了</span><span class="token comment"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-liveness-tcpsocket  -n dev</span>NAME                     READY   STATUS             RESTARTS   AGEpod<span class="token operator">-</span>liveness<span class="token operator">-</span>tcpsocket   0<span class="token operator">/</span>1     CrashLoopBackOff   2          3m19s<span class="token comment"># 当然接下来，可以修改成一个可以访问的端口，比如80，再试，结果就正常了......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式三：HTTPGet</strong></p><p>创建pod-liveness-httpget.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>liveness<span class="token punctuation">-</span>httpget  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>  <span class="token comment"># 其实就是访问http://127.0.0.1:80/hello  </span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP <span class="token comment">#支持的协议，http或者https</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span> <span class="token comment">#端口号</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello <span class="token comment">#URI地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 创建pod，观察效果</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-liveness-httpget.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>liveness<span class="token operator">-</span>httpget created<span class="token comment"># 查看Pod详情</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pod pod-liveness-httpget -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  Normal   Pulled     6s <span class="token punctuation">(</span>x3 over 64s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Container image <span class="token string">"nginx:1.17.1"</span> already present on machine  Normal   Created    6s <span class="token punctuation">(</span>x3 over 64s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Created container nginx  Normal   Started    6s <span class="token punctuation">(</span>x3 over 63s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Started container nginx  Warning  Unhealthy  6s <span class="token punctuation">(</span>x6 over 56s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Liveness probe failed: HTTP probe failed with statuscode: 404  Normal   Killing    6s <span class="token punctuation">(</span>x2 over 36s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Container nginx failed liveness probe<span class="token punctuation">,</span> will be restarted  <span class="token comment"># 观察上面信息，尝试访问路径，但是未找到,出现404错误</span><span class="token comment"># 稍等一会之后，再观察pod信息，就可以看到RESTARTS不再是0，而是一直增长</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-liveness-httpget -n dev</span>NAME                   READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>liveness<span class="token operator">-</span>httpget   1<span class="token operator">/</span>1     Running   5          3m17s<span class="token comment"># 当然接下来，可以修改成一个可以访问的路径path，比如/，再试，结果就正常了......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    至此，已经使用liveness Probe演示了三种探测方式，但是查看livenessProbe的子属性，会发现除了这三种方式，还有一些其他的配置，在这里一并解释下：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl explain pod.spec.containers.livenessProbe</span>FIELDS:   exec &lt;Object&gt;     tcpSocket    &lt;Object&gt;   httpGet      &lt;Object&gt;   initialDelaySeconds  &lt;integer&gt;  <span class="token comment"># 容器启动后等待多少秒执行第一次探测</span>   timeoutSeconds       &lt;integer&gt;  <span class="token comment"># 探测超时时间。默认1秒，最小1秒</span>   periodSeconds        &lt;integer&gt;  <span class="token comment"># 执行探测的频率。默认是10秒，最小1秒</span>   failureThreshold     &lt;integer&gt;  <span class="token comment"># 连续探测失败多少次才被认定为失败。默认是3。最小值是1</span>   successThreshold     &lt;integer&gt;  <span class="token comment"># 连续探测成功多少次才被认定为成功。默认是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面稍微配置两个，演示下效果即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># more pod-liveness-httpget.yaml</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>liveness<span class="token punctuation">-</span>httpget  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>         <span class="token key atrule">path</span><span class="token punctuation">:</span> /      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 容器启动后30s开始探测</span>      <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 探测超时时间为5s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启策略"><a href="#重启策略" class="headerlink" title="重启策略"></a>重启策略</h3><p>​    在上一节中，一旦容器探测出现了问题，kubernetes就会对容器所在的Pod进行重启，其实这是由pod的重启策略决定的，pod的重启策略有 3 种，分别如下：</p><ul><li>Always ：容器失效时，自动重启该容器，这也是默认值。</li><li>OnFailure ： 容器终止运行且退出码不为0时重启</li><li>Never ： 不论状态为何，都不重启该容器</li></ul><p>​    重启策略适用于pod对象中的所有容器，首次需要重启的容器，将在其需要时立即进行重启，随后再次需要重启的操作将由kubelet延迟一段时间后进行，且反复的重启操作的延迟时长以此为10s、20s、40s、80s、160s和300s，300s是最大延迟时长。</p><p>创建pod-restartpolicy.yaml：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>restartpolicy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>      <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never <span class="token comment"># 设置重启策略为Never</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行Pod测试</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-restartpolicy.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>restartpolicy created<span class="token comment"># 查看Pod详情，发现nginx容器失败</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl  describe pods pod-restartpolicy  -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  Warning  Unhealthy  15s <span class="token punctuation">(</span>x3 over 35s<span class="token punctuation">)</span>  kubelet<span class="token punctuation">,</span> node1     Liveness probe failed: HTTP probe failed with statuscode: 404  Normal   Killing    15s                kubelet<span class="token punctuation">,</span> node1     Container nginx failed liveness probe  <span class="token comment"># 多等一会，再观察pod的重启次数，发现一直是0，并未重启   </span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl  get pods pod-restartpolicy -n dev</span>NAME                   READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>restartpolicy      0<span class="token operator">/</span>1     Running   0          5min42s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pod调度"><a href="#Pod调度" class="headerlink" title="Pod调度"></a>Pod调度</h2><p>​    在默认情况下，一个Pod在哪个Node节点上运行，是由Scheduler组件采用相应的算法计算出来的，这个过程是不受人工控制的。但是在实际使用中，这并不满足的需求，因为很多情况下，我们想控制某些Pod到达某些节点上，那么应该怎么做呢？这就要求了解kubernetes对Pod的调度规则，kubernetes提供了四大类调度方式：</p><ul><li>自动调度：运行在哪个节点上完全由Scheduler经过一系列的算法计算得出</li><li>定向调度：NodeName、NodeSelector</li><li>亲和性调度：NodeAffinity、PodAffinity、PodAntiAffinity</li><li>污点（容忍）调度：Taints、Toleration</li></ul><h3 id="定向调度"><a href="#定向调度" class="headerlink" title="定向调度"></a>定向调度</h3><p>​    定向调度，指的是利用在pod上声明nodeName或者nodeSelector，以此将Pod调度到期望的node节点上。注意，这里的调度是强制的，这就意味着即使要调度的目标Node不存在，也会向上面进行调度，只不过pod运行失败而已。</p><p><strong>NodeName</strong></p><p>​    NodeName用于强制约束将Pod调度到指定的Name的Node节点上。这种方式，其实是直接跳过Scheduler的调度逻辑，直接将Pod调度到指定名称的节点。</p><p>接下来，实验一下：创建一个pod-nodename.yaml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>nodename  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> node1 <span class="token comment"># 指定调度到node1节点上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodename.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodename created<span class="token comment">#查看Pod调度到NODE属性，确实是调度到了node1节点上</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-nodename -n dev -o wide</span>NAME           READY   STATUS    RESTARTS   AGE   IP            NODE      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pod<span class="token operator">-</span>nodename   1<span class="token operator">/</span>1     Running   0          56s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>87   node1     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment"># 接下来，删除pod，修改nodeName的值为node3（并没有node3节点）</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pod-nodename.yaml</span>pod <span class="token string">"pod-nodename"</span> deleted<span class="token namespace">[root@master ~]</span><span class="token comment"># vim pod-nodename.yaml</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodename.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodename created<span class="token comment">#再次查看，发现已经向Node3节点调度，但是由于不存在node3节点，所以pod无法正常运行</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-nodename -n dev -o wide</span>NAME           READY   STATUS    RESTARTS   AGE   IP       NODE    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pod<span class="token operator">-</span>nodename   0<span class="token operator">/</span>1     Pending   0          6s    &lt;none&gt;   node3   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>NodeSelector</strong></p><p>​    NodeSelector用于将pod调度到添加了指定标签的node节点上。它是通过kubernetes的label-selector机制实现的，也就是说，在pod创建之前，会由scheduler使用MatchNodeSelector调度策略进行label匹配，找出目标node，然后将pod调度到目标节点，该匹配规则是强制约束。</p><p>接下来，实验一下：</p><p>1 首先分别为node节点添加标签</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl label nodes node1 nodeenv=pro</span>node<span class="token operator">/</span>node2 labeled<span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl label nodes node2 nodeenv=test</span>node<span class="token operator">/</span>node2 labeled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2 创建一个pod-nodeselector.yaml文件，并使用它创建Pod</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>nodeselector  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>     <span class="token key atrule">nodeenv</span><span class="token punctuation">:</span> pro <span class="token comment"># 指定调度到具有nodeenv=pro标签的节点上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">#创建Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodeselector.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodeselector created<span class="token comment">#查看Pod调度到NODE属性，确实是调度到了node1节点上</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-nodeselector -n dev -o wide</span>NAME               READY   STATUS    RESTARTS   AGE     IP          NODE    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pod<span class="token operator">-</span>nodeselector   1<span class="token operator">/</span>1     Running   0          47s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>87   node1   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 接下来，删除pod，修改nodeSelector的值为nodeenv: xxxx（不存在打有此标签的节点）</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pod-nodeselector.yaml</span>pod <span class="token string">"pod-nodeselector"</span> deleted<span class="token namespace">[root@master ~]</span><span class="token comment"># vim pod-nodeselector.yaml</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodeselector.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodeselector created<span class="token comment">#再次查看，发现pod无法正常运行,Node的值为none</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME               READY   STATUS    RESTARTS   AGE     IP       NODE    pod<span class="token operator">-</span>nodeselector   0<span class="token operator">/</span>1     Pending   0          2m20s   &lt;none&gt;   &lt;none&gt;<span class="token comment"># 查看详情,发现node selector匹配失败的提示</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pods pod-nodeselector -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Events:  <span class="token function">Type</span>     Reason            Age        <span class="token keyword">From</span>               Message  <span class="token operator">--</span>-<span class="token operator">-</span>     <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>            <span class="token operator">--</span>-<span class="token operator">-</span>       <span class="token operator">--</span>-<span class="token operator">-</span>               <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>  Warning  FailedScheduling  &lt;unknown&gt;  default<span class="token operator">-</span>scheduler  0<span class="token operator">/</span>3 nodes are available: 3 node<span class="token punctuation">(</span>s<span class="token punctuation">)</span> didn<span class="token string">'t match node selector.  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn'</span>t match node selector<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="亲和性调度"><a href="#亲和性调度" class="headerlink" title="亲和性调度"></a>亲和性调度</h3><p>​    上一节，介绍了两种定向调度的方式，使用起来非常方便，但是也有一定的问题，那就是如果没有满足条件的Node，那么Pod将不会被运行，即使在集群中还有可用Node列表也不行，这就限制了它的使用场景。</p><p>​    基于上面的问题，kubernetes还提供了一种亲和性调度（Affinity）。它在NodeSelector的基础之上的进行了扩展，可以通过配置的形式，实现优先选择满足条件的Node进行调度，如果没有，也可以调度到不满足条件的节点上，使调度更加灵活。</p><p>Affinity主要分为三类：</p><ul><li><p>nodeAffinity(node亲和性）: 以node为目标，解决pod可以调度到哪些node的问题</p></li><li><p>podAffinity(pod亲和性) :  以pod为目标，解决pod可以和哪些已存在的pod部署在同一个拓扑域中的问题</p></li><li><p>podAntiAffinity(pod反亲和性) :  以pod为目标，解决pod不能和哪些已存在pod部署在同一个拓扑域中的问题</p></li></ul><blockquote><p>关于亲和性(反亲和性)使用场景的说明：</p><p><strong>亲和性</strong>：如果两个应用频繁交互，那就有必要利用亲和性让两个应用的尽可能的靠近，这样可以减少因网络通信而带来的性能损耗。</p><p><strong>反亲和性</strong>：当应用的采用多副本部署时，有必要采用反亲和性让各个应用实例打散分布在各个node上，这样可以提高服务的高可用性。</p></blockquote><p><strong>NodeAffinity</strong></p><p>首先来看一下<code>NodeAffinity</code>的可配置项：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">pod.spec.affinity.nodeAffinity  requiredDuringSchedulingIgnoredDuringExecution  Node节点必须满足指定的所有规则才可以，相当于硬限制    nodeSelectorTerms  节点选择列表      matchFields   按节点字段列出的节点选择器要求列表      matchExpressions   按节点标签列出的节点选择器要求列表(推荐)        key    键        values 值        operator 关系符 支持Exists, DoesNotExist, In, NotIn, Gt, Lt  preferredDuringSchedulingIgnoredDuringExecution 优先调度到满足指定的规则的Node，相当于软限制 (倾向)    preference   一个节点选择器项，与相应的权重相关联      matchFields   按节点字段列出的节点选择器要求列表      matchExpressions   按节点标签列出的节点选择器要求列表(推荐)        key    键        values 值        operator 关系符 支持In, NotIn, Exists, DoesNotExist, Gt, Ltweight 倾向权重，在范围1-100。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">关系符的使用说明:<span class="token list punctuation">-</span> matchExpressions:  <span class="token list punctuation">-</span> key: nodeenv              # 匹配存在标签的key为nodeenv的节点    operator: Exists  <span class="token list punctuation">-</span> key: nodeenv              # 匹配标签的key为nodeenv,且value是"xxx"或"yyy"的节点    operator: In    values: ["xxx","yyy"]  <span class="token list punctuation">-</span> key: nodeenv              # 匹配标签的key为nodeenv,且value大于"xxx"的节点    operator: Gt    values: "xxx"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来首先演示一下<code>requiredDuringSchedulingIgnoredDuringExecution</code> ,</p><p>创建pod-nodeaffinity-required.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>nodeaffinity<span class="token punctuation">-</span>required  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>  <span class="token comment">#亲和性设置</span>    <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span> <span class="token comment">#设置node亲和性</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span> <span class="token comment"># 硬限制</span>        <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># 匹配env的值在["xxx","yyy"]中的标签</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> nodeenv            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodeaffinity-required.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodeaffinity<span class="token operator">-</span>required created<span class="token comment"># 查看pod状态 （运行失败）</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-nodeaffinity-required -n dev -o wide</span>NAME                        READY   STATUS    RESTARTS   AGE   IP       NODE    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> pod<span class="token operator">-</span>nodeaffinity<span class="token operator">-</span>required   0<span class="token operator">/</span>1     Pending   0          16s   &lt;none&gt;   &lt;none&gt;  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 查看Pod的详情</span><span class="token comment"># 发现调度失败，提示node选择失败</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pod pod-nodeaffinity-required -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  Warning  FailedScheduling  &lt;unknown&gt;  default<span class="token operator">-</span>scheduler  0<span class="token operator">/</span>3 nodes are available: 3 node<span class="token punctuation">(</span>s<span class="token punctuation">)</span> didn<span class="token string">'t match node selector.  Warning  FailedScheduling  &lt;unknown&gt;  default-scheduler  0/3 nodes are available: 3 node(s) didn'</span>t match node selector<span class="token punctuation">.</span><span class="token comment">#接下来，停止pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pod-nodeaffinity-required.yaml</span>pod <span class="token string">"pod-nodeaffinity-required"</span> deleted<span class="token comment"># 修改文件，将values: ["xxx","yyy"]------&gt; ["pro","yyy"]</span><span class="token namespace">[root@master ~]</span><span class="token comment"># vim pod-nodeaffinity-required.yaml</span><span class="token comment"># 再次启动</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodeaffinity-required.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodeaffinity<span class="token operator">-</span>required created<span class="token comment"># 此时查看，发现调度成功，已经将pod调度到了node1上</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-nodeaffinity-required -n dev -o wide</span>NAME                        READY   STATUS    RESTARTS   AGE   IP            NODE  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> pod<span class="token operator">-</span>nodeaffinity<span class="token operator">-</span>required   1<span class="token operator">/</span>1     Running   0          13s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>87   node1 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来再演示一下<code>requiredDuringSchedulingIgnoredDuringExecution</code> ,</p><p>创建pod-nodeaffinity-preferred.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>nodeaffinity<span class="token punctuation">-</span>preferred  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>  <span class="token comment">#亲和性设置</span>    <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span> <span class="token comment">#设置node亲和性</span>      <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span> <span class="token comment"># 软限制</span>      <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token key atrule">preference</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># 匹配env的值在["xxx","yyy"]中的标签(当前环境没有)</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> nodeenv            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-nodeaffinity-preferred.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>nodeaffinity<span class="token operator">-</span>preferred created<span class="token comment"># 查看pod状态 （运行成功）</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod pod-nodeaffinity-preferred -n dev</span>NAME                         READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>nodeaffinity<span class="token operator">-</span>preferred   1<span class="token operator">/</span>1     Running   0          20s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">NodeAffinity规则设置的注意事项：    1 如果同时定义了nodeSelector和nodeAffinity，那么必须两个条件都得到满足，Pod才能运行在指定的Node上    2 如果nodeAffinity指定了多个nodeSelectorTerms，那么只需要其中一个能够匹配成功即可    3 如果一个nodeSelectorTerms中有多个matchExpressions ，则一个节点必须满足所有的才能匹配成功    4 如果一个pod所在的Node在Pod运行期间其标签发生了改变，不再符合该Pod的节点亲和性需求，则系统将忽略此变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PodAffinity</strong></p><p>PodAffinity主要实现以运行的Pod为参照，实现让新创建的Pod跟参照pod在一个区域的功能。</p><p>首先来看一下<code>PodAffinity</code>的可配置项：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">pod.spec.affinity.podAffinity  requiredDuringSchedulingIgnoredDuringExecution  硬限制    namespaces       指定参照pod的namespace    topologyKey      指定调度作用域    labelSelector    标签选择器      matchExpressions  按节点标签列出的节点选择器要求列表(推荐)        key    键        values 值        operator 关系符 支持In, NotIn, Exists, DoesNotExist.      matchLabels    指多个matchExpressions映射的内容  preferredDuringSchedulingIgnoredDuringExecution 软限制    podAffinityTerm  选项      namespaces            topologyKey      labelSelector        matchExpressions            key    键          values 值          operator        matchLabels     weight 倾向权重，在范围1-100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">topologyKey用于指定调度时作用域,例如:    如果指定为kubernetes.io/hostname，那就是以Node节点为区分范围如果指定为beta.kubernetes.io/os,则以Node节点的操作系统类型来区分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来，演示下<code>requiredDuringSchedulingIgnoredDuringExecution</code>,</p><p>1）首先创建一个参照Pod，pod-podaffinity-target.yaml：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>podaffinity<span class="token punctuation">-</span>target  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">podenv</span><span class="token punctuation">:</span> pro <span class="token comment">#设置标签</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> node1 <span class="token comment"># 将目标pod名确指定到node1上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 启动目标pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-podaffinity-target.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>target created<span class="token comment"># 查看pod状况</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods  pod-podaffinity-target -n dev</span>NAME                     READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>target   1<span class="token operator">/</span>1     Running   0          4s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）创建pod-podaffinity-required.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>podaffinity<span class="token punctuation">-</span>required  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>  <span class="token comment">#亲和性设置</span>    <span class="token key atrule">podAffinity</span><span class="token punctuation">:</span> <span class="token comment">#设置pod亲和性</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span> <span class="token comment"># 硬限制</span>      <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># 匹配env的值在["xxx","yyy"]中的标签</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> podenv            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">]</span>        <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面配置表达的意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上，显然现在没有这样pod，接下来，运行测试一下。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 启动pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-podaffinity-required.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>required created<span class="token comment"># 查看pod状态，发现未运行</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-podaffinity-required -n dev</span>NAME                       READY   STATUS    RESTARTS   AGEpod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>required   0<span class="token operator">/</span>1     Pending   0          9s<span class="token comment"># 查看详细信息</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pods pod-podaffinity-required  -n dev</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Events:  <span class="token function">Type</span>     Reason            Age        <span class="token keyword">From</span>               Message  <span class="token operator">--</span>-<span class="token operator">-</span>     <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>            <span class="token operator">--</span>-<span class="token operator">-</span>       <span class="token operator">--</span>-<span class="token operator">-</span>               <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>  Warning  FailedScheduling  &lt;unknown&gt;  default<span class="token operator">-</span>scheduler  0<span class="token operator">/</span>3 nodes are available: 2 node<span class="token punctuation">(</span>s<span class="token punctuation">)</span> didn<span class="token string">'t match pod affinity rules, 1 node(s) had taints that the pod didn'</span>t tolerate<span class="token punctuation">.</span><span class="token comment"># 接下来修改  values: ["xxx","yyy"]-----&gt;values:["pro","yyy"]</span><span class="token comment"># 意思是：新Pod必须要与拥有标签nodeenv=xxx或者nodeenv=yyy的pod在同一Node上</span><span class="token namespace">[root@master ~]</span><span class="token comment"># vim pod-podaffinity-required.yaml</span><span class="token comment"># 然后重新创建pod，查看效果</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f  pod-podaffinity-required.yaml</span>pod <span class="token string">"pod-podaffinity-required"</span> deleted<span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-podaffinity-required.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>required created<span class="token comment"># 发现此时Pod运行正常</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-podaffinity-required -n dev</span>NAME                       READY   STATUS    RESTARTS   AGE   LABELSpod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>required   1<span class="token operator">/</span>1     Running   0          6s    &lt;none&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>PodAffinity</code>的 <code>preferredDuringSchedulingIgnoredDuringExecution</code>，这里不再演示。</p><p><strong>PodAntiAffinity</strong></p><p>PodAntiAffinity主要实现以运行的Pod为参照，让新创建的Pod跟参照pod不在一个区域中的功能。</p><p>它的配置方式和选项跟PodAffinty是一样的，这里不再做详细解释，直接做一个测试案例。</p><p>1）继续使用上个案例中目标pod</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide --show-labels</span>NAME                     READY   STATUS    RESTARTS   AGE     IP            NODE    LABELSpod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>required 1<span class="token operator">/</span>1     Running   0          3m29s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>38   node1   &lt;none&gt;     pod<span class="token operator">-</span>podaffinity<span class="token operator">-</span>target   1<span class="token operator">/</span>1     Running   0          9m25s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>37   node1   podenv=pro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2）创建pod-podantiaffinity-required.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>podantiaffinity<span class="token punctuation">-</span>required  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">affinity</span><span class="token punctuation">:</span>  <span class="token comment">#亲和性设置</span>    <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span> <span class="token comment">#设置pod亲和性</span>      <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span> <span class="token comment"># 硬限制</span>      <span class="token punctuation">-</span> <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>          <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># 匹配podenv的值在["pro"]中的标签</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> podenv            <span class="token key atrule">operator</span><span class="token punctuation">:</span> In            <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"pro"</span><span class="token punctuation">]</span>        <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> kubernetes.io/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面配置表达的意思是：新Pod必须要与拥有标签nodeenv=pro的pod不在同一Node上，运行测试一下。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pod-podantiaffinity-required.yaml</span>pod<span class="token operator">/</span>pod<span class="token operator">-</span>podantiaffinity<span class="token operator">-</span>required created<span class="token comment"># 查看pod</span><span class="token comment"># 发现调度到了node2上</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods pod-podantiaffinity-required -n dev -o wide</span>NAME                           READY   STATUS    RESTARTS   AGE   IP            NODE   <span class="token punctuation">.</span><span class="token punctuation">.</span> pod<span class="token operator">-</span>podantiaffinity<span class="token operator">-</span>required   1<span class="token operator">/</span>1     Running   0          44s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>15   node2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="污点和容忍"><a href="#污点和容忍" class="headerlink" title="污点和容忍"></a>污点和容忍</h3><p><strong>污点（Taints）</strong></p><p>​    前面的调度方式都是站在Pod的角度上，通过在Pod上添加属性，来确定Pod是否要调度到指定的Node上，其实我们也可以站在Node的角度上，通过在Node上添加<strong>污点</strong>属性，来决定是否允许Pod调度过来。</p><p>​    Node被设置上污点之后就和Pod之间存在了一种相斥的关系，进而拒绝Pod调度进来，甚至可以将已经存在的Pod驱逐出去。</p><p>污点的格式为：<code>key=value:effect</code>, key和value是污点的标签，effect描述污点的作用，支持如下三个选项：</p><ul><li>PreferNoSchedule：kubernetes将尽量避免把Pod调度到具有该污点的Node上，除非没有其他节点可调度</li><li>NoSchedule：kubernetes将不会把Pod调度到具有该污点的Node上，但不会影响当前Node上已存在的Pod</li><li>NoExecute：kubernetes将不会把Pod调度到具有该污点的Node上，同时也会将Node上已存在的Pod驱离</li></ul><img src="assets/image-20200605021831545.png" alt="image-20200605021606508" style="border:1px solid"><p>使用kubectl设置和去除污点的命令示例如下：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 设置污点</span>kubectl taint nodes node1 key=value:effect<span class="token comment"># 去除污点</span>kubectl taint nodes node1 key:effect<span class="token operator">-</span><span class="token comment"># 去除所有污点</span>kubectl taint nodes node1 key<span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，演示下污点的效果：</p><ol><li>准备节点node1（为了演示效果更加明显，暂时停止node2节点）</li><li>为node1节点设置一个污点: <code>tag=heima:PreferNoSchedule</code>；然后创建pod1( pod1 可以 )</li><li>修改为node1节点设置一个污点: <code>tag=heima:NoSchedule</code>；然后创建pod2( pod1 正常  pod2 失败 )</li><li>修改为node1节点设置一个污点: <code>tag=heima:NoExecute</code>；然后创建pod3 ( 3个pod都失败 )</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 为node1设置污点(PreferNoSchedule)</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl taint nodes node1 tag=oxyay:PreferNoSchedule</span><span class="token comment"># 创建pod1</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl run taint1 --image=nginx:1.17.1 -n dev</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME                      READY   STATUS    RESTARTS   AGE     IP           NODE   taint1<span class="token operator">-</span>766c47bf55<span class="token operator">-</span>9wfn5   1<span class="token operator">/</span>1     Running   0          2m24s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>59   node1    <span class="token comment"># 为node1设置污点(取消PreferNoSchedule，设置NoSchedule)</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl taint nodes node1 tag:PreferNoSchedule-</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl taint nodes node1 tag=oxyay:NoSchedule</span><span class="token comment"># 创建pod2</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl run taint2 --image=nginx:1.17.1 -n dev</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods taint2 -n dev -o wide</span>NAME                      READY   STATUS    RESTARTS   AGE     IP            NODEtaint1<span class="token operator">-</span>766c47bf55<span class="token operator">-</span>9wfn5   1<span class="token operator">/</span>1     Running   0          2m24s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>59   node1 taint2<span class="token operator">-</span>84946958cf<span class="token operator">-</span>dk98f    0<span class="token operator">/</span>1     Pending   0          21s     &lt;none&gt;        &lt;none&gt;   <span class="token comment"># 为node1设置污点(取消NoSchedule，设置NoExecute)</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl taint nodes node1 tag:NoSchedule-</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl taint nodes node1 tag=oxyay:NoExecute</span><span class="token comment"># 创建pod3</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl run taint3 --image=nginx:1.17.1 -n dev</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME                      READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED taint1<span class="token operator">-</span>7665f7fd85<span class="token operator">-</span>htkmp   0<span class="token operator">/</span>1     Pending   0          35s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;    taint2<span class="token operator">-</span>84946958cf<span class="token operator">-</span>dk98f    0<span class="token operator">/</span>1     Pending   0          35s   &lt;none&gt;   &lt;none&gt;   &lt;none&gt;     taint3<span class="token operator">-</span>57d45f9d4c<span class="token operator">-</span>5flwk   0<span class="token operator">/</span>1     Pending   0          6s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">小提示：    使用kubeadm搭建的集群，默认就会给master节点添加一个污点标记,所以pod就不会调度到master节点上.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>容忍（Toleration）</strong></p><p>​    上面介绍了污点的作用，我们可以在node上添加污点用于拒绝pod调度上来，但是如果就是想将一个pod调度到一个有污点的node上去，这时候应该怎么做呢？这就要使用到<strong>容忍</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220913232512914.png" alt="image-20220913232512914"></p><blockquote><p>污点就是拒绝，容忍就是忽略，Node通过污点拒绝pod调度上去，Pod通过容忍忽略拒绝</p></blockquote><p>下面先通过一个案例看下效果：</p><ol><li>上一小节，已经在node1节点上打上了<code>NoExecute</code>的污点，此时pod是调度不上去的</li><li>本小节，可以通过给pod添加容忍，然后将其调度上去</li></ol><p>创建pod-toleration.yaml,内容如下 </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>toleration  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1  <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token comment"># 添加容忍</span>  <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"tag"</span>        <span class="token comment"># 要容忍的污点的key</span>    <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Equal"</span> <span class="token comment"># 操作符</span>    <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"oxyay"</span>    <span class="token comment"># 容忍的污点的value</span>    <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token string">"NoExecute"</span>   <span class="token comment"># 添加容忍的规则，这里必须和标记的污点规则相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 添加容忍之前的pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME             READY   STATUS    RESTARTS   AGE   IP       NODE     NOMINATED pod<span class="token operator">-</span>toleration   0<span class="token operator">/</span>1     Pending   0          3s    &lt;none&gt;   &lt;none&gt;   &lt;none&gt;           <span class="token comment"># 添加容忍之后的pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME             READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATEDpod<span class="token operator">-</span>toleration   1<span class="token operator">/</span>1     Running   0          15s    10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>17   node1   &lt;none&gt;        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面看一下容忍的详细配置:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl explain pod.spec.tolerations</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>FIELDS:   key       <span class="token comment"># 对应着要容忍的污点的键，空意味着匹配所有的键</span>   value     <span class="token comment"># 对应着要容忍的污点的值</span>   operator  <span class="token comment"># key-value的运算符，支持Equal和Exists（默认）</span>   effect    <span class="token comment"># 对应污点的effect，空意味着匹配所有影响</span>   tolerationSeconds   <span class="token comment"># 容忍时间, 当effect为NoExecute时生效，表示pod在Node上的停留时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、kubernetesPod控制器</title>
      <link href="/2022/09/08/kubernetes/%E5%85%AD%E3%80%81kubernetesPod%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>/2022/09/08/kubernetes/%E5%85%AD%E3%80%81kubernetesPod%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Pod控制器介绍"><a href="#Pod控制器介绍" class="headerlink" title="Pod控制器介绍"></a>Pod控制器介绍</h2><p>Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类：</p><ul><li><p>自主式pod：kubernetes直接创建出来的Pod，这种pod删除后就没有了，也不会重建</p></li><li><p>控制器创建的pod：kubernetes通过控制器创建的pod，这种pod删除了之后还会自动重建       </p></li></ul><blockquote><p><strong><code>什么是Pod控制器</code></strong> </p><p>​    Pod控制器是管理pod的中间层，使用Pod控制器之后，只需要告诉Pod控制器，想要多少个什么样的Pod就可以了，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod资源在运行中出现故障，它会基于指定策略重新编排Pod。</p></blockquote><p>在kubernetes中，有很多类型的pod控制器，每种都有自己的适合的场景，常见的有下面这些：</p><ul><li><p>ReplicationController：比较原始的pod控制器，已经被废弃，由ReplicaSet替代</p></li><li><p>ReplicaSet：保证副本数量一直维持在期望值，并支持pod数量扩缩容，镜像版本升级</p></li><li><p>Deployment：通过控制ReplicaSet来控制Pod，并支持滚动升级、回退版本</p></li><li><p>Horizontal Pod Autoscaler：可以根据集群负载自动水平调整Pod的数量，实现削峰填谷</p></li><li><p>DaemonSet：在集群中的指定Node上运行且仅运行一个副本，一般用于守护进程类的任务</p></li><li><p>Job：它创建出来的pod只要完成任务就立即退出，不需要重启或重建，用于执行一次性任务</p></li><li><p>Cronjob：它创建的Pod负责周期性任务控制，不需要持续后台运行</p></li><li><p>StatefulSet：管理有状态应用</p></li></ul><h2 id="ReplicaSet-RS"><a href="#ReplicaSet-RS" class="headerlink" title="ReplicaSet(RS)"></a>ReplicaSet(RS)</h2><p>​    ReplicaSet的主要作用是<strong>保证一定数量的pod正常运行</strong>，它会持续监听这些Pod的运行状态，一旦Pod发生故障，就会重启或重建。同时它还支持对pod数量的扩缩容和镜像版本的升降级。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220915211728831.png" alt="image-20220915211728831"></p><p>ReplicaSet的资源清单文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1 <span class="token comment"># 版本号</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet <span class="token comment"># 类型       </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment"># 元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token comment"># rs名称 </span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token comment"># 所属命名空间 </span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment">#标签</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> rs<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 详情描述</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 副本数量</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 选择器，通过它指定该控制器管理哪些pod</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token comment"># Labels匹配规则</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># Expressions匹配规则</span>      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>nginx<span class="token punctuation">-</span>pod<span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里面，需要新了解的配置项就是<code>spec</code>下面几个选项：</p><ul><li><p>replicas：指定副本数量，其实就是当前rs创建出来的pod的数量，默认为1</p></li><li><p>selector：选择器，它的作用是建立pod控制器和pod之间的关联关系，采用的Label Selector机制</p><p>​               在pod模板上定义label，在控制器上定义选择器，就可以表明当前控制器能管理哪些pod了</p></li><li><p>template：模板，就是当前控制器创建pod所使用的模板板，里面其实就是前一章学过的pod的定义</p></li></ul><p><strong>创建ReplicaSet</strong></p><p>创建pc-replicaset.yaml文件，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet   <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>replicaset  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建rs</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pc-replicaset.yaml</span>replicaset<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>replicaset created<span class="token comment"># 查看rs</span><span class="token comment"># DESIRED:期望副本数量  </span><span class="token comment"># CURRENT:当前副本数量  </span><span class="token comment"># READY:已经准备好提供服务的副本数量</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs pc-replicaset -n dev -o wide</span>NAME          DESIRED   CURRENT READY AGE   CONTAINERS   IMAGES             SELECTORpc<span class="token operator">-</span>replicaset 3         3       3     22s   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1       app=nginx<span class="token operator">-</span>pod<span class="token comment"># 查看当前控制器创建出来的pod</span><span class="token comment"># 这里发现控制器创建出来的pod的名称是在控制器名称后面拼接了-xxxxx随机码</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod -n dev</span>NAME                          READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>6vmvt   1<span class="token operator">/</span>1     Running   0          54spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>fmb8f   1<span class="token operator">/</span>1     Running   0          54spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>snrk2   1<span class="token operator">/</span>1     Running   0          54s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>扩缩容</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 编辑rs的副本数量，修改spec:replicas: 6即可</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl edit rs pc-replicaset -n dev</span>replicaset<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>replicaset edited<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                          READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>6vmvt   1<span class="token operator">/</span>1     Running   0          114mpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>cftnp   1<span class="token operator">/</span>1     Running   0          10spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>fjlm6   1<span class="token operator">/</span>1     Running   0          10spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>fmb8f   1<span class="token operator">/</span>1     Running   0          114mpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>s2whj   1<span class="token operator">/</span>1     Running   0          10spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>snrk2   1<span class="token operator">/</span>1     Running   0          114m<span class="token comment"># 当然也可以直接使用命令实现</span><span class="token comment"># 使用scale命令实现扩缩容， 后面--replicas=n直接指定目标数量即可</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl scale rs pc-replicaset --replicas=2 -n dev</span>replicaset<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>replicaset scaled<span class="token comment"># 命令运行完毕，立即查看，发现已经有4个开始准备退出了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                       READY   STATUS        RESTARTS   AGEpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>6vmvt   0<span class="token operator">/</span>1     Terminating   0          118mpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>cftnp   0<span class="token operator">/</span>1     Terminating   0          4m17spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>fjlm6   0<span class="token operator">/</span>1     Terminating   0          4m17spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>fmb8f   1<span class="token operator">/</span>1     Running       0          118mpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>s2whj   0<span class="token operator">/</span>1     Terminating   0          4m17spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>snrk2   1<span class="token operator">/</span>1     Running       0          118m<span class="token comment">#稍等片刻，就只剩下2个了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                       READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>fmb8f   1<span class="token operator">/</span>1     Running   0          119mpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>snrk2   1<span class="token operator">/</span>1     Running   0          119m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>镜像升级</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 编辑rs的容器镜像 - image: nginx:1.17.2</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl edit rs pc-replicaset -n dev</span>replicaset<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>replicaset edited<span class="token comment"># 再次查看，发现镜像版本已经变更了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev -o wide</span>NAME                DESIRED  CURRENT   READY   AGE    CONTAINERS   IMAGES        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pc<span class="token operator">-</span>replicaset       2        2         2       140m   nginx         nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>2  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 同样的道理，也可以使用命令完成这个工作</span><span class="token comment"># kubectl set image rs rs名称 容器=镜像版本 -n namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl set image rs pc-replicaset nginx=nginx:1.17.1  -n dev</span>replicaset<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>replicaset image updated<span class="token comment"># 再次查看，发现镜像版本已经变更了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev -o wide</span>NAME                 DESIRED  CURRENT   READY   AGE    CONTAINERS   IMAGES            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>pc<span class="token operator">-</span>replicaset        2        2         2       145m   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除ReplicaSet</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 使用kubectl delete命令会删除此RS以及它管理的Pod</span><span class="token comment"># 在kubernetes删除RS前，会将RS的replicasclear调整为0，等待所有的Pod被删除后，在执行RS对象的删除</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete rs pc-replicaset -n dev</span>replicaset<span class="token punctuation">.</span>apps <span class="token string">"pc-replicaset"</span> deleted<span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod -n dev -o wide</span>No resources found in dev namespace<span class="token punctuation">.</span><span class="token comment"># 如果希望仅仅删除RS对象（保留Pod），可以使用kubectl delete命令时添加--cascade=false选项（不推荐）。</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete rs pc-replicaset -n dev --cascade=false</span>replicaset<span class="token punctuation">.</span>apps <span class="token string">"pc-replicaset"</span> deleted<span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                  READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>replicaset<span class="token operator">-</span>cl82j   1<span class="token operator">/</span>1     Running   0          75spc<span class="token operator">-</span>replicaset<span class="token operator">-</span>dslhb   1<span class="token operator">/</span>1     Running   0          75s<span class="token comment"># 也可以使用yaml直接删除(推荐)</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pc-replicaset.yaml</span>replicaset<span class="token punctuation">.</span>apps <span class="token string">"pc-replicaset"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Deployment-Deploy"><a href="#Deployment-Deploy" class="headerlink" title="Deployment(Deploy)"></a>Deployment(Deploy)</h2><p>​    为了更好的解决服务编排的问题，kubernetes在V1.2版本开始，引入了Deployment控制器。值得一提的是，这种控制器并不直接管理pod，而是通过管理ReplicaSet来简介管理Pod，即：Deployment管理ReplicaSet，ReplicaSet管理Pod。所以Deployment比ReplicaSet功能更加强大。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220915211836579.png" alt="image-20220915211836579"></p><p>Deployment主要功能有下面几个：</p><ul><li>支持ReplicaSet的所有功能</li><li>支持发布的停止、继续</li><li>支持滚动升级和回滚版本</li></ul><p>Deployment的资源清单文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1 <span class="token comment"># 版本号</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment <span class="token comment"># 类型       </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment"># 元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token comment"># rs名称 </span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token comment"># 所属命名空间 </span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment">#标签</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> deploy<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 详情描述</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 副本数量</span>  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 保留历史版本</span>  <span class="token key atrule">paused</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 暂停部署，默认是false</span>  <span class="token key atrule">progressDeadlineSeconds</span><span class="token punctuation">:</span> <span class="token number">600</span> <span class="token comment"># 部署超时时间（s），默认是600</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token comment"># 策略</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate <span class="token comment"># 滚动更新策略</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span> <span class="token comment"># 滚动更新</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 30% <span class="token comment"># 最大额外可以存在的副本数，可以为百分比，也可以为整数</span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 30% <span class="token comment"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 选择器，通过它指定该控制器管理哪些pod</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token comment"># Labels匹配规则</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># Expressions匹配规则</span>      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>nginx<span class="token punctuation">-</span>pod<span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建deployment</strong></p><p>创建pc-deployment.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>deployment  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建deployment</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pc-deployment.yaml --record=true</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment created<span class="token comment"># 查看deployment</span><span class="token comment"># UP-TO-DATE 最新版本的pod的数量</span><span class="token comment"># AVAILABLE  当前可用的pod的数量</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deploy pc-deployment -n dev</span>NAME            READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGEpc<span class="token operator">-</span>deployment   3<span class="token operator">/</span>3     3            3           15s<span class="token comment"># 查看rs</span><span class="token comment"># 发现rs的名称是在原来deployment的名字后面添加了一个10位数的随机串</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev</span>NAME                       DESIRED   CURRENT   READY   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78   3         3         3       23s<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                             READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>d2c8n   1<span class="token operator">/</span>1     Running   0          107spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>smpvp   1<span class="token operator">/</span>1     Running   0          107spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>wvjd8   1<span class="token operator">/</span>1     Running   0          107s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>扩缩容</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 变更副本数量为5个</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl scale deploy pc-deployment --replicas=5  -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment scaled<span class="token comment"># 查看deployment</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deploy pc-deployment -n dev</span>NAME            READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGEpc<span class="token operator">-</span>deployment   5<span class="token operator">/</span>5     5            5           2m<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl get pods -n dev</span>NAME                             READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>d2c8n   1<span class="token operator">/</span>1     Running   0          4m19spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>jxmdq   1<span class="token operator">/</span>1     Running   0          94spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>mktqv   1<span class="token operator">/</span>1     Running   0          93spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>smpvp   1<span class="token operator">/</span>1     Running   0          4m19spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>wvjd8   1<span class="token operator">/</span>1     Running   0          4m19s<span class="token comment"># 编辑deployment的副本数量，修改spec:replicas: 4即可</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl edit deploy pc-deployment -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment edited<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                             READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>d2c8n   1<span class="token operator">/</span>1     Running   0          5m23spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>jxmdq   1<span class="token operator">/</span>1     Running   0          2m38spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>smpvp   1<span class="token operator">/</span>1     Running   0          5m23spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78<span class="token operator">-</span>wvjd8   1<span class="token operator">/</span>1     Running   0          5m23s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>镜像更新</strong></p><p>deployment支持两种更新策略:<code>重建更新</code>和<code>滚动更新</code>,可以通过<code>strategy</code>指定策略类型,支持两个属性:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">strategy：指定新的Pod替换旧的Pod的策略， 支持两个属性：  type：指定策略类型，支持两种策略    Recreate：在创建出新的Pod之前会先杀掉所有已存在的Pod    RollingUpdate：滚动更新，就是杀死一部分，就启动一部分，在更新过程中，存在两个版本Pod  rollingUpdate：当type为RollingUpdate时生效，用于为RollingUpdate设置参数，支持两个属性：    maxUnavailable：用来指定在升级过程中不可用Pod的最大数量，默认为25%。    maxSurge： 用来指定在升级过程中可以超过期望的Pod的最大数量，默认为25%。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重建更新</p><ol><li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token comment"># 策略</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> Recreate <span class="token comment"># 重建更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建deploy进行验证</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 变更镜像</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl set image deployment pc-deployment nginx=nginx:1.17.2 -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment image updated<span class="token comment"># 观察升级过程</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl get pods -n dev -w</span>NAME                             READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>65qcw   1<span class="token operator">/</span>1     Running   0          31spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>w5nzv   1<span class="token operator">/</span>1     Running   0          31spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>xpt7w   1<span class="token operator">/</span>1     Running   0          31spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>xpt7w   1<span class="token operator">/</span>1     Terminating   0          41spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>65qcw   1<span class="token operator">/</span>1     Terminating   0          41spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>w5nzv   1<span class="token operator">/</span>1     Terminating   0          41spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>grn8z   0<span class="token operator">/</span>1     Pending       0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>hbl4v   0<span class="token operator">/</span>1     Pending       0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>67nz2   0<span class="token operator">/</span>1     Pending       0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>grn8z   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>hbl4v   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>67nz2   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>grn8z   1<span class="token operator">/</span>1     Running             0          1spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>67nz2   1<span class="token operator">/</span>1     Running             0          1spc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b<span class="token operator">-</span>hbl4v   1<span class="token operator">/</span>1     Running             0          2s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚动更新</p><ol><li>编辑pc-deployment.yaml,在spec节点下添加更新策略</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token comment"># 策略</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate <span class="token comment"># 滚动更新策略</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 25%       <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 25%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建deploy进行验证</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 变更镜像</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl set image deployment pc-deployment nginx=nginx:1.17.3 -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment image updated<span class="token comment"># 观察升级过程</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -w</span>NAME                           READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>8rbzt   1<span class="token operator">/</span>1     Running   0          31mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>h4p68   1<span class="token operator">/</span>1     Running   0          31mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>hlmz4   1<span class="token operator">/</span>1     Running   0          31mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>rrqcn   1<span class="token operator">/</span>1     Running   0          31mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>226rx   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>226rx   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>226rx   1<span class="token operator">/</span>1     Running             0          1spc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>h4p68    0<span class="token operator">/</span>1     Terminating         0          34mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>cnd44   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>cnd44   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>cnd44   1<span class="token operator">/</span>1     Running             0          2spc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>hlmz4    0<span class="token operator">/</span>1     Terminating         0          34mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>px48p   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>px48p   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>px48p   1<span class="token operator">/</span>1     Running             0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>8rbzt    0<span class="token operator">/</span>1     Terminating         0          34mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>dkmqp   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>dkmqp   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44<span class="token operator">-</span>dkmqp   1<span class="token operator">/</span>1     Running             0          2spc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767<span class="token operator">-</span>rrqcn    0<span class="token operator">/</span>1     Terminating         0          34m<span class="token comment"># 至此，新版本的pod创建完毕，就版本的pod销毁完毕</span><span class="token comment"># 中间过程是滚动进行的，也就是边销毁边创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚动更新的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220915211902596.png" alt="image-20220915211902596"></p><p>镜像更新中rs的变化:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看rs,发现原来的rs的依旧存在，只是pod数量变为了0，而后又新产生了一个rs，pod数量为4</span><span class="token comment"># 其实这就是deployment能够进行版本回退的奥妙所在，后面会详细解释</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev</span>NAME                       DESIRED   CURRENT   READY   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78   0         0         0       7m37spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b11   0         0         0       5m37spc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d76789   4         4         4       72s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>版本回退</strong></p><p>deployment支持版本升级过程中的暂停、继续功能以及版本回退等诸多功能，下面具体来看.</p><p>kubectl rollout： 版本升级相关功能，支持下面的选项：</p><ul><li><p>status       显示当前升级状态</p></li><li><p>history     显示 升级历史记录</p></li><li><p>pause       暂停版本升级过程</p></li><li><p>resume    继续已经暂停的版本升级过程</p></li><li><p>restart      重启版本升级过程</p></li><li><p>undo        回滚到上一级版本（可以使用–to-revision回滚到指定版本）</p></li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看当前升级版本的状态</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl rollout status deploy pc-deployment -n dev</span>deployment <span class="token string">"pc-deployment"</span> successfully rolled out<span class="token comment"># 查看升级历史记录</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl rollout history deploy pc-deployment -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deploymentREVISION  CHANGE<span class="token operator">-</span>CAUSE1         kubectl create <span class="token operator">--</span>filename=pc<span class="token operator">-</span>deployment<span class="token punctuation">.</span>yaml <span class="token operator">--</span>record=true2         kubectl create <span class="token operator">--</span>filename=pc<span class="token operator">-</span>deployment<span class="token punctuation">.</span>yaml <span class="token operator">--</span>record=true3         kubectl create <span class="token operator">--</span>filename=pc<span class="token operator">-</span>deployment<span class="token punctuation">.</span>yaml <span class="token operator">--</span>record=true<span class="token comment"># 可以发现有三次版本记录，说明完成过两次升级</span><span class="token comment"># 版本回滚</span><span class="token comment"># 这里直接使用--to-revision=1回滚到了1版本， 如果省略这个选项，就是回退到上个版本，就是2版本</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl rollout undo deployment pc-deployment --to-revision=1 -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment rolled back<span class="token comment"># 查看发现，通过nginx镜像版本可以发现到了第一版</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deploy -n dev -o wide</span>NAME            READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         pc<span class="token operator">-</span>deployment   4<span class="token operator">/</span>4     4            4           74m   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1   <span class="token comment"># 查看rs，发现第一个rs中有4个pod运行，后面两个版本的rs中pod为运行</span><span class="token comment"># 其实deployment之所以可是实现版本的回滚，就是通过记录下历史rs来实现的，</span><span class="token comment"># 一旦想回滚到哪个版本，只需要将当前版本pod数量降为0，然后将回滚版本的pod提升为目标数量就可以了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev</span>NAME                       DESIRED   CURRENT   READY   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6696798b78   4         4         4       78mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>966bf7f44    0         0         0       37mpc<span class="token operator">-</span>deployment<span class="token operator">-</span>c848d767     0         0         0       71m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>金丝雀发布</strong></p><p>​    Deployment控制器支持控制更新过程中的控制，如“暂停(pause)”或“继续(resume)”更新操作。</p><p>​    比如有一批新的Pod资源创建完成后立即暂停更新过程，此时，仅存在一部分新版本的应用，主体部分还是旧的版本。然后，再筛选一小部分的用户请求路由到新版本的Pod应用，继续观察能否稳定地按期望的方式运行。确定没问题之后再继续完成余下的Pod资源滚动更新，否则立即回滚更新操作。这就是所谓的金丝雀发布。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 更新deployment的版本，并配置暂停deployment</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl set image deploy pc-deployment nginx=nginx:1.17.4 -n dev &amp;&amp; kubectl rollout pause deployment pc-deployment  -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment image updateddeployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment paused<span class="token comment">#观察更新状态</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl rollout status deploy pc-deployment -n dev　</span>Waiting <span class="token keyword">for</span> deployment <span class="token string">"pc-deployment"</span> rollout to finish: 2 out of 4 new replicas have been updated<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 监控更新的过程，可以看到已经新增了一个资源，但是并未按照预期的状态去删除一个旧的资源，就是因为使用了pause暂停命令</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev -o wide</span>NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         pc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9   3         3         3       19m     nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1   pc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b   0         0         0       14m     nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>2   pc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb   2         2         2       3m16s   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4   <span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                             READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>rj8sq   1<span class="token operator">/</span>1     Running   0          7m33spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>ttwgg   1<span class="token operator">/</span>1     Running   0          7m35spc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9<span class="token operator">-</span>v4wvc   1<span class="token operator">/</span>1     Running   0          7m34spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb<span class="token operator">-</span>996rt   1<span class="token operator">/</span>1     Running   0          3m31spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb<span class="token operator">-</span>j2gtj   1<span class="token operator">/</span>1     Running   0          3m31s<span class="token comment"># 确保更新的pod没问题了，继续更新</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl rollout resume deploy pc-deployment -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>deployment resumed<span class="token comment"># 查看最后的更新情况</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get rs -n dev -o wide</span>NAME                       DESIRED   CURRENT   READY   AGE     CONTAINERS   IMAGES         pc<span class="token operator">-</span>deployment<span class="token operator">-</span>5d89bdfbf9   0         0         0       21m     nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1   pc<span class="token operator">-</span>deployment<span class="token operator">-</span>675d469f8b   0         0         0       16m     nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>2   pc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb   4         4         4       5m11s   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4   <span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                             READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb<span class="token operator">-</span>7bfwh   1<span class="token operator">/</span>1     Running   0          37spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb<span class="token operator">-</span>996rt   1<span class="token operator">/</span>1     Running   0          5m27spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb<span class="token operator">-</span>j2gtj   1<span class="token operator">/</span>1     Running   0          5m27spc<span class="token operator">-</span>deployment<span class="token operator">-</span>6c9f56fcfb<span class="token operator">-</span>rf84v   1<span class="token operator">/</span>1     Running   0          37s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除Deployment</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 删除deployment，其下的rs和pod也将被删除</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pc-deployment.yaml</span>deployment<span class="token punctuation">.</span>apps <span class="token string">"pc-deployment"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Horizontal-Pod-Autoscaler-HPA"><a href="#Horizontal-Pod-Autoscaler-HPA" class="headerlink" title="Horizontal Pod Autoscaler(HPA)"></a>Horizontal Pod Autoscaler(HPA)</h2><p>​    在前面的课程中，我们已经可以实现通过手工执行<code>kubectl scale</code>命令实现Pod扩容或缩容，但是这显然不符合Kubernetes的定位目标–自动化、智能化。 Kubernetes期望可以实现通过监测Pod的使用情况，实现pod数量的自动调整，于是就产生了Horizontal Pod Autoscaler（HPA）这种控制器。</p><p>​    HPA可以获取每个Pod利用率，然后和HPA中定义的指标进行对比，同时计算出需要伸缩的具体值，最后实现Pod的数量的调整。其实HPA与之前的Deployment一样，也属于一种Kubernetes资源对象，它通过追踪分析RC控制的所有目标Pod的负载变化情况，来确定是否需要针对性地调整目标Pod的副本数，这是HPA的实现原理。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220915211932036.png" alt="image-20220915211932036"></p><p>接下来，我们来做一个实验</p><p><strong>1 安装metrics-server</strong></p><p>metrics-server可以用来收集集群中的资源使用情况</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 安装git</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum install git -y</span><span class="token comment"># 获取metrics-server, 注意使用的版本</span><span class="token namespace">[root@master ~]</span><span class="token comment"># git clone -b v0.3.6 https://github.com/kubernetes-incubator/metrics-server</span><span class="token comment"># 修改deployment, 注意修改的是镜像和初始化参数</span><span class="token namespace">[root@master ~]</span><span class="token comment"># cd /root/metrics-server/deploy/1.8+/</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># vim metrics-server-deployment.yaml</span>按图中添加下面选项hostNetwork: trueimage: registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>google_containers<span class="token operator">/</span>metrics<span class="token operator">-</span>server<span class="token operator">-</span>amd64:v0<span class="token punctuation">.</span>3<span class="token punctuation">.</span>6args:<span class="token operator">-</span> <span class="token operator">--</span>kubelet<span class="token operator">-</span>insecure<span class="token operator">-</span>tls<span class="token operator">-</span> <span class="token operator">--</span>kubelet<span class="token operator">-</span>preferred<span class="token operator">-</span>address<span class="token operator">-</span>types=InternalIP<span class="token punctuation">,</span>Hostname<span class="token punctuation">,</span>InternalDNS<span class="token punctuation">,</span>ExternalDNS<span class="token punctuation">,</span>ExternalIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="assets/image-20200608163326496.png" alt="image-20200608163326496"></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 安装metrics-server</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl apply -f ./</span><span class="token comment"># 查看pod运行情况</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl get pod -n kube-system</span>metrics<span class="token operator">-</span>server<span class="token operator">-</span>6b976979db<span class="token operator">-</span>2xwbj   1<span class="token operator">/</span>1     Running   0          90s<span class="token comment"># 使用kubectl top node 查看资源使用情况</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl top node</span>NAME     CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   CPU<span class="token operator">%</span>   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>   MEMORY<span class="token operator">%</span>master   98m          4<span class="token operator">%</span>     1067Mi          62<span class="token operator">%</span>node1    27m          1<span class="token operator">%</span>     727Mi           42<span class="token operator">%</span>node2    34m          1<span class="token operator">%</span>     800Mi           46<span class="token operator">%</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl top pod -n kube-system</span>NAME                              CPU<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>   MEMORY<span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>coredns<span class="token operator">-</span>6955765f44<span class="token operator">-</span>7ptsb          3m           9Micoredns<span class="token operator">-</span>6955765f44<span class="token operator">-</span>vcwr5          3m           8Mietcd<span class="token operator">-</span>master                       14m          145Mi<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 至此,metrics-server安装完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2 准备deployment和servie</strong></p><p>为了操作简单,直接使用命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建deployment </span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl run nginx --image=nginx:latest --requests=cpu=100m -n dev</span><span class="token comment"># 创建service</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl expose deployment nginx --type=NodePort --port=80 -n dev</span><span class="token comment"># 查看</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl get deployment,pod,svc -n dev</span>NAME                    READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGEdeployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>nginx   1<span class="token operator">/</span>1     1            1           96sNAME                         READY   STATUS    RESTARTS   AGEpod<span class="token operator">/</span>nginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>pq8tb   1<span class="token operator">/</span>1     Running   0          96sNAME            <span class="token function">TYPE</span>       CLUSTER<span class="token operator">-</span>IP     EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGEservice<span class="token operator">/</span>nginx   NodePort   10<span class="token punctuation">.</span>96<span class="token punctuation">.</span>87<span class="token punctuation">.</span>135   &lt;none&gt;        80:31986<span class="token operator">/</span>TCP   9s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3 部署HPA</strong></p><p>创建pc-hpa.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> autoscaling/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> HorizontalPodAutoscaler<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>hpa  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">minReplicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token comment">#最小pod数量</span>  <span class="token key atrule">maxReplicas</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#最大pod数量</span>  <span class="token key atrule">targetCPUUtilizationPercentage</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># CPU使用率指标</span>  <span class="token key atrule">scaleTargetRef</span><span class="token punctuation">:</span>   <span class="token comment"># 指定要控制的nginx信息</span>    <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1    <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment      <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建hpa</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl create -f pc-hpa.yaml</span>horizontalpodautoscaler<span class="token punctuation">.</span>autoscaling<span class="token operator">/</span>pc<span class="token operator">-</span>hpa created<span class="token comment"># 查看hpa</span><span class="token namespace">[root@master 1.8+]</span><span class="token comment"># kubectl get hpa -n dev</span>NAME     REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGEpc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   0%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        1          62s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4 测试</strong></p><p>使用压测工具对service地址<code>192.168.108.100:31986</code>进行压测，然后通过控制台查看hpa和pod的变化</p><p><code>hpa变化</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get hpa -n dev -w</span>NAME     REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGEpc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   0%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        1          4m11spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   0%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        1          5m19spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   22%<span class="token operator">/</span>3<span class="token operator">%</span>    1         10        1          6m50spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   22%<span class="token operator">/</span>3<span class="token operator">%</span>    1         10        4          7m5spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   22%<span class="token operator">/</span>3<span class="token operator">%</span>    1         10        8          7m21spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   6%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        8          7m51spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   0%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        8          9m6spc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   0%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        8          13mpc<span class="token operator">-</span>hpa   Deployment<span class="token operator">/</span>nginx   0%<span class="token operator">/</span>3<span class="token operator">%</span>     1         10        1          14m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>deployment变化</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deployment -n dev -w</span>NAME    READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGEnginx   1<span class="token operator">/</span>1     1            1           11mnginx   1<span class="token operator">/</span>4     1            1           13mnginx   1<span class="token operator">/</span>4     1            1           13mnginx   1<span class="token operator">/</span>4     1            1           13mnginx   1<span class="token operator">/</span>4     4            1           13mnginx   1<span class="token operator">/</span>8     4            1           14mnginx   1<span class="token operator">/</span>8     4            1           14mnginx   1<span class="token operator">/</span>8     4            1           14mnginx   1<span class="token operator">/</span>8     8            1           14mnginx   2<span class="token operator">/</span>8     8            2           14mnginx   3<span class="token operator">/</span>8     8            3           14mnginx   4<span class="token operator">/</span>8     8            4           14mnginx   5<span class="token operator">/</span>8     8            5           14mnginx   6<span class="token operator">/</span>8     8            6           14mnginx   7<span class="token operator">/</span>8     8            7           14mnginx   8<span class="token operator">/</span>8     8            8           15mnginx   8<span class="token operator">/</span>1     8            8           20mnginx   8<span class="token operator">/</span>1     8            8           20mnginx   1<span class="token operator">/</span>1     1            1           20m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pod变化</code></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -w</span>NAME                     READY   STATUS    RESTARTS   AGEnginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>bh8dr   1<span class="token operator">/</span>1     Running   0          11mnginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>cpgrv   0<span class="token operator">/</span>1     Pending   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>8zhwk   0<span class="token operator">/</span>1     Pending   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>rr9bn   0<span class="token operator">/</span>1     Pending   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>cpgrv   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>8zhwk   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>rr9bn   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>m9gsj   0<span class="token operator">/</span>1     Pending             0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>g56qb   0<span class="token operator">/</span>1     Pending             0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>sl9c6   0<span class="token operator">/</span>1     Pending             0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>fgst7   0<span class="token operator">/</span>1     Pending             0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>g56qb   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>m9gsj   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>sl9c6   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>fgst7   0<span class="token operator">/</span>1     ContainerCreating   0          0snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>8zhwk   1<span class="token operator">/</span>1     Running             0          19snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>rr9bn   1<span class="token operator">/</span>1     Running             0          30snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>m9gsj   1<span class="token operator">/</span>1     Running             0          21snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>cpgrv   1<span class="token operator">/</span>1     Running             0          47snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>sl9c6   1<span class="token operator">/</span>1     Running             0          33snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>g56qb   1<span class="token operator">/</span>1     Running             0          48snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>fgst7   1<span class="token operator">/</span>1     Running             0          66snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>fgst7   1<span class="token operator">/</span>1     Terminating         0          6m50snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>8zhwk   1<span class="token operator">/</span>1     Terminating         0          7m5snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>cpgrv   1<span class="token operator">/</span>1     Terminating         0          7m5snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>g56qb   1<span class="token operator">/</span>1     Terminating         0          6m50snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>rr9bn   1<span class="token operator">/</span>1     Terminating         0          7m5snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>m9gsj   1<span class="token operator">/</span>1     Terminating         0          6m50snginx<span class="token operator">-</span>7df9756ccc<span class="token operator">-</span>sl9c6   1<span class="token operator">/</span>1     Terminating         0          6m50s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DaemonSet-DS"><a href="#DaemonSet-DS" class="headerlink" title="DaemonSet(DS)"></a>DaemonSet(DS)</h2><p>​    DaemonSet类型的控制器可以保证在集群中的每一台（或指定）节点上都运行一个副本。一般适用于日志收集、节点监控等场景。也就是说，如果一个Pod提供的功能是节点级别的（每个节点都需要且只需要一个），那么这类Pod就适合使用DaemonSet类型的控制器创建。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220915221355234.png" alt="image-20220915221355234"></p><p>DaemonSet控制器的特点：</p><ul><li>每当向集群中添加一个节点时，指定的 Pod 副本也将添加到该节点上</li><li>当节点从集群中移除时，Pod 也就被垃圾回收了</li></ul><p>下面先来看下DaemonSet的资源清单文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1 <span class="token comment"># 版本号</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet <span class="token comment"># 类型       </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment"># 元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token comment"># rs名称 </span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token comment"># 所属命名空间 </span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment">#标签</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> daemonset<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 详情描述</span>  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 保留历史版本</span>  <span class="token key atrule">updateStrategy</span><span class="token punctuation">:</span> <span class="token comment"># 更新策略</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate <span class="token comment"># 滚动更新策略</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span> <span class="token comment"># 滚动更新</span>      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 最大不可用状态的 Pod 的最大值，可以为百分比，也可以为整数</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 选择器，通过它指定该控制器管理哪些pod</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token comment"># Labels匹配规则</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># Expressions匹配规则</span>      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>nginx<span class="token punctuation">-</span>pod<span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建pc-daemonset.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>daemonset  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建daemonset</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f  pc-daemonset.yaml</span>daemonset<span class="token punctuation">.</span>apps<span class="token operator">/</span>pc<span class="token operator">-</span>daemonset created<span class="token comment"># 查看daemonset</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl get ds -n dev -o wide</span>NAME        DESIRED  CURRENT  READY  UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE  AVAILABLE   AGE   CONTAINERS   IMAGES         pc<span class="token operator">-</span>daemonset   2        2        2      2           2        24s   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1   <span class="token comment"># 查看pod,发现在每个Node上都运行一个pod</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl get pods -n dev -o wide</span>NAME                 READY   STATUS    RESTARTS   AGE   IP            NODE    pc<span class="token operator">-</span>daemonset<span class="token operator">-</span>9bck8   1<span class="token operator">/</span>1     Running   0          37s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>43   node1     pc<span class="token operator">-</span>daemonset<span class="token operator">-</span>k224w   1<span class="token operator">/</span>1     Running   0          37s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>2<span class="token punctuation">.</span>74   node2      <span class="token comment"># 删除daemonset</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pc-daemonset.yaml</span>daemonset<span class="token punctuation">.</span>apps <span class="token string">"pc-daemonset"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h2><p>Job，主要用于负责**批量处理(一次要处理指定数量任务)<strong>短暂的</strong>一次性(每个任务仅运行一次就结束)**任务。Job特点如下：</p><ul><li>当Job创建的pod执行成功结束时，Job将记录成功结束的pod数量</li><li>当成功结束的pod达到指定的数量时，Job将完成执行</li></ul><img src="assets/image-20200618213054113.png" style="zoom:80%;"><p>Job的资源清单文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1 <span class="token comment"># 版本号</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Job <span class="token comment"># 类型       </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment"># 元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token comment"># rs名称 </span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token comment"># 所属命名空间 </span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment">#标签</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> job<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 详情描述</span>  <span class="token key atrule">completions</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 指定job需要成功运行Pods的次数。默认值: 1</span>  <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 指定job在任一时刻应该并发运行Pods的数量。默认值: 1</span>  <span class="token key atrule">activeDeadlineSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 指定job可运行的时间期限，超过时间还未结束，系统将会尝试进行终止。</span>  <span class="token key atrule">backoffLimit</span><span class="token punctuation">:</span> <span class="token number">6</span> <span class="token comment"># 指定job失败后进行重试的次数。默认是6</span>  <span class="token key atrule">manualSelector</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否可以使用selector选择器选择pod，默认是false</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token comment"># 选择器，通过它指定该控制器管理哪些pod</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token comment"># Labels匹配规则</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> counter<span class="token punctuation">-</span>pod    <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> <span class="token comment"># Expressions匹配规则</span>      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>counter<span class="token punctuation">-</span>pod<span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token comment"># 模板，当副本数量不足时，会根据下面的模板创建pod副本</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> counter<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never <span class="token comment"># 重启策略只能设置为Never或者OnFailure</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> counter        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 2;done"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">关于重启策略设置的说明：    如果指定为OnFailure，则job会在pod出现故障时重启容器，而不是创建pod，failed次数不变    如果指定为Never，则job会在pod出现故障时创建新的pod，并且故障pod不会消失，也不会重启，failed次数加1    如果指定为Always的话，就意味着一直重启，意味着job任务会重复去执行了，当然不对，所以不能设置为Always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建pc-job.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Job      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>job  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">manualSelector</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> counter<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> counter<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> counter        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建job</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pc-job.yaml</span>job<span class="token punctuation">.</span>batch<span class="token operator">/</span>pc<span class="token operator">-</span>job created<span class="token comment"># 查看job</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get job -n dev -o wide  -w</span>NAME     COMPLETIONS   DURATION   AGE   CONTAINERS   IMAGES         SELECTORpc<span class="token operator">-</span>job   0<span class="token operator">/</span>1           21s        21s   counter      busybox:1<span class="token punctuation">.</span>30   app=counter<span class="token operator">-</span>podpc<span class="token operator">-</span>job   1<span class="token operator">/</span>1           31s        79s   counter      busybox:1<span class="token punctuation">.</span>30   app=counter<span class="token operator">-</span>pod<span class="token comment"># 通过观察pod状态可以看到，pod在运行完毕任务后，就会变成Completed状态</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -w</span>NAME           READY   STATUS     RESTARTS      AGEpc<span class="token operator">-</span>job<span class="token operator">-</span>rxg96   1<span class="token operator">/</span>1     Running     0            29spc<span class="token operator">-</span>job<span class="token operator">-</span>rxg96   0<span class="token operator">/</span>1     Completed   0            33s<span class="token comment"># 接下来，调整下pod运行的总数量和并行数量 即：在spec下设置下面两个选项</span><span class="token comment">#  completions: 6 # 指定job需要成功运行Pods的次数为6</span><span class="token comment">#  parallelism: 3 # 指定job并发运行Pods的数量为3</span><span class="token comment">#  然后重新运行job，观察效果，此时会发现，job会每次运行3个pod，总共执行了6个pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -w</span>NAME           READY   STATUS    RESTARTS   AGEpc<span class="token operator">-</span>job<span class="token operator">-</span>684ft   1<span class="token operator">/</span>1     Running   0          5spc<span class="token operator">-</span>job<span class="token operator">-</span>jhj49   1<span class="token operator">/</span>1     Running   0          5spc<span class="token operator">-</span>job<span class="token operator">-</span>pfcvh   1<span class="token operator">/</span>1     Running   0          5spc<span class="token operator">-</span>job<span class="token operator">-</span>684ft   0<span class="token operator">/</span>1     Completed   0          11spc<span class="token operator">-</span>job<span class="token operator">-</span>v7rhr   0<span class="token operator">/</span>1     Pending     0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>v7rhr   0<span class="token operator">/</span>1     Pending     0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>v7rhr   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>jhj49   0<span class="token operator">/</span>1     Completed           0          11spc<span class="token operator">-</span>job<span class="token operator">-</span>fhwf7   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>fhwf7   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>pfcvh   0<span class="token operator">/</span>1     Completed           0          11spc<span class="token operator">-</span>job<span class="token operator">-</span>5vg2j   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>fhwf7   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>5vg2j   0<span class="token operator">/</span>1     Pending             0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>5vg2j   0<span class="token operator">/</span>1     ContainerCreating   0          0spc<span class="token operator">-</span>job<span class="token operator">-</span>fhwf7   1<span class="token operator">/</span>1     Running             0          2spc<span class="token operator">-</span>job<span class="token operator">-</span>v7rhr   1<span class="token operator">/</span>1     Running             0          2spc<span class="token operator">-</span>job<span class="token operator">-</span>5vg2j   1<span class="token operator">/</span>1     Running             0          3spc<span class="token operator">-</span>job<span class="token operator">-</span>fhwf7   0<span class="token operator">/</span>1     Completed           0          12spc<span class="token operator">-</span>job<span class="token operator">-</span>v7rhr   0<span class="token operator">/</span>1     Completed           0          12spc<span class="token operator">-</span>job<span class="token operator">-</span>5vg2j   0<span class="token operator">/</span>1     Completed           0          12s<span class="token comment"># 删除job</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f pc-job.yaml</span>job<span class="token punctuation">.</span>batch <span class="token string">"pc-job"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CronJob-CJ"><a href="#CronJob-CJ" class="headerlink" title="CronJob(CJ)"></a>CronJob(CJ)</h2><p>​    CronJob控制器以Job控制器资源为其管控对象，并借助它管理pod资源对象，Job控制器定义的作业任务在其控制器资源创建之后便会立即执行，但CronJob可以以类似于Linux操作系统的周期性任务作业计划的方式控制其运行<strong>时间点</strong>及<strong>重复运行</strong>的方式。也就是说，<strong>CronJob可以在特定的时间点(反复的)去运行job任务</strong>。</p><img src="assets/image-20200618213149531.png" style="zoom:80%;"><p>CronJob的资源清单文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1beta1 <span class="token comment"># 版本号</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> CronJob <span class="token comment"># 类型       </span><span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token comment"># 元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token comment"># rs名称 </span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> <span class="token comment"># 所属命名空间 </span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token comment">#标签</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> cronjob<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token comment"># 详情描述</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span> <span class="token comment"># cron格式的作业调度运行时间点,用于控制任务在什么时间执行</span>  <span class="token key atrule">concurrencyPolicy</span><span class="token punctuation">:</span> <span class="token comment"># 并发执行策略，用于定义前一次作业运行尚未完成时是否以及如何运行后一次的作业</span>  <span class="token key atrule">failedJobHistoryLimit</span><span class="token punctuation">:</span> <span class="token comment"># 为失败的任务执行保留的历史记录数，默认为1</span>  <span class="token key atrule">successfulJobHistoryLimit</span><span class="token punctuation">:</span> <span class="token comment"># 为成功的任务执行保留的历史记录数，默认为3</span>  <span class="token key atrule">startingDeadlineSeconds</span><span class="token punctuation">:</span> <span class="token comment"># 启动作业错误的超时时长</span>  <span class="token key atrule">jobTemplate</span><span class="token punctuation">:</span> <span class="token comment"># job控制器模板，用于为cronjob控制器生成job对象;下面其实就是job的定义</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">completions</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">1</span>      <span class="token key atrule">activeDeadlineSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>      <span class="token key atrule">backoffLimit</span><span class="token punctuation">:</span> <span class="token number">6</span>      <span class="token key atrule">manualSelector</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">selector</span><span class="token punctuation">:</span>        <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>          <span class="token key atrule">app</span><span class="token punctuation">:</span> counter<span class="token punctuation">-</span>pod        <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span> 规则          <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> app<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>counter<span class="token punctuation">-</span>pod<span class="token punctuation">]</span><span class="token punctuation">}</span>      <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">metadata</span><span class="token punctuation">:</span>          <span class="token key atrule">labels</span><span class="token punctuation">:</span>            <span class="token key atrule">app</span><span class="token punctuation">:</span> counter<span class="token punctuation">-</span>pod        <span class="token key atrule">spec</span><span class="token punctuation">:</span>          <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never           <span class="token key atrule">containers</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> counter            <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 20;done"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">需要重点解释的几个选项：schedule: cron表达式，用于指定任务的执行时间<span class="token italic"><span class="token punctuation">*</span><span class="token content">/1    </span><span class="token punctuation">*</span></span>      <span class="token italic"><span class="token punctuation">*</span><span class="token content">    </span><span class="token punctuation">*</span></span>     *<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>分钟</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>小时</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>日</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>月份</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>星期</span><span class="token punctuation">&gt;</span></span><span class="token code keyword">    分钟 值从 0 到 59.    小时 值从 0 到 23.    日 值从 1 到 31.    月 值从 1 到 12.    星期 值从 0 到 6, 0 代表星期日    多个时间可以用逗号隔开； 范围可以用连字符给出；*可以作为通配符； /表示每...</span>concurrencyPolicy:Allow:   允许Jobs并发运行(默认)Forbid:  禁止并发运行，如果上一次运行尚未完成，则跳过下一次运行Replace: 替换，取消当前正在运行的作业并用新作业替换它<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建pc-cronjob.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> CronJob<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pc<span class="token punctuation">-</span>cronjob  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">controller</span><span class="token punctuation">:</span> cronjob<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span> <span class="token string">"*/1 * * * *"</span>  <span class="token key atrule">jobTemplate</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">template</span><span class="token punctuation">:</span>        <span class="token key atrule">spec</span><span class="token punctuation">:</span>          <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never          <span class="token key atrule">containers</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> counter            <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.30</span>            <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"for i in 9 8 7 6 5 4 3 2 1; do echo $i;sleep 3;done"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建cronjob</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f pc-cronjob.yaml</span>cronjob<span class="token punctuation">.</span>batch<span class="token operator">/</span>pc<span class="token operator">-</span>cronjob created<span class="token comment"># 查看cronjob</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get cronjobs -n dev</span>NAME         SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGEpc<span class="token operator">-</span>cronjob   <span class="token operator">*</span><span class="token operator">/</span>1 <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>   False     0        &lt;none&gt;          6s<span class="token comment"># 查看job</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get jobs -n dev</span>NAME                    COMPLETIONS   DURATION   AGEpc<span class="token operator">-</span>cronjob<span class="token operator">-</span>1592587800   1<span class="token operator">/</span>1           28s        3m26spc<span class="token operator">-</span>cronjob<span class="token operator">-</span>1592587860   1<span class="token operator">/</span>1           28s        2m26spc<span class="token operator">-</span>cronjob<span class="token operator">-</span>1592587920   1<span class="token operator">/</span>1           28s        86s<span class="token comment"># 查看pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>pc<span class="token operator">-</span>cronjob<span class="token operator">-</span>1592587800<span class="token operator">-</span>x4tsm   0<span class="token operator">/</span>1     Completed   0          2m24spc<span class="token operator">-</span>cronjob<span class="token operator">-</span>1592587860<span class="token operator">-</span>r5gv4   0<span class="token operator">/</span>1     Completed   0          84spc<span class="token operator">-</span>cronjob<span class="token operator">-</span>1592587920<span class="token operator">-</span>9dxxq   1<span class="token operator">/</span>1     Running     0          24s<span class="token comment"># 删除cronjob</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl  delete -f pc-cronjob.yaml</span>cronjob<span class="token punctuation">.</span>batch <span class="token string">"pc-cronjob"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、kubernetes实战入门</title>
      <link href="/2022/09/08/kubernetes/%E5%9B%9B%E3%80%81kubernetes%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/08/kubernetes/%E5%9B%9B%E3%80%81kubernetes%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p>​    Namespace是kubernetes系统中的一种非常重要资源，它的主要作用是用来实现<strong>多套环境的资源隔离</strong>或者<strong>多租户的资源隔离</strong>。</p><p>​    默认情况下，kubernetes集群中的所有的Pod都是可以相互访问的。但是在实际中，可能不想让两个Pod之间进行互相的访问，那此时就可以将两个Pod划分到不同的namespace下。kubernetes通过将集群内部的资源分配到不同的Namespace中，可以形成逻辑上的”组”，以方便不同的组的资源进行隔离使用和管理。</p><p>​    可以通过kubernetes的授权机制，将不同的namespace交给不同租户进行管理，这样就实现了多租户的资源隔离。此时还能结合kubernetes的资源配额机制，限定不同租户能占用的资源，例如CPU使用量、内存使用量等等，来实现租户可用资源的管理。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908145839178.png" alt="image-20220908145839178"></p><p>kubernetes在集群启动之后，会默认创建几个namespace</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl  get namespace</span>NAME              STATUS   AGEdefault           Active   40h     <span class="token comment">#  所有未指定Namespace的对象都会被分配在default命名空间</span>kube<span class="token operator">-</span>node<span class="token operator">-</span>lease   Active   40h     <span class="token comment">#  集群节点之间的心跳维护，v1.13开始引入</span>kube<span class="token operator">-</span>public       Active   40h     <span class="token comment">#  此命名空间下的资源可以被所有人访问（包括未认证用户）</span>kube<span class="token operator">-</span>system       Active   40h     <span class="token comment">#  所有由Kubernetes系统创建的资源都处于这个命名空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来看namespace资源的具体操作：</p><p><strong>查看</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 1 查看所有的ns  命令：kubectl get ns</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get ns</span>NAME              STATUS   AGEdefault           Active   40hkube<span class="token operator">-</span>node<span class="token operator">-</span>lease   Active   40hkube<span class="token operator">-</span>public       Active   40h     kube<span class="token operator">-</span>system       Active   40h     <span class="token comment"># 2 查看指定的ns   命令：kubectl get ns ns名称</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get ns default</span>NAME      STATUS   AGEdefault   Active   40h<span class="token comment"># 3 指定输出格式  命令：kubectl get ns ns名称  -o 格式参数</span><span class="token comment"># kubernetes支持的格式有很多，比较常见的是wide、json、yaml</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get ns default -o yaml</span>apiVersion: v1kind: Namespacemetadata:  creationTimestamp: <span class="token string">"2022-09-06T14:39:15Z"</span>  name: default  resourceVersion: <span class="token string">"146"</span>  selfLink: <span class="token operator">/</span>api<span class="token operator">/</span>v1<span class="token operator">/</span>namespaces<span class="token operator">/</span>default  uid: 075c0949<span class="token operator">-</span>2de5<span class="token operator">-</span>499c<span class="token operator">-</span>9070<span class="token operator">-</span>78a4641ee5b9spec:  finalizers:  <span class="token operator">-</span> kubernetesstatus:  phase: Active  <span class="token comment"># 4 查看ns详情  命令：kubectl describe ns ns名称</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe ns default</span>Name:         defaultLabels:       &lt;none&gt;Annotations:  &lt;none&gt;Status:       Active  <span class="token comment"># Active 命名空间正在使用中  Terminating 正在删除命名空间</span><span class="token comment"># ResourceQuota 针对namespace做的资源限制</span><span class="token comment"># LimitRange针对namespace中的每个组件做的资源限制</span>No resource quota<span class="token punctuation">.</span>No LimitRange resource<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create ns dev</span>namespace<span class="token operator">/</span>dev created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>删除</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 删除namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete ns dev</span>namespace <span class="token string">"dev"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>配置方式</strong></p><p>首先准备一个yaml文件：ns-dev.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以执行对应的创建和删除命令了：</p><p>​    创建：kubectl  create  -f  ns-dev.yaml</p><p>​    删除：kubectl  delete  -f  ns-dev.yaml</p><h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>Pod是kubernetes集群进行管理的最小单元，程序要运行必须部署在容器中，而容器必须存在于Pod中。</p><p>Pod可以认为是容器的封装，一个Pod中可以存在一个或者多个容器。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908151132524.png" alt="image-20220908151132524"></p><p>kubernetes在集群启动之后，集群中的各个组件也都是以Pod方式运行的。可以通过下面命令查看：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod -n kube-system</span>NAME                             READY   STATUS    RESTARTS   AGEcoredns<span class="token operator">-</span>6955765f44<span class="token operator">-</span>4s966         1<span class="token operator">/</span>1     Running   1          40hcoredns<span class="token operator">-</span>6955765f44<span class="token operator">-</span>6mprw         1<span class="token operator">/</span>1     Running   1          40hetcd<span class="token operator">-</span>master                      1<span class="token operator">/</span>1     Running   1          40hkube<span class="token operator">-</span>apiserver<span class="token operator">-</span>master            1<span class="token operator">/</span>1     Running   1          40hkube<span class="token operator">-</span>controller<span class="token operator">-</span>manager<span class="token operator">-</span>master   1<span class="token operator">/</span>1     Running   1          40hkube<span class="token operator">-</span>proxy<span class="token operator">-</span>pjkrm                 1<span class="token operator">/</span>1     Running   1          40hkube<span class="token operator">-</span>proxy<span class="token operator">-</span>qgprg                 1<span class="token operator">/</span>1     Running   1          40hkube<span class="token operator">-</span>proxy<span class="token operator">-</span>z2hht                 1<span class="token operator">/</span>1     Running   1          40hkube<span class="token operator">-</span>scheduler<span class="token operator">-</span>master            1<span class="token operator">/</span>1     Running   1          40h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建并运行</strong></p><p>kubernetes没有提供单独运行Pod的命令，都是通过Pod控制器来实现的</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 命令格式： kubectl run (pod控制器名称) [参数] </span><span class="token comment"># --image  指定Pod的镜像</span><span class="token comment"># --port   指定端口</span><span class="token comment"># --namespace  指定namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl run nginx --image=nginx:1.17.1 --port=80 --namespace dev </span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>nginx created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看pod信息</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看Pod基本信息</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                     READY   STATUS    RESTARTS   AGEnginx<span class="token operator">-</span>5ff7956ff6<span class="token operator">-</span>fg2db   1<span class="token operator">/</span>1     Running   0          43s<span class="token comment"># 查看Pod的详细信息</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe pod nginx-5ff7956ff6-fg2db -n dev</span>Name:         nginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>pwdnhNamespace:    devPriority:     0Node:         node2<span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>102<span class="token function">Start</span> Time:   Thu<span class="token punctuation">,</span> 08 Sep 2022 15:18:39 <span class="token operator">+</span>0800Labels:       pod<span class="token operator">-</span>template<span class="token operator">-</span>hash=64777cd554              run=nginxAnnotations:  &lt;none&gt;Status:       RunningIP:           10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>6IPs:  IP:           10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>6Controlled By:  ReplicaSet<span class="token operator">/</span>nginx<span class="token operator">-</span>64777cd554Containers:  nginx:    Container ID:   docker:<span class="token operator">/</span><span class="token operator">/</span>f93a854ffe1ddc06bf539c63598a88b1ede4e94c1f766b254ef57070694c1002    Image:          nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1    Image ID:       docker<span class="token operator">-</span>pullable:<span class="token operator">/</span><span class="token operator">/</span>nginx@sha256:b4b9b3eee194703fc2fa8afa5b7510c77ae70cfba567af1376a573a967c03dbb    Port:           80<span class="token operator">/</span>TCP    Host Port:      0<span class="token operator">/</span>TCP    State:          Running      Started:      Thu<span class="token punctuation">,</span> 08 Sep 2022 15:18:40 <span class="token operator">+</span>0800    Ready:          True    Restart Count:  0    Environment:    &lt;none&gt;    Mounts:      <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>secrets<span class="token operator">/</span>kubernetes<span class="token punctuation">.</span>io<span class="token operator">/</span>serviceaccount <span class="token keyword">from</span> default<span class="token operator">-</span>token<span class="token operator">-</span>dt22k <span class="token punctuation">(</span>ro<span class="token punctuation">)</span>Conditions:  <span class="token function">Type</span>              Status  Initialized       True   Ready             True   ContainersReady   True   PodScheduled      True Volumes:  default<span class="token operator">-</span>token<span class="token operator">-</span>dt22k:    <span class="token function">Type</span>:        Secret <span class="token punctuation">(</span>a volume populated by a Secret<span class="token punctuation">)</span>    SecretName:  default<span class="token operator">-</span>token<span class="token operator">-</span>dt22k    Optional:    falseQoS <span class="token keyword">Class</span>:       BestEffortNode<span class="token operator">-</span>Selectors:  &lt;none&gt;Tolerations:     node<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>io<span class="token operator">/</span>not<span class="token operator">-</span>ready:NoExecute <span class="token keyword">for</span> 300s                 node<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>io<span class="token operator">/</span>unreachable:NoExecute <span class="token keyword">for</span> 300sEvents:  <span class="token function">Type</span>    Reason     Age        <span class="token keyword">From</span>               Message  <span class="token operator">--</span>-<span class="token operator">-</span>    <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>     <span class="token operator">--</span>-<span class="token operator">-</span>       <span class="token operator">--</span>-<span class="token operator">-</span>               <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>  Normal  Scheduled  &lt;unknown&gt;  default<span class="token operator">-</span>scheduler  Successfully assigned dev<span class="token operator">/</span>nginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>pwdnh to node2  Normal  Pulled     68s        kubelet<span class="token punctuation">,</span> node2     Container image <span class="token string">"nginx:1.17.1"</span> already present on machine  Normal  Created    68s        kubelet<span class="token punctuation">,</span> node2     Created container nginx  Normal  Started    67s        kubelet<span class="token punctuation">,</span> node2     Started container nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>访问Pod</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 获取podIP</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev -o wide</span>NAME                     READY   STATUS    RESTARTS   AGE     IP           NODE    NOMINATED NODE   READINESS GATESnginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>pwdnh   1<span class="token operator">/</span>1     Running   0          2m37s   10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>1<span class="token punctuation">.</span>6   node2   &lt;none&gt;           &lt;none&gt;<span class="token comment">#访问POD</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl http://10.244.1.6</span>&lt;<span class="token operator">!</span>DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx<span class="token operator">!</span>&lt;<span class="token operator">/</span>title&gt;&lt;style&gt;    body <span class="token punctuation">{</span>        width: 35em<span class="token punctuation">;</span>        margin: 0 auto<span class="token punctuation">;</span>        font<span class="token operator">-</span>family: Tahoma<span class="token punctuation">,</span> Verdana<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;<span class="token operator">/</span>style&gt;&lt;<span class="token operator">/</span>head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx<span class="token operator">!</span>&lt;<span class="token operator">/</span>h1&gt;&lt;p&gt;<span class="token keyword">If</span> you see this page<span class="token punctuation">,</span> the nginx web server is successfully installed andworking<span class="token punctuation">.</span> Further configuration is required<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;<span class="token keyword">For</span> online documentation and support please refer to&lt;a href=<span class="token string">"http://nginx.org/"</span>&gt;nginx<span class="token punctuation">.</span>org&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;br<span class="token operator">/</span>&gt;Commercial support is available at&lt;a href=<span class="token string">"http://nginx.com/"</span>&gt;nginx<span class="token punctuation">.</span>com&lt;<span class="token operator">/</span>a&gt;<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>p&gt;&lt;p&gt;&lt;em&gt;Thank you <span class="token keyword">for</span> <span class="token keyword">using</span> nginx<span class="token punctuation">.</span>&lt;<span class="token operator">/</span>em&gt;&lt;<span class="token operator">/</span>p&gt;&lt;<span class="token operator">/</span>body&gt;&lt;<span class="token operator">/</span>html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除指定Pod</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 删除指定Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete pod nginx-64777cd554-pwdnh -n dev</span>pod <span class="token string">"nginx-64777cd554-pwdnh"</span> deleted<span class="token comment"># 此时，显示删除Pod成功，但是再查询，发现又新产生了一个 </span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                     READY   STATUS    RESTARTS   AGEnginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>x5rh4   1<span class="token operator">/</span>1     Running   0          24s<span class="token comment"># 这是因为当前Pod是由Pod控制器创建的，控制器会监控Pod状况，一旦发现Pod死亡，会立即重建</span><span class="token comment"># 此时要想删除Pod，必须删除Pod控制器</span><span class="token comment"># 先来查询一下当前namespace下的Pod控制器</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deploy -n  dev</span>NAME    READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGEnginx   1<span class="token operator">/</span>1     1            1           5m17s<span class="token comment"># 接下来，删除此PodPod控制器</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete deploy nginx -n dev</span>deployment<span class="token punctuation">.</span>apps <span class="token string">"nginx"</span> deleted<span class="token comment"># 稍等片刻，再查询Pod，发现Pod被删除了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>No resources found in dev namespace<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置操作</strong></p><p>创建一个pod-nginx.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以执行对应的创建和删除命令了：</p><p>​    创建：kubectl  create  -f  pod-nginx.yaml</p><p>​    删除：kubectl  delete  -f  pod-nginx.yaml</p><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>Label是kubernetes系统中的一个重要概念。它的作用就是在资源上添加标识，用来对它们进行区分和选择。</p><p>Label的特点：</p><ul><li>一个Label会以key/value键值对的形式附加到各种对象上，如Node、Pod、Service等等</li><li>一个资源对象可以定义任意数量的Label ，同一个Label也可以被添加到任意数量的资源对象上去</li><li>Label通常在资源对象定义时确定，当然也可以在对象创建后动态添加或者删除</li></ul><p>可以通过Label实现资源的多维度分组，以便灵活、方便地进行资源分配、调度、配置、部署等管理工作。</p><blockquote><p>一些常用的Label 示例如下：</p><ul><li>版本标签：”version”:”release”, “version”:”stable”……</li><li>环境标签：”environment”:”dev”，”environment”:”test”，”environment”:”pro”</li><li>架构标签：”tier”:”frontend”，”tier”:”backend”</li></ul></blockquote><p>标签定义完毕之后，还要考虑到标签的选择，这就要使用到Label Selector，即：</p><p>​    Label用于给某个资源对象定义标识</p><p>​    Label Selector用于查询和筛选拥有某些标签的资源对象</p><p>当前有两种Label Selector：</p><ul><li><p>基于等式的Label Selector</p><p>name = slave: 选择所有包含Label中key=”name”且value=”slave”的对象</p><p>env != production: 选择所有包括Label中的key=”env”且value不等于”production”的对象</p></li><li><p>基于集合的Label Selector</p><p>name in (master, slave): 选择所有包含Label中的key=”name”且value=”master”或”slave”的对象</p><p>name not in (frontend): 选择所有包含Label中的key=”name”且value不等于”frontend”的对象</p></li></ul><p>标签的选择条件可以使用多个，此时将多个Label Selector进行组合，使用逗号”,”进行分隔即可。例如：</p><p>​        name=slave，env!=production</p><p>​        name not in (frontend)，env!=production</p><p><strong>命令方式</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 为pod资源打标签</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl label pod nginx-pod version=1.0 -n dev</span>pod<span class="token operator">/</span>nginx<span class="token operator">-</span>pod labeled<span class="token comment"># 为pod资源更新标签</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl label pod nginx-pod version=2.0 -n dev --overwrite</span>pod<span class="token operator">/</span>nginx<span class="token operator">-</span>pod labeled<span class="token comment"># 查看标签</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod nginx-pod  -n dev --show-labels</span>NAME        READY   STATUS    RESTARTS   AGE   LABELSnginx<span class="token operator">-</span>pod   1<span class="token operator">/</span>1     Running   0          26s   version=2<span class="token punctuation">.</span>0<span class="token comment"># 筛选标签</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod -n dev -l version=2.0  --show-labels</span>NAME        READY   STATUS    RESTARTS   AGE   LABELSnginx<span class="token operator">-</span>pod   1<span class="token operator">/</span>1     Running   0          49s   version=2<span class="token punctuation">.</span>0<span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod -n dev -l version!=2.0 --show-labels</span>No resources found in dev namespace<span class="token punctuation">.</span><span class="token comment">#删除标签</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl label pod nginx-pod version- -n dev</span>pod<span class="token operator">/</span>nginx<span class="token operator">-</span>pod labeled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置方式</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.0"</span>     <span class="token key atrule">env</span><span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1    <span class="token key atrule">name</span><span class="token punctuation">:</span> pod    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>port      <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以执行对应的更新命令了：kubectl  apply  -f  pod-nginx.yaml</p><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>​    在kubernetes中，Pod是最小的控制单元，但是kubernetes很少直接控制Pod，一般都是通过Pod控制器来完成的。Pod控制器用于pod的管理，确保pod资源符合预期的状态，当pod的资源出现故障时，会尝试进行重启或重建pod。</p><p>​     在kubernetes中Pod控制器的种类有很多，本章节只介绍一种：Deployment。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908164328838.png" alt="image-20220908164328838"></p><p><strong>命令操作</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 命令格式: kubectl run deployment名称  [参数] </span><span class="token comment"># --image  指定pod的镜像</span><span class="token comment"># --port   指定端口</span><span class="token comment"># --replicas  指定创建pod数量</span><span class="token comment"># --namespace  指定namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl run nginx --image=nginx:1.17.1 --port=80 --replicas=3 -n dev</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>nginx created<span class="token comment"># 查看创建的Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods -n dev</span>NAME                     READY   STATUS    RESTARTS   AGEnginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>cnj4r   1<span class="token operator">/</span>1     Running   0          15snginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>f8wxc   1<span class="token operator">/</span>1     Running   0          15snginx<span class="token operator">-</span>64777cd554<span class="token operator">-</span>vvnr7   1<span class="token operator">/</span>1     Running   0          15s<span class="token comment"># 查看deployment的信息</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deploy -n dev</span>NAME    READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGEnginx   3<span class="token operator">/</span>3     3            3           37s<span class="token comment"># UP-TO-DATE：成功升级的副本数量</span><span class="token comment"># AVAILABLE：可用副本的数量</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get deploy -n dev -o wide</span>NAME    READY   UP<span class="token operator">-</span>TO<span class="token operator">-</span>DATE   AVAILABLE   AGE   CONTAINERS   IMAGES         SELECTORnginx   3<span class="token operator">/</span>3     3            3           64s   nginx        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1   run=nginx<span class="token comment"># 查看deployment的详细信息</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl describe deploy nginx -n dev</span>Name:                   nginxNamespace:              devCreationTimestamp:      Thu<span class="token punctuation">,</span> 08 Sep 2022 16:44:23 <span class="token operator">+</span>0800Labels:                 run=nginxAnnotations:            deployment<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>io<span class="token operator">/</span>revision: 1Selector:               run=nginxReplicas:               3 desired <span class="token punctuation">|</span> 3 updated <span class="token punctuation">|</span> 3 total <span class="token punctuation">|</span> 3 available <span class="token punctuation">|</span> 0 unavailableStrategyType:           RollingUpdateMinReadySeconds:        0RollingUpdateStrategy:  25<span class="token operator">%</span> max unavailable<span class="token punctuation">,</span> 25<span class="token operator">%</span> max surgePod Template:  Labels:  run=nginx  Containers:   nginx:    Image:        nginx:1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1    Port:         80<span class="token operator">/</span>TCP    Host Port:    0<span class="token operator">/</span>TCP    Environment:  &lt;none&gt;    Mounts:       &lt;none&gt;  Volumes:        &lt;none&gt;Conditions:  <span class="token function">Type</span>           Status  Reason  <span class="token operator">--</span>-<span class="token operator">-</span>           <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>  <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>  Available      True    MinimumReplicasAvailable  Progressing    True    NewReplicaSetAvailableOldReplicaSets:  &lt;none&gt;NewReplicaSet:   nginx<span class="token operator">-</span>64777cd554 <span class="token punctuation">(</span>3<span class="token operator">/</span>3 replicas created<span class="token punctuation">)</span>Events:  <span class="token function">Type</span>    Reason             Age   <span class="token keyword">From</span>                   Message  <span class="token operator">--</span>-<span class="token operator">-</span>    <span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>             <span class="token operator">--</span>-<span class="token operator">-</span>  <span class="token operator">--</span>-<span class="token operator">-</span>                   <span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>  Normal  ScalingReplicaSet  93s   deployment<span class="token operator">-</span>controller  Scaled up replica <span class="token function">set</span> nginx<span class="token operator">-</span>64777cd554 to 3  <span class="token comment"># 删除 </span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete deploy nginx -n dev</span>deployment<span class="token punctuation">.</span>apps <span class="token string">"nginx"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置操作</strong></p><p>创建一个deploy-nginx.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">run</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以执行对应的创建和删除命令了：</p><p>​    创建：kubectl  create  -f  deploy-nginx.yaml</p><p>​    删除：kubectl  delete  -f  deploy-nginx.yaml</p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>虽然每个Pod都会分配一个单独的Pod IP，然而却存在如下两问题：</p><ul><li>Pod IP 会随着Pod的重建产生变化</li><li>Pod IP 仅仅是集群内可见的虚拟IP，外部无法访问</li></ul><p>这样对于访问这个服务带来了难度。因此，kubernetes设计了Service来解决这个问题。</p><p>Service可以看作是一组同类Pod<strong>对外的访问接口</strong>。借助Service，应用可以方便地实现服务发现和负载均衡。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908164741774.png" alt="image-20220908164741774"></p><p><strong>操作一：创建集群内部可访问的Service</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 暴露Service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl expose deploy nginx --name=svc-nginx1 --type=ClusterIP --port=80 --target-port=80 -n dev</span>service<span class="token operator">/</span>svc<span class="token operator">-</span>nginx1 exposed<span class="token comment"># 查看service</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get svc svc-nginx1 -n dev -o wide</span>NAME         <span class="token function">TYPE</span>        CLUSTER<span class="token operator">-</span>IP       EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>   AGE   SELECTORsvc<span class="token operator">-</span>nginx1   ClusterIP   10<span class="token punctuation">.</span>100<span class="token punctuation">.</span>155<span class="token punctuation">.</span>221   &lt;none&gt;        80<span class="token operator">/</span>TCP    32s   run=nginx<span class="token comment"># 这里产生了一个CLUSTER-IP，这就是service的IP，在Service的生命周期中，这个地址是不会变动的</span><span class="token comment"># 可以通过这个IP访问当前service对应的POD</span><span class="token namespace">[root@master ~]</span><span class="token comment"># curl http://10.100.155.221</span>&lt;<span class="token operator">!</span>DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx<span class="token operator">!</span>&lt;<span class="token operator">/</span>title&gt;&lt;<span class="token operator">/</span>head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx<span class="token operator">!</span>&lt;<span class="token operator">/</span>h1&gt;<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&lt;<span class="token operator">/</span>body&gt;&lt;<span class="token operator">/</span>html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>操作二：创建集群外部也可访问的Service</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 上面创建的Service的type类型为ClusterIP，这个ip地址只用集群内部可访问</span><span class="token comment"># 如果需要创建外部也可以访问的Service，需要修改type为NodePort</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl expose deploy nginx --name=svc-nginx2 --type=NodePort --port=80 --target-port=80 -n dev</span>service<span class="token operator">/</span>svc<span class="token operator">-</span>nginx2 exposed<span class="token comment"># 此时查看，会发现出现了NodePort类型的Service，而且有一对Port（80:31928/TC）</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get svc  svc-nginx2  -n dev -o wide</span>NAME         <span class="token function">TYPE</span>       CLUSTER<span class="token operator">-</span>IP      EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGE   SELECTORsvc<span class="token operator">-</span>nginx2   NodePort   10<span class="token punctuation">.</span>97<span class="token punctuation">.</span>128<span class="token punctuation">.</span>247   &lt;none&gt;        80:32582<span class="token operator">/</span>TCP   28s   run=nginx<span class="token comment"># 接下来就可以通过集群外的主机访问 节点IP:32582访问服务了</span><span class="token comment"># 例如在的电脑主机上通过浏览器访问下面的地址</span>http:<span class="token operator">/</span><span class="token operator">/</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>100:32582<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除Service</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete svc svc-nginx1 -n dev</span>service <span class="token string">"svc-nginx1"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置方式</strong></p><p>创建一个svc-nginx.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> svc<span class="token punctuation">-</span>nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> 10.100.155.221  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">run</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以执行对应的创建和删除命令了：</p><p>​    创建：kubectl  create  -f  svc-nginx.yaml</p><p>​    删除：kubectl  delete  -f  svc-nginx.yaml</p><blockquote><p><strong>小结</strong></p><p>​    至此，已经掌握了Namespace、Pod、Deployment、Service资源的基本操作，有了这些操作，就可以在kubernetes集群中实现一个服务的简单部署和访问了，但是如果想要更好的使用kubernetes，就需要深入学习这几种资源的细节和原理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、kubernetes资源管理</title>
      <link href="/2022/09/07/kubernetes/%E4%B8%89%E3%80%81kubernetes%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/09/07/kubernetes/%E4%B8%89%E3%80%81kubernetes%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="资源管理介绍"><a href="#资源管理介绍" class="headerlink" title="资源管理介绍"></a>资源管理介绍</h2><p>在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。</p><blockquote><p>​    kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</p><p>​    kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</p><p>​    Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</p><p>​    当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908132140933.png" alt="image-20220908132140933"></p><blockquote><p> 学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p></blockquote><h2 id="YAML语言介绍"><a href="#YAML语言介绍" class="headerlink" title="YAML语言介绍"></a>YAML语言介绍</h2><p>​    YAML是一个类似 XML、JSON 的标记性语言。它强调以<strong>数据</strong>为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称”一种人性化的数据格式语言”。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>zhtao</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>Beijing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>zhtao</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">zhtao</span><span class="token punctuation">:</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">21</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span> Beijing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>YAML的语法比较简单，主要有下面几个：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格( 低版本限制 )</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li></ul><p>YAML支持以下几种数据类型：</p><ul><li>纯量：单个的、不可再分的值</li><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期</span><span class="token comment"># 1 布尔类型</span><span class="token key atrule">c1</span><span class="token punctuation">:</span> true (或者True)<span class="token comment"># 2 整型</span><span class="token key atrule">c2</span><span class="token punctuation">:</span> <span class="token number">234</span><span class="token comment"># 3 浮点型</span><span class="token key atrule">c3</span><span class="token punctuation">:</span> <span class="token number">3.14</span><span class="token comment"># 4 null类型 </span><span class="token key atrule">c4</span><span class="token punctuation">:</span> <span class="token null important">~</span>  <span class="token comment"># 使用~表示null</span><span class="token comment"># 5 日期类型</span><span class="token key atrule">c5</span><span class="token punctuation">:</span> <span class="token datetime number">2018-02-17</span>    <span class="token comment"># 日期必须使用ISO 8601格式，即yyyy-MM-dd</span><span class="token comment"># 6 时间类型</span><span class="token key atrule">c6</span><span class="token punctuation">:</span> <span class="token datetime number">2018-02-17T15:02:31+08:00</span>  <span class="token comment"># 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><span class="token comment"># 7 字符串类型</span><span class="token key atrule">c7</span><span class="token punctuation">:</span> heima     <span class="token comment"># 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 </span><span class="token key atrule">c8</span><span class="token punctuation">:</span> line1    line2     <span class="token comment"># 字符串过多的情况可以拆成多行，每一行会被转化成一个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 对象</span><span class="token comment"># 形式一(推荐):</span><span class="token key atrule">zhtao</span><span class="token punctuation">:</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">21</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span> Beijing<span class="token comment"># 形式二(了解):</span><span class="token key atrule">zhtao</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token key atrule">address</span><span class="token punctuation">:</span> Beijing<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 数组</span><span class="token comment"># 形式一(推荐):</span><span class="token key atrule">address</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> 安徽  <span class="token punctuation">-</span> 宁波<span class="token comment"># 形式二(了解):</span><span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>安徽<span class="token punctuation">,</span>宁波<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小提示：</p><p>​    1  书写yaml切记<code>:</code> 后面要加一个空格</p><p>​    2  如果需要将多段yaml配置放在一个文件中，中间要使用<code>---</code>分隔</p><p>​    3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确</p><p>​       <a href="https://www.json2yaml.com/convert-yaml-to-json">https://www.json2yaml.com/convert-yaml-to-json</a></p></blockquote><h2 id="资源管理方式"><a href="#资源管理方式" class="headerlink" title="资源管理方式"></a>资源管理方式</h2><ul><li><p>命令式对象管理：直接使用命令去操作kubernetes资源</p><p><code>kubectl run nginx-pod --image=nginx:1.17.1 --port=80</code></p></li><li><p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p><p><code>kubectl create/patch -f nginx-pod.yaml</code></p></li><li><p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源</p><p><code>kubectl apply -f nginx-pod.yaml</code></p></li></ul><table><thead><tr><th>类型</th><th>操作对象</th><th>适用环境</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>命令式对象管理</td><td>对象</td><td>测试</td><td>简单</td><td>只能操作活动对象，无法审计、跟踪</td></tr><tr><td>命令式对象配置</td><td>文件</td><td>开发</td><td>可以审计、跟踪</td><td>项目大时，配置文件多，操作麻烦</td></tr><tr><td>声明式对象配置</td><td>目录</td><td>开发</td><td>支持目录操作</td><td>意外情况下难以调试</td></tr></tbody></table><h3 id="命令式对象管理"><a href="#命令式对象管理" class="headerlink" title="命令式对象管理"></a>命令式对象管理</h3><p><strong>kubectl命令</strong></p><p>​    kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">kubectl [command] [type] [name] [flags]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete</p><p><strong>type</strong>：指定资源类型，比如deployment、pod、service</p><p><strong>name</strong>：指定资源的名称，名称大小写敏感</p><p><strong>flags</strong>：指定额外的可选参数</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 查看所有pod</span>kubectl get pod <span class="token comment"># 查看某个pod</span>kubectl get pod pod_name<span class="token comment"># 查看某个pod,以yaml格式展示结果</span>kubectl get pod pod_name <span class="token operator">-</span>o yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>资源类型</strong></p><p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">kubectl api<span class="token operator">-</span>resources<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经常使用的资源有下面这些：</p><table>    <tbody><tr>        <th>资源分类</th>        <th>资源名称</th>        <th>缩写</th>        <th>资源作用</th>    </tr>    <tr>        <td rowspan="2">集群级别资源</td>        <td>nodes</td>        <td>no</td>        <td>集群组成部分</td>    </tr>    <tr>        <td>namespaces</td>        <td>ns</td>        <td>隔离Pod</td>    </tr>    <tr>        <td>pod资源</td>        <td>pods</td>        <td>po</td>        <td>装载容器</td>    </tr>    <tr>        <td rowspan="8">pod资源控制器</td>        <td>replicationcontrollers</td>        <td>rc</td>        <td>控制pod资源</td>    </tr>    <tr>        <td>replicasets</td>        <td>rs</td>        <td>控制pod资源</td>    </tr>    <tr>        <td>deployments</td>        <td>deploy</td>        <td>控制pod资源</td>    </tr>    <tr>        <td>daemonsets</td>        <td>ds</td>        <td>控制pod资源</td>    </tr>    <tr>        <td>jobs</td>        <td></td>        <td>控制pod资源</td>    </tr>        <tr>        <td>cronjobs</td>        <td>cj</td>        <td>控制pod资源</td>    </tr>        <tr>        <td>horizontalpodautoscalers</td>        <td>hpa</td>        <td>控制pod资源</td>    </tr>        <tr>        <td>statefulsets</td>        <td>sts</td>        <td>控制pod资源</td>    </tr>    <tr>        <td rowspan="2">服务发现资源</td>        <td>services</td>        <td>svc</td>        <td>统一pod对外接口</td>    </tr>    <tr>        <td>ingress</td>        <td>ing</td>        <td>统一pod对外接口</td>    </tr>    <tr>        <td rowspan="3">存储资源</td>        <td>volumeattachments</td>        <td></td>        <td>存储</td>    </tr>    <tr>        <td>persistentvolumes</td>        <td>pv</td>        <td>存储</td>    </tr>    <tr>        <td>persistentvolumeclaims</td>        <td>pvc</td>        <td>存储</td>    </tr>    <tr>        <td rowspan="2">配置资源</td>        <td>configmaps</td>        <td>cm</td>        <td>配置</td>    </tr>    <tr>        <td>secrets</td>        <td></td>        <td>配置</td>    </tr></tbody></table><p><strong>操作</strong></p><p>kubernetes允许对资源进行多种操作，可以通过–help查看详细的操作命令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">kubectl <span class="token operator">--</span>help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经常使用的操作有下面这些：</p><table>    <tbody><tr>        <th>命令分类</th>        <th>命令</th>        <th>翻译</th>        <th>命令作用</th>    </tr>    <tr>        <td rowspan="6">基本命令</td>        <td>create</td>        <td>创建</td>        <td>创建一个资源</td>    </tr>    <tr>        <td>edit</td>        <td>编辑</td>        <td>编辑一个资源</td>    </tr>    <tr>        <td>get</td>        <td>获取</td>        <td>获取一个资源</td>    </tr>   <tr>        <td>patch</td>        <td>更新</td>        <td>更新一个资源</td>    </tr>    <tr>        <td>delete</td>        <td>删除</td>        <td>删除一个资源</td>    </tr>    <tr>        <td>explain</td>        <td>解释</td>        <td>展示资源文档</td>    </tr>    <tr>        <td rowspan="10">运行和调试</td>        <td>run</td>        <td>运行</td>        <td>在集群中运行一个指定的镜像</td>    </tr>    <tr>        <td>expose</td>        <td>暴露</td>        <td>暴露资源为Service</td>    </tr>    <tr>        <td>describe</td>        <td>描述</td>        <td>显示资源内部信息</td>    </tr>    <tr>        <td>logs</td>        <td>日志</td>        <td>输出容器在 pod 中的日志</td>    </tr>        <tr>        <td>attach</td>        <td>缠绕</td>        <td>进入运行中的容器</td>    </tr>        <tr>        <td>exec</td>        <td>执行</td>        <td>执行容器中的一个命令</td>    </tr>        <tr>        <td>cp</td>        <td>复制</td>        <td>在Pod内外复制文件</td>    </tr>        <tr>        <td>rollout</td>        <td>首次展示</td>        <td>管理资源的发布</td>    </tr>    <tr>        <td>scale</td>        <td>规模</td>        <td>扩(缩)容Pod的数量</td>    </tr>    <tr>        <td>autoscale</td>        <td>自动调整</td>        <td>自动调整Pod的数量</td>    </tr>    <tr>        <td rowspan="2">高级命令</td>        <td>apply</td>        <td>rc</td>        <td>通过文件对资源进行配置</td>    </tr>    <tr>        <td>label</td>        <td>标签</td>        <td>更新资源上的标签</td>    </tr>    <tr>        <td rowspan="2">其他命令</td>        <td>cluster-info</td>        <td>集群信息</td>        <td>显示集群信息</td>    </tr>    <tr>        <td>version</td>        <td>版本</td>        <td>显示当前Server和Client的版本</td>    </tr></tbody></table><p>下面以一个namespace / pod的创建和删除简单演示下命令的使用：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建一个namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create namespace dev</span>namespace<span class="token operator">/</span>dev created<span class="token comment"># 获取namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get ns</span>NAME              STATUS   AGEdefault           Active   21hdev               Active   21skube<span class="token operator">-</span>node<span class="token operator">-</span>lease   Active   21hkube<span class="token operator">-</span>public       Active   21hkube<span class="token operator">-</span>system       Active   21h<span class="token comment"># 在此namespace下创建并运行一个nginx的Pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl run pod --image=nginx -n dev</span>kubectl run <span class="token operator">--</span>generator=deployment<span class="token operator">/</span>apps<span class="token punctuation">.</span>v1 is DEPRECATED and will be removed in a future version<span class="token punctuation">.</span> Use kubectl run <span class="token operator">--</span>generator=run<span class="token operator">-</span>pod<span class="token operator">/</span>v1 or kubectl create instead<span class="token punctuation">.</span>deployment<span class="token punctuation">.</span>apps<span class="token operator">/</span>pod created<span class="token comment"># 查看新创建的pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pod -n dev</span>NAME                   READY   STATUS              RESTARTS   AGEpod<span class="token operator">-</span>864f9875b9<span class="token operator">-</span>lzfxd   0<span class="token operator">/</span>1     ContainerCreating   0          17s<span class="token comment"># 删除指定的pod</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete pod pod-864f9875b9-lzfxd -n dev</span>pod <span class="token string">"pod-864f9875b9-lzfxd"</span> deleted<span class="token comment"># 删除指定的namespace</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete ns dev</span>namespace <span class="token string">"dev"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令式对象配置"><a href="#命令式对象配置" class="headerlink" title="命令式对象配置"></a>命令式对象配置</h3><p>命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。</p><p>1） 创建一个nginxpod.yaml，内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginxpod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>containers    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.17.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）执行create命令，创建资源：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create -f nginxpod.yaml</span>namespace<span class="token operator">/</span>dev createdpod<span class="token operator">/</span>nginxpod created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时发现创建了两个资源对象，分别是namespace和pod</p><p>3）执行get命令，查看资源：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl get -f nginxpod.yaml</span>NAME            STATUS   AGEnamespace<span class="token operator">/</span>dev   Active   14sNAME           READY   STATUS              RESTARTS   AGEpod<span class="token operator">/</span>nginxpod   0<span class="token operator">/</span>1     ContainerCreating   0          13s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就显示了两个资源对象的信息</p><p>4）执行delete命令，删除资源：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl delete -f nginxpod.yaml</span>namespace <span class="token string">"dev"</span> deletedpod <span class="token string">"nginxpod"</span> deleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时发现两个资源对象被删除了</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">总结:命令式对象配置的方式操作资源，可以简单的认为：命令  +  yaml配置文件（里面是命令需要的各种参数）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="声明式对象配置"><a href="#声明式对象配置" class="headerlink" title="声明式对象配置"></a>声明式对象配置</h3><p>声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 首先执行一次kubectl apply -f yaml文件，发现创建了资源</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl apply -f nginxpod.yaml</span>namespace<span class="token operator">/</span>dev createdpod<span class="token operator">/</span>nginxpod created<span class="token comment"># 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动</span><span class="token namespace">[root@master ~]</span><span class="token comment">#  kubectl apply -f nginxpod.yaml</span>namespace<span class="token operator">/</span>dev unchangedpod<span class="token operator">/</span>nginxpod unchanged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-md" data-language="md"><code class="language-md">总结:    其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态）使用apply操作资源：        如果资源不存在，就创建，相当于 kubectl create如果资源已存在，就更新，相当于 kubectl patch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>扩展：kubectl可以在node节点上运行吗 ?</p></blockquote><p>​    kubectl的运行是需要进行配置的，它的配置文件是$HOME/.kube，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">scp  <span class="token operator">-</span>r  HOME<span class="token operator">/</span><span class="token punctuation">.</span>kube   node1: HOME<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用推荐:  三种方式应该怎么用 ?</p></blockquote><p> 创建/更新资源      使用声明式对象配置 kubectl apply -f  XXX.yaml</p><p> 删除资源              使用命令式对象配置 kubectl delete -f  XXX.yaml</p><p> 查询资源              使用命令式对象管理 kubectl get(describe) 资源名称</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、kubernetes集群环境搭建</title>
      <link href="/2022/09/07/kubernetes/%E4%BA%8C%E3%80%81kubernetes%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/09/07/kubernetes/%E4%BA%8C%E3%80%81kubernetes%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h2><h3 id="集群类型"><a href="#集群类型" class="headerlink" title="集群类型"></a>集群类型</h3><p>kubernetes集群大体上分为两类：<strong>一主多从</strong>和<strong>多主多从</strong>。</p><ul><li>一主多从：一台Master节点和多台Node节点，搭建简单，但是有单机故障风险，适合用于测试环境</li><li>多主多从：多台Master节点和多台Node节点，搭建麻烦，安全性高，适合用于生产环境</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907235044030.png" alt="image-20220907235044030"></p><blockquote><p><code>说明：为了测试简单，本次搭建的是  一主两从   类型的集群</code></p></blockquote><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>kubernetes有多种部署方式，目前主流的方式有kubeadm、minikube、二进制包</p><ul><li>minikube：一个用于快速搭建单节点kubernetes的工具</li><li>kubeadm：一个用于快速搭建kubernetes集群的工具</li><li>二进制包 ：从官网下载每个组件的二进制包，依次去安装，此方式对于理解kubernetes组件更加有效</li></ul><blockquote><p><code>说明：现在需要安装kubernetes的集群环境，但是又不想过于麻烦，所以选择使用kubeadm方式</code></p></blockquote><h3 id="主机规划"><a href="#主机规划" class="headerlink" title="主机规划"></a>主机规划</h3><table><thead><tr><th>作用</th><th>IP地址</th><th>操作系统</th><th>配置</th></tr></thead><tbody><tr><td>Master</td><td>192.168.80.101</td><td>Centos7.9    基础设施服务器</td><td>2颗CPU  2G内存   50G硬盘</td></tr><tr><td>Node1</td><td>192.168.109.102</td><td>Centos7.9    基础设施服务器</td><td>2颗CPU  2G内存   50G硬盘</td></tr><tr><td>Node2</td><td>192.168.109.103</td><td>Centos7.9    基础设施服务器</td><td>2颗CPU  2G内存   50G硬盘</td></tr></tbody></table><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>​    本次环境搭建需要安装三台Centos服务器（一主二从），然后在每台服务器中分别安装docker（18.06.3），kubeadm（1.17.4）、kubelet（1.17.4）、kubectl（1.17.4）程序。</p><h3 id="主机安装"><a href="#主机安装" class="headerlink" title="主机安装"></a>主机安装</h3><p>安装虚拟机过程中注意下面选项的设置：</p><ul><li><p>操作系统环境：CPU（2C）    内存（2G）   硬盘（50G）    </p></li><li><p>语言选择：中文简体</p></li><li><p>软件选择：基础设施服务器</p></li><li><p>分区选择：自动分区</p></li><li><p>网络配置：按照下面配置网路地址信息</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">网络地址：192.168.80.100  （每台主机都不一样  分别为100、101、102）子网掩码：255.255.255.0默认网关：192.168.80.2DNS：    114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908000425085.png" alt="image-20220908000425085"></p></li><li><p>主机名设置：按照下面信息设置主机名</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">master节点： masternode节点：   node1node节点：   node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220908000508046.png" alt="image-20220908000508046"></p></li></ul><h3 id="环境初始化"><a href="#环境初始化" class="headerlink" title="环境初始化"></a>环境初始化</h3><ol><li>   检查操作系统的版本</li></ol><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 此方式下安装kubernetes集群要求Centos版本要在7.5或之上</span><span class="token namespace">[root@master ~]</span><span class="token comment"># cat /etc/redhat-release</span>CentOS Linux release 7<span class="token punctuation">.</span>9<span class="token punctuation">.</span>2009 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2） 主机名解析</p><p>为了方便后面集群节点间的直接调用，在这配置一下主机名解析，企业中推荐使用内部DNS服务器</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 主机名成解析 编辑三台服务器的/etc/hosts文件，添加下面内容</span>192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>100  master192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>101  node1192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>102  node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3） 时间同步</p><p>kubernetes要求集群中的节点时间必须精确一致，这里直接使用chronyd服务从网络同步时间。</p><p>企业中建议配置内部的时间同步服务器</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 启动chronyd服务</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl start chronyd</span><span class="token comment"># 设置chronyd服务开机自启</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl enable chronyd</span><span class="token comment"># chronyd服务启动稍等几秒钟，就可以使用date命令验证时间了</span><span class="token namespace">[root@master ~]</span><span class="token comment"># date</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4） 禁用iptables和firewalld服务</p><p>kubernetes和docker在运行中会产生大量的iptables规则，为了不让系统规则跟它们混淆，直接关闭系统的规则</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 1 关闭firewalld服务</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl stop firewalld</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl disable firewalld</span><span class="token comment"># 2 关闭iptables服务</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl stop iptables</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl disable iptables</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5） 禁用selinux</p><p> selinux是linux系统下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 编辑 /etc/selinux/config 文件，修改SELINUX的值为disabled</span><span class="token comment"># 注意修改完毕之后需要重启linux服务</span>SELINUX=disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6） 禁用swap分区</p><p>swap分区指的是虚拟内存分区，它的作用是在物理内存使用完之后，将磁盘空间虚拟成内存来使用</p><p>启用swap设备会对系统的性能产生非常负面的影响，因此kubernetes要求每个节点都要禁用swap设备</p><p>但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 编辑分区配置文件/etc/fstab，注释掉swap分区一行</span><span class="token comment"># 注意修改完毕之后需要重启linux服务</span> UUID=455cc753<span class="token operator">-</span>7a60<span class="token operator">-</span>4c17<span class="token operator">-</span>a424<span class="token operator">-</span>7741728c44a1 <span class="token operator">/</span>boot    xfs     defaults        0 0 <span class="token operator">/</span>dev<span class="token operator">/</span>mapper<span class="token operator">/</span>centos<span class="token operator">-</span>home <span class="token operator">/</span>home                      xfs     defaults        0 0<span class="token comment"># /dev/mapper/centos-swap swap                      swap    defaults        0 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7）修改linux的内核参数</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 修改linux的内核参数，添加网桥过滤和地址转发功能</span><span class="token comment"># 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置:</span>net<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>bridge<span class="token operator">-</span>nf<span class="token operator">-</span>call<span class="token operator">-</span>ip6tables = 1net<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>bridge<span class="token operator">-</span>nf<span class="token operator">-</span>call<span class="token operator">-</span>iptables = 1net<span class="token punctuation">.</span>ipv4<span class="token punctuation">.</span>ip_forward = 1<span class="token comment"># 重新加载配置</span><span class="token namespace">[root@master ~]</span><span class="token comment"># sysctl -p</span><span class="token comment"># 加载网桥过滤模块</span><span class="token namespace">[root@master ~]</span><span class="token comment"># modprobe br_netfilter</span><span class="token comment"># 查看网桥过滤模块是否加载成功</span><span class="token namespace">[root@master ~]</span><span class="token comment"># lsmod | grep br_netfilter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8）配置ipvs功能</p><p>在kubernetes中service有两种代理模型，一种是基于iptables的，一种是基于ipvs的</p><p>两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 1 安装ipset和ipvsadm</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum install ipset ipvsadmin -y</span><span class="token comment"># 2 添加需要加载的模块写入脚本文件</span><span class="token namespace">[root@master ~]</span><span class="token comment"># cat &lt;&lt;EOF &gt;  /etc/sysconfig/modules/ipvs.modules</span><span class="token comment">#!/bin/bash</span>modprobe <span class="token operator">--</span> ip_vsmodprobe <span class="token operator">--</span> ip_vs_rrmodprobe <span class="token operator">--</span> ip_vs_wrrmodprobe <span class="token operator">--</span> ip_vs_shmodprobe <span class="token operator">--</span> nf_conntrack_ipv4EOF<span class="token comment"># 3 为脚本文件添加执行权限</span><span class="token namespace">[root@master ~]</span><span class="token comment"># chmod +x /etc/sysconfig/modules/ipvs.modules</span><span class="token comment"># 4 执行脚本文件</span><span class="token namespace">[root@master ~]</span><span class="token comment"># /bin/bash /etc/sysconfig/modules/ipvs.modules</span><span class="token comment"># 5 查看对应的模块是否加载成功</span><span class="token namespace">[root@master ~]</span><span class="token comment"># lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9） 重启服务器</p><p>上面步骤完成之后，需要重新启动linux系统</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[root@master ~]</span><span class="token comment"># reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 1 切换镜像源</span><span class="token namespace">[root@master ~]</span><span class="token comment"># wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo</span><span class="token comment"># 2 查看当前镜像源中支持的docker版本</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum list docker-ce --showduplicates</span><span class="token comment"># 3 安装特定版本的docker-ce</span><span class="token comment"># 必须指定--setopt=obsoletes=0，否则yum会自动安装更高版本</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum install --setopt=obsoletes=0 docker-ce-18.06.3.ce-3.el7 -y</span><span class="token comment"># 4 添加一个配置文件</span><span class="token comment"># Docker在默认情况下使用的Cgroup Driver为cgroupfs，而kubernetes推荐使用systemd来代替cgroupfs</span><span class="token namespace">[root@master ~]</span><span class="token comment"># mkdir /etc/docker</span><span class="token namespace">[root@master ~]</span><span class="token comment"># cat &lt;&lt;EOF &gt;  /etc/docker/daemon.json</span><span class="token punctuation">{</span>  <span class="token string">"exec-opts"</span>: <span class="token punctuation">[</span><span class="token string">"native.cgroupdriver=systemd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"registry-mirrors"</span>: <span class="token punctuation">[</span><span class="token string">"https://kn0t2bca.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token comment"># 5 启动docker</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl restart docker</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl enable docker</span><span class="token comment"># 6 检查docker状态和版本</span><span class="token namespace">[root@master ~]</span><span class="token comment"># docker version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装kubernetes组件"><a href="#安装kubernetes组件" class="headerlink" title="安装kubernetes组件"></a>安装kubernetes组件</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 由于kubernetes的镜像源在国外，速度比较慢，这里切换成国内的镜像源</span><span class="token comment"># 编辑/etc/yum.repos.d/kubernetes.repo，添加下面的配置 </span><span class="token namespace">[kubernetes]</span>name=Kubernetesbaseurl=http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kubernetes<span class="token operator">/</span>yum<span class="token operator">/</span>repos<span class="token operator">/</span>kubernetes<span class="token operator">-</span>el7<span class="token operator">-</span>x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kubernetes<span class="token operator">/</span>yum<span class="token operator">/</span>doc<span class="token operator">/</span>yum<span class="token operator">-</span>key<span class="token punctuation">.</span>gpg       http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>kubernetes<span class="token operator">/</span>yum<span class="token operator">/</span>doc<span class="token operator">/</span>rpm<span class="token operator">-</span>package<span class="token operator">-</span>key<span class="token punctuation">.</span>gpg<span class="token comment"># 安装kubeadm、kubelet和kubectl</span><span class="token namespace">[root@master ~]</span><span class="token comment"># yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span><span class="token comment"># 配置kubelet的cgroup</span><span class="token comment"># 编辑/etc/sysconfig/kubelet，添加下面的配置</span>KUBELET_CGROUP_ARGS=<span class="token string">"--cgroup-driver=systemd"</span>KUBE_PROXY_MODE=<span class="token string">"ipvs"</span><span class="token comment"># 4 设置kubelet开机自启</span><span class="token namespace">[root@master ~]</span><span class="token comment"># systemctl enable kubelet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="准备集群镜像"><a href="#准备集群镜像" class="headerlink" title="准备集群镜像"></a>准备集群镜像</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubeadm config images list</span><span class="token comment"># 下载镜像</span><span class="token comment"># 此镜像在kubernetes的仓库中,由于网络原因,无法连接，下面提供了一种替代方案</span>images=<span class="token punctuation">(</span>    kube<span class="token operator">-</span>apiserver:v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4    kube<span class="token operator">-</span>controller<span class="token operator">-</span>manager:v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4    kube<span class="token operator">-</span>scheduler:v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4    kube<span class="token operator">-</span>proxy:v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4    pause:3<span class="token punctuation">.</span>1    etcd:3<span class="token punctuation">.</span>4<span class="token punctuation">.</span>3<span class="token operator">-</span>0    coredns:1<span class="token punctuation">.</span>6<span class="token punctuation">.</span>5<span class="token punctuation">)</span><span class="token keyword">for</span> imageName in $<span class="token punctuation">{</span>images<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>docker pull registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>google_containers<span class="token operator">/</span><span class="token variable">$imageName</span>docker tag registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>google_containers<span class="token operator">/</span><span class="token variable">$imageName</span> k8s<span class="token punctuation">.</span>gcr<span class="token punctuation">.</span>io<span class="token operator">/</span><span class="token variable">$imageName</span>docker rmi registry<span class="token punctuation">.</span>cn<span class="token operator">-</span>hangzhou<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>com<span class="token operator">/</span>google_containers<span class="token operator">/</span><span class="token variable">$imageName</span>done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><p>下面开始对集群进行初始化，并将node节点加入到集群中</p><blockquote><p>下面的操作只需要在<code>master</code>节点上执行即可</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 创建集群</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubeadm init \</span><span class="token operator">--</span>kubernetes<span class="token operator">-</span>version=v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4 \    <span class="token operator">--</span>pod<span class="token operator">-</span>network<span class="token operator">-</span>cidr=10<span class="token punctuation">.</span>244<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token operator">/</span>16 \    <span class="token operator">--</span>service<span class="token operator">-</span>cidr=10<span class="token punctuation">.</span>96<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token operator">/</span>12 \    <span class="token operator">--</span>apiserver<span class="token operator">-</span>advertise<span class="token operator">-</span>address=192<span class="token punctuation">.</span>168<span class="token punctuation">.</span>80<span class="token punctuation">.</span>100<span class="token comment"># 创建必要文件</span><span class="token namespace">[root@master ~]</span><span class="token comment"># mkdir -p $HOME/.kube</span><span class="token namespace">[root@master ~]</span><span class="token comment"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><span class="token namespace">[root@master ~]</span><span class="token comment"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下面的操作只需要在<code>node</code>节点上执行即可</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 将node节点加入集群</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubeadm join 192.168.80.100:6443 \ </span><span class="token operator">--</span>token 8507uc<span class="token punctuation">.</span>o0knircuri8etnw2 \<span class="token operator">--</span>discovery<span class="token operator">-</span>token<span class="token operator">-</span>ca<span class="token operator">-</span>cert<span class="token operator">-</span>hash \sha256:acc37967fb5b0acf39d7598f8a439cc7dc88f439a3f4d0c9cae88e7901b9d3f<span class="token comment"># 查看集群状态 此时的集群状态为NotReady，这是因为还没有配置网络插件</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get nodes</span>NAME     STATUS     ROLES    AGE     VERSIONmaster   NotReady   master   6m43s   v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4node1    NotReady   &lt;none&gt;   22s     v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4node2    NotReady   &lt;none&gt;   19s     v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h3><p>kubernetes支持多种网络插件，比如flannel、calico、canal等等，任选一种使用即可，本次选择flannel</p><blockquote><p>下面操作依旧只在<code>master</code>节点执行即可，插件使用的是DaemonSet的控制器，它会在每个节点上都运行</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 获取fannel的配置文件</span><span class="token namespace">[root@master ~]</span><span class="token comment"># wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><span class="token comment"># 使用配置文件启动fannel</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl apply -f kube-flannel.yml</span><span class="token comment"># 稍等片刻，再次查看集群节点的状态</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get nodes</span>NAME     STATUS   ROLES    AGE     VERSIONmaster   Ready    master   15m     v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4node1    Ready    &lt;none&gt;   8m53s   v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4node2    Ready    &lt;none&gt;   8m50s   v1<span class="token punctuation">.</span>17<span class="token punctuation">.</span>4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，kubernetes的集群环境搭建完成</p><h2 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h2><p>接下来在kubernetes集群中部署一个nginx程序，测试下集群是否在正常工作。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment"># 部署nginx</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl create deployment nginx --image=nginx:1.14-alpine</span><span class="token comment"># 暴露端口</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl expose deployment nginx --port=80 --type=NodePort</span><span class="token comment"># 查看服务状态</span><span class="token namespace">[root@master ~]</span><span class="token comment"># kubectl get pods,service</span>NAME                         READY   STATUS    RESTARTS   AGEpod<span class="token operator">/</span>nginx<span class="token operator">-</span>86c57db685<span class="token operator">-</span>fdc2k   1<span class="token operator">/</span>1     Running   0          18mNAME                 <span class="token function">TYPE</span>        CLUSTER<span class="token operator">-</span>IP      EXTERNAL<span class="token operator">-</span>IP   PORT<span class="token punctuation">(</span>S<span class="token punctuation">)</span>        AGEservice<span class="token operator">/</span>kubernetes   ClusterIP   10<span class="token punctuation">.</span>96<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1       &lt;none&gt;        443<span class="token operator">/</span>TCP        82mservice<span class="token operator">/</span>nginx        NodePort    10<span class="token punctuation">.</span>104<span class="token punctuation">.</span>121<span class="token punctuation">.</span>45   &lt;none&gt;        80:30073<span class="token operator">/</span>TCP   17m<span class="token comment"># 4 最后在电脑上访问下部署的nginx服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907235915782.png" alt="image-20220907235915782"></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、kubernetes介绍</title>
      <link href="/2022/09/07/kubernetes/%E4%B8%80%E3%80%81kubernetes%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/09/07/kubernetes/%E4%B8%80%E3%80%81kubernetes%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="kubernetes介绍"><a href="#kubernetes介绍" class="headerlink" title="kubernetes介绍"></a>kubernetes介绍</h1><h2 id="应用部署方式演变"><a href="#应用部署方式演变" class="headerlink" title="应用部署方式演变"></a>应用部署方式演变</h2><p>在部署应用程序的方式上，主要经历了三个时代：</p><ul><li><p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p><blockquote><p>优点：简单，不需要其它技术的参与</p><p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p></blockquote></li><li><p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p><blockquote><p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p><p>缺点：增加了操作系统，浪费了部分资源</p></blockquote></li><li><p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p><blockquote><p>优点：</p><p>​    可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p><p>​    运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p><p>​    容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907232843614.png" alt="image-20220907232843614"></p><p>容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：</p><ul><li>一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器</li><li>当并发访问量变大的时候，怎么样做到横向扩展容器数量</li></ul><p>这些容器管理的问题统称为<strong>容器编排</strong>问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：</p><ul><li><strong>Swarm</strong>：Docker自己的容器编排工具</li><li><strong>Mesos</strong>：Apache的一个资源统一管控的工具，需要和Marathon结合使用</li><li><strong>Kubernetes</strong>：Google开源的的容器编排工具</li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907232911612.png" alt="image-20220907232911612"></p><h2 id="kubernetes简介"><a href="#kubernetes简介" class="headerlink" title="kubernetes简介"></a>kubernetes简介</h2><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907232936826.png" alt="image-20220907232936826"></p><p>​    </p><p>​    kubernetes，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p><p>​    kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p><ul><li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li><li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li><li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li><li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li><li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li><li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li></ul><p><a href="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907232950480.png">https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907232950480.png</a></p><h2 id="kubernetes组件"><a href="#kubernetes组件" class="headerlink" title="kubernetes组件"></a>kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p><p><strong>master：集群的控制平面，负责集群的决策  (  管理  )</strong></p><blockquote><p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p><p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p><p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p><p>**Etcd **：负责存储集群中各种资源对象的信息</p></blockquote><p>**node：集群的数据平面，负责为容器提供运行环境 ( 干活 ) **</p><blockquote><p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p><p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p><p><strong>Docker</strong> : 负责节点上容器的各种操作</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907233056017.png" alt="image-20220907233056017"></p><p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：</p><ol><li><p>首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中</p></li><li><p>一个nginx服务的安装请求会首先被发送到master节点的apiServer组件</p></li><li><p>apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p><p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer</p></li><li><p>apiServer调用controller-manager去调度Node节点安装nginx服务</p></li><li><p>kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod</p><p>pod是kubernetes的最小操作单元，容器必须跑在pod中至此，</p></li><li><p>一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理</p></li></ol><p>​        这样，外界用户就可以访问集群中的nginx服务了</p><h2 id="kubernetes概念"><a href="#kubernetes概念" class="headerlink" title="kubernetes概念"></a>kubernetes概念</h2><p><strong>Master</strong>：集群控制节点，每个集群需要至少一个master节点负责集群的管控</p><p><strong>Node</strong>：工作负载节点，由master分配容器到这些node工作节点上，然后node节点上的docker负责容器的运行</p><p><strong>Pod</strong>：kubernetes的最小控制单元，容器都是运行在pod中的，一个pod中可以有1个或者多个容器</p><p><strong>Controller</strong>：控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p><p><strong>Service</strong>：pod对外服务的统一入口，下面可以维护者同一类的多个pod</p><p><strong>Label</strong>：标签，用于对pod进行分类，同一类pod会拥有相同的标签</p><p><strong>NameSpace</strong>：命名空间，用来隔离pod的运行环境</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/kubernetes/image-20220907233455874.png" alt="image-20220907233455874"></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅识ACID</title>
      <link href="/2022/04/11/Mysql/%E6%B5%85%E8%AF%86ACID/"/>
      <url>/2022/04/11/Mysql/%E6%B5%85%E8%AF%86ACID/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>ACID是关系型数据库事务的四大特性, 即<code>原子性 (Atomicity)</code>、 <code>一致性(Consistency)</code>、<code>隔离性(Isolation)</code> 和 <code>持久性(Durability)</code>。</p><p>首先来看事务, 事务是一组原子性的sql执行单元, <code>要么全部执行成功（commit），要么全部执行失败（rollback）</code>。而要保证事务的这种特性, 就必须借助于<code>ACID</code>。换一种说法, 借助于ACID, 关系型数据库的事务操作实现了CAP理论中的CA, 即一致性和可用性。</p><h2 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h2><p><strong>1.原子性(Atomicity)</strong></p><p>  单个事务，为一个不可分割的最小工作单元，整个事务中的所有操作要么全部commit成功，要么全部失败rollback，对于一个事务来说，不可能只执行其中的一部分SQL操作，这就是事务的原子性。   </p><blockquote><p>例如A和B原来分别有1000块钱, 现在A要去银行转账两百块给B。这个过程包含两个步骤:</p><ol><li>A: 1000-200=800</li><li>B: 1000+200=1200</li></ol><p>原子性可以保证这两个步骤一起成功，或者一起失败，不能只发生其中一个动作。</p></blockquote><p><strong>2.一致性(Consistency)</strong></p><p>  数据库总是从一个一致性的状态转换到另外一个一致性的状态。换句话说就是一致性保证了事务在执行完前，因为事务最终没有提交，所以事务中所做的修改也不会保存到数据库中，保证数据一致性。</p><blockquote><p>还是上面的例子: A和B原来分别有1000块钱, 现在A要去银行转账两百块给B。这个过程包含两个步骤:</p><ol><li>A: 1000-200=800</li><li>B: 1000+200=1200</li></ol><p>一致性可以保证事务完成后，符合逻辑运算。</p></blockquote><p><strong>3.隔离性(Isolation)</strong></p><p>  同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</p><blockquote><p>比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p></blockquote><p><strong>4.持久性(Durability)</strong></p><p>  一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</p><blockquote><p>举例: 操作前A：800，B：200 操作后A：600，B：400<br>如果在操作前（事务还没有提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为 A：800，B：200<br>如果在操作后（事务已经提交）服务器宕机或者断电，那么重启数据库以后，数据状态应该为 A：600，B：400</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 浅识ACID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/2022/04/11/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/04/11/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h4><p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>默认MySQL的事务是自动提交的，也就是说，当执行一条DML语句，MySQL会立即隐式的提交事务。</p><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><ul><li><p>查看/设置事务提交方式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token variable">@autocommit</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token variable">@autocommit</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>提交事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>回滚事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rollback</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span> 或 <span class="token keyword">begin</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>提交事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>回滚事务</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rollback</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h4><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h4 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h4><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另外一个事务还没有提交的数据。</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了幻影 。</td></tr></tbody></table><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表查询</title>
      <link href="/2022/03/16/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/03/16/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h4><ul><li><p>概述</p><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所 以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul></li></ul><ul><li><p>一对多(多对一)</p><ul><li>案列：部门与员工的关系</li><li>关系: 一个部门对应多个员工，一个员工对应一个部门</li><li>实现: 在多的一方建立外键，指向一的一方的主键</li></ul></li><li><p>多对多</p><ul><li>案例: 学生 与 课程的关系</li><li>关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</li><li>实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</li></ul></li><li><p>一对一</p><ul><li>案例: 用户 与 用户详情的关系</li><li>关系: 一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</li><li>实现: 在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</li></ul></li></ul><h4 id="多表查询概述"><a href="#多表查询概述" class="headerlink" title="多表查询概述"></a>多表查询概述</h4><ul><li><p>概述：指从多张表中查询数据</p></li><li><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合A集合 和 B集合的所有组合情况。(在多表查询时，需要消除无效的笛卡尔积)</p></li><li><p>多表查询分类</p><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li></ul></li></ul><h4 id="连接查询-内连接"><a href="#连接查询-内连接" class="headerlink" title="连接查询-内连接"></a>连接查询-内连接</h4><p>内连接查询语法:</p><ul><li><p>隐式内连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span><span class="token punctuation">,</span> 表<span class="token number">2</span> <span class="token keyword">where</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显式内连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">inner</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 连接条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内连接查询的是两张表交集的部分</p></li></ul><h4 id="连接查询-外连接"><a href="#连接查询-外连接" class="headerlink" title="连接查询-外连接"></a>连接查询-外连接</h4><p>外连接查询语法：</p><ul><li><p>左外连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">left</span> <span class="token punctuation">[</span><span class="token keyword">outer</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于查询表1(左表)的所有数据 包含 表1和表2交集部分的数据</p></li><li><p>右外链接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">right</span> <span class="token punctuation">[</span><span class="token keyword">outer</span><span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于查询表2(右表)的所有数据 包含 表1和表2交集部分的数据</p></li></ul><h4 id="连接查询-自连接"><a href="#连接查询-自连接" class="headerlink" title="连接查询-自连接"></a>连接查询-自连接</h4><p>自连接查询语法:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表A 别名A <span class="token keyword">join</span> 表A 别名B <span class="token keyword">on</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>自连接查询，可以是内连接查询，也可以是外连接查询。</p><h4 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询-union , union all"></a>联合查询-union , union all</h4><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表A <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">union</span> <span class="token punctuation">[</span><span class="token keyword">all</span><span class="token punctuation">]</span><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表b <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。<br>union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><ul><li><p>概念：SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> column1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> column1 <span class="token keyword">from</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>子查询外部的语句可以是INSERT / UPDATE / DELETE / SELECT 的任何一个。</p></li><li><p>根据子查询结果不同，分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li> 列子查询(子查询结果为一列)</li><li>行子查询(子查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul></li><li><p> 根据子查询位置，分为：WHERE之后 、FROM之后、SELECT 之后。</p></li><li><p>标量子查询</p><p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。<br>常用的操作符：= &lt;&gt; &gt; &gt;= &lt; &lt;= </p></li><li><p>列子查询</p><p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。<br>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table></li><li><p>行子查询<br>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。<br>常用的操作符：= 、&lt;&gt; 、IN 、NOT IN</p></li><li><p>表子查询<br>子查询返回的结果是多行多列，这种子查询称为表子查询。<br>常用的操作符：IN</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 多表查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约束</title>
      <link href="/2022/03/16/%E7%BA%A6%E6%9D%9F/"/>
      <url>/2022/03/16/%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p></li><li><p>目的：保证数据库中数据的正确、有效性和完整性。</p></li><li><p>分类</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束(8.0.16版本之后)</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table></li><li><p>注意</p><p>约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。</p></li></ul><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li><p>概述</p><p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p></li><li><p>语法</p><ul><li><p>添加外键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>字段名 数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名称<span class="token punctuation">]</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主键 <span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表 <span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除外键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>删除/更新行为</p><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。 (与 RESTRICT一致)</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。 (与 NO ACTION一致)</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。</td></tr><tr><td>SET NULL</td><td>当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键列设置成一个默认的值 (Innodb不支持)</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名 <span class="token punctuation">(</span>主表字段名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2022/03/16/%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/16/%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数 是指一段可以直接被另一段程序调用的程序或代码。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 函数<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><p>MySQL中内置了很多字符串函数，常用的几个如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(S1,S2,…Sn)</td><td>字符串拼接，将S1,S2…Sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串str全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串str全部转为大写</td></tr><tr><td>LPAD(str,n,pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str,n,pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空</td></tr><tr><td>SUBSTRING(str,start,len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><p>常见的数值函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取</td></tr><tr><td>MOD(x,y)</td><td>返回x/y的值</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x,y)</td><td>求参数x的四舍五入的值，保留y位小数</td></tr></tbody></table><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p>常见的日期函数如下：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(data)</td><td>获取指定data的年份</td></tr><tr><td>MONTH(data)</td><td>获取指定data的月份</td></tr><tr><td>DAY(data)</td><td>获取指定data的日期</td></tr><tr><td>DATE_ADD(data, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和 结束时间date2之间的天数</td></tr></tbody></table><h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率。</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF (value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果val1为true返回 res1，…否则返回default默认值</td></tr><tr><td>CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td><td>如果expr的值等于val1，返回res1， 否则返回default默认值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux卸载Mysql</title>
      <link href="/2022/03/09/Linux%E5%8D%B8%E8%BD%BDMysql/"/>
      <url>/2022/03/09/Linux%E5%8D%B8%E8%BD%BDMysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux卸载Mysql"><a href="#Linux卸载Mysql" class="headerlink" title="Linux卸载Mysql"></a>Linux卸载Mysql</h3><p>停止MySQL服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询MySQL的安装文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -qa | grep -i mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220309162459794.png" alt="image-20220309162459794"></p><p>卸载上述查询出来的所有的MySQL安装包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -e bt-mysql56-5.6.50-1.el7.x86_64 --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rm -rf /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卸载Mysql </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装redis</title>
      <link href="/2022/03/04/Centos7%E5%AE%89%E8%A3%85redis/"/>
      <url>/2022/03/04/Centos7%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<h3 id="Centos7安装redis"><a href="#Centos7安装redis" class="headerlink" title="Centos7安装redis"></a>Centos7安装redis</h3><p>下载redis</p><pre class="line-numbers language-none"><code class="language-none">wget https://download.redis.io/releases/redis-6.2.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220304141111832.png" alt="image-20220304141111832"></p><p>解压到opt目录下，进入redis-6.2.6目录下，使用<code>make</code>命令加载依赖库，等待之后再执行make install。</p><pre class="line-numbers language-none"><code class="language-none">tar xf redis-6.2.6.tar.gzcd redis-6.2.6/makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220304141641527.png" alt="image-20220304141641527"></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/02/28/SQL/"/>
      <url>/2022/02/28/SQL/</url>
      
        <content type="html"><![CDATA[<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h4><ol><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>SQL语句可以使用空格/缩进来增强语句的可读性。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</p></li><li><p>注释:</p><p>单行注释：– 注释内容或#注释内容(MySQL特有)</p><p>多行注释： /* 注释内容“/</p></li></ol><h4 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h4><table><thead><tr><th>分类</th><th align="center">说明</th></tr></thead><tbody><tr><td>DDL</td><td align="center">数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td align="center">数据查询语言，用来查询数据库中的记录</td></tr><tr><td>DCL</td><td align="center">数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h4 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL 数据库操作"></a>DDL 数据库操作</h4><p>查询所有数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228201712701.png" alt="image-20220228201712701"></p><p>查询当前数据库</p><pre class="line-numbers language-none"><code class="language-none">select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228201912497.png" alt="image-20220228201912497"></p><p>创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> 字符集<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COLLATE</span> 排序规则<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228202954836.png" alt="image-20220228202954836"></p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228203031643.png" alt="image-20220228203031643"></p><p>删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\16477\AppData\Roaming\Typora\typora-user-images\image-20220228203401553.png" alt="image-20220228203401553"></p><p>使用数据库</p><pre class="line-numbers language-none"><code class="language-none">USE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228203544529.png" alt="image-20220228203544529"></p><h5 id="DDL-表操作-查询"><a href="#DDL-表操作-查询" class="headerlink" title="DDL 表操作 查询"></a>DDL 表操作 查询</h5><p>查询当前数据库所有表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询表结构</p><pre class="line-numbers language-none"><code class="language-none">DESC 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询指定表的建表语句</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228210144335.png" alt="image-20220228210144335"></p><h5 id="DDL-表操作-创建"><a href="#DDL-表操作-创建" class="headerlink" title="DDL 表操作 创建"></a>DDL 表操作 创建</h5><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE 表名(字段1 字段1类型[COMMENT 字段1注释],字段2 字段2类型[COMMENT 字段2注释],......字段n 字段n类型[COMMENT 字段n注释])[COMMENT 表注释];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[…]为可选参数，最后一个字段后面没有逗号</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228205943985.png" alt="image-20220228205943985"></p><h5 id="DDL-表操作-数据类型"><a href="#DDL-表操作-数据类型" class="headerlink" title="DDL-表操作-数据类型"></a>DDL-表操作-数据类型</h5><p>MySQL中的数据类型有很多，主要分为三类:数值类型、字符串类型、日期时间类型。</p><p>数值类型</p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1  byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2  bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3  bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4  bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8  bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4  bytes</td><td>(-3.402823466 E+38，3.402823466351  E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8  bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr></tbody></table><p>age  TINYINT UNSIGNED </p><p>score double(4, 1)</p><p>字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>char的性能高于varchar</p><p>日期时间</p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h5 id="DDL-表操作-修改"><a href="#DDL-表操作-修改" class="headerlink" title="DDL-表操作-修改"></a>DDL-表操作-修改</h5><p>添加字段</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改数据类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 新数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改字段名和字段类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220308202525181.png" alt="image-20220308202525181"></p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220308202754226.png" alt="image-20220308202754226"></p><h5 id="DDL-表操作-删除"><a href="#DDL-表操作-删除" class="headerlink" title="DDL-表操作-删除"></a>DDL-表操作-删除</h5><p>删除表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除指定表，并重新创建该表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DML-介绍"><a href="#DML-介绍" class="headerlink" title="DML 介绍"></a>DML 介绍</h4><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增删改操作。</p><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE</li><li>修改数据（UPDATE</li></ul><h5 id="DML-添加数据"><a href="#DML-添加数据" class="headerlink" title="DML-添加数据"></a>DML-添加数据</h5><ul><li><p>给指定字段添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给全部字段添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批量添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220309154605439.png" alt="image-20220309154605439"></p><h5 id="DML-修改数据"><a href="#DML-修改数据" class="headerlink" title="DML-修改数据"></a>DML-修改数据</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</li></ul><h5 id="DML-删除数据"><a href="#DML-删除数据" class="headerlink" title="DML-删除数据"></a>DML-删除数据</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</li><li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE)。</li></ul><h4 id="DQL-介绍"><a href="#DQL-介绍" class="headerlink" title="DQL-介绍"></a>DQL-介绍</h4><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录。</p><p>查询关键字：SELECT</p><h5 id="DQL-语法"><a href="#DQL-语法" class="headerlink" title="DQL-语法"></a>DQL-语法</h5><ul><li>基本查询</li><li>条件查询（WHERE）</li><li>聚合函数（count、max、min、avg、sum）</li><li> 分组查询（GROUP BY）</li><li>排序查询（ORDER BY）</li><li>分页查询（LIMIT）</li></ul><h5 id="DQL-基本查询"><a href="#DQL-基本查询" class="headerlink" title="DQL-基本查询"></a>DQL-基本查询</h5><ul><li> 查询多个字段</li></ul>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> 字段<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>设置别名</p><pre class="line-numbers language-none"><code class="language-none">SELECT 字段1 [AS 别名1], 字段2 [AS 别名2], 字段3 [AS 别名3], ... FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>去除重复记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>*号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</p><h5 id="DQL-条件查询"><a href="#DQL-条件查询" class="headerlink" title="DQL-条件查询"></a>DQL-条件查询</h5><ul><li>语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>条件</li></ul><table><thead><tr><th align="left">比较运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td></tr><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt; 或 !=</td><td align="left">不等于</td></tr><tr><td align="left">BETWEEN … AND …</td><td align="left">在某个范围之内(含最小、最大值)</td></tr><tr><td align="left">IN(…)</td><td align="left">在in之后的列表中的值，多选一</td></tr><tr><td align="left">LIKE 占位符</td><td align="left">模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td align="left">IS NULL</td><td align="left">是NULL</td></tr></tbody></table><table><thead><tr><th align="left">逻辑运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">AND 或 &amp;&amp;</td><td align="left">并且 (多个条件同时成立)</td></tr><tr><td align="left">OR 或 ||</td><td align="left">或者 (多个条件任意一个成立)</td></tr><tr><td align="left">NOT 或 !</td><td align="left">非 , 不是</td></tr></tbody></table><h5 id="DQL-聚合函数"><a href="#DQL-聚合函数" class="headerlink" title="DQL-聚合函数"></a>DQL-聚合函数</h5><ul><li><p>介绍</p><p>将一列数据作为一个整体，进行纵向计算 。</p></li><li><p>常见聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></li><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="DQL-分组查询"><a href="#DQL-分组查询" class="headerlink" title="DQL-分组查询"></a>DQL-分组查询</h5><ul><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后过滤条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>where与having区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul></li><li><p>注意</p><ul><li>执行顺序: where &gt; 聚合函数 &gt; having 。</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</li></ul></li></ul><h5 id="DQL-排序查询"><a href="#DQL-排序查询" class="headerlink" title="DQL-排序查询"></a>DQL-排序查询</h5><ul><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> 排序方式<span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>排序方式</p><ul><li>ASC：升序 (默认值)</li><li>DESC：降序</li></ul></li><li><p>注意</p><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</p></li></ul><h5 id="DQL-分页查询"><a href="#DQL-分页查询" class="headerlink" title="DQL-分页查询"></a>DQL-分页查询</h5><ul><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> 起始索引<span class="token punctuation">,</span> 查询记录数<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意</p><ul><li> 起始索引从0开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</li><li> 分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</li><li> 如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</li></ul></li></ul><h5 id="DQL-执行顺序"><a href="#DQL-执行顺序" class="headerlink" title="DQL-执行顺序"></a>DQL-执行顺序</h5><p>编写顺序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表<span class="token keyword">FROM</span> 表名列表<span class="token keyword">WHERE</span> 条件列表<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>分组字段列表<span class="token keyword">HAVING</span> 分组后条件列表<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段列表<span class="token keyword">LIMIT</span>分页参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行顺序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">FROM</span> 表名列表<span class="token keyword">WHERE</span> 条件列表<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>分组字段列表<span class="token keyword">HAVING</span> 分组后条件列表<span class="token keyword">SELECT</span> 字段列表<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序字段列表<span class="token keyword">LIMIT</span>分页参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DCL-介绍"><a href="#DCL-介绍" class="headerlink" title="DCL-介绍"></a>DCL-介绍</h4><p>DCL英文全称是Data Control Language(数据控制语言)，用来管理数据用户、控制数据库的访问权限。</p><h5 id="DCL-管理用户"><a href="#DCL-管理用户" class="headerlink" title="DCL-管理用户"></a>DCL-管理用户</h5><ul><li><p>查询用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改用户密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">WiTH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'新密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意</p><ul><li> 主机名可以使用 % 通配。</li><li>这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</li></ul></li></ul><h5 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h5><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><h5 id="DCL-权限控制-1"><a href="#DCL-权限控制-1" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h5><ul><li> 查询权限</li></ul>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>授予权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">GRANT</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">TO</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>撤销权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">REVOKE</span> 权限列表 <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">FROM</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意</p><ul><li> 多个权限之间，使用逗号分隔</li><li> 授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装mysql8.0</title>
      <link href="/2022/02/23/Centos7%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/02/23/Centos7%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Centos7安装mysql8-0"><a href="#Centos7安装mysql8-0" class="headerlink" title="Centos7安装mysql8.0"></a>Centos7安装mysql8.0</h3><h3 id="下载MySQL-安装包："><a href="#下载MySQL-安装包：" class="headerlink" title="下载MySQL 安装包："></a>下载MySQL 安装包：</h3><pre class="line-numbers language-none"><code class="language-none">wget https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装mysql 安装源：</p><pre class="line-numbers language-none"><code class="language-none">yum -y localinstall mysql80-community-release-el7-5.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在线安装MySQL"><a href="#在线安装MySQL" class="headerlink" title="在线安装MySQL"></a>在线安装MySQL</h3><pre class="line-numbers language-none"><code class="language-none">yum -y install mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223203237323.png" alt="image-20220223203237323"></p><h3 id="启动mysql-服务"><a href="#启动mysql-服务" class="headerlink" title="启动mysql 服务"></a>启动mysql 服务</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><pre class="line-numbers language-none"><code class="language-none">systemctl enable mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改root登录密码"><a href="#修改root登录密码" class="headerlink" title="修改root登录密码"></a>修改root登录密码</h2><p>mysql安装完成之后，会在/var/log/mysqld.log文件中给root生成了一个临时的默认密码。</p><pre class="line-numbers language-none"><code class="language-none">vim /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223203638341.png" alt="image-20220223203638341"></p><p>记住初始密码：</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录后，需要第一时间修改密码，但是如果是测试库的话，密码没必要设置的很复杂，就需要修改一下</p><p>永久修改validate_password 参数，修改完之后重启mysql服务</p><pre class="line-numbers language-none"><code class="language-none"># systemctl restart mysqld# vi /etc/my.cnfvalidate_password.policy=0validate_password.length=4validate_password.number_count=0validate_password.mixed_case_count=0validate_password.special_char_count=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改root用户密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER  USER  'root'@'localhost'  IDENTIFIED BY 'mysqlmysql';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223205301081.png" alt="image-20220223205301081"></p><h3 id="设置远程登录"><a href="#设置远程登录" class="headerlink" title="设置远程登录"></a>设置远程登录</h3><p>默认的root用户只能当前节点localhost访问，是无法远程访问的，我们还需要创建一个root账户，用户远程访问。</p><pre class="line-numbers language-none"><code class="language-none">create user 'root'@'%' identified by '密码';alter user 'root'@'%' identified with mysql_native_password by '密码';grant all on *.* to 'root'@'%';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223210225424.png" alt="image-20220223210225424"></p><p>MysQL客户端连接</p><pre class="line-numbers language-none"><code class="language-none">mysql [-h 127.0.0.1] [-P 3306] -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus Node Exporter TLS认证</title>
      <link href="/2022/02/22/PrometheusNodeExporterTLS%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/02/22/PrometheusNodeExporterTLS%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="Prometheus-Node-Exporter-TLS认证"><a href="#Prometheus-Node-Exporter-TLS认证" class="headerlink" title="Prometheus Node Exporter TLS认证"></a>Prometheus Node Exporter TLS认证</h3><p>Node Exporter 启动失败，日志信息如下，配置TLS认证可以解决。</p><pre class="line-numbers language-none"><code class="language-none">level=info ts=2022-02-22T12:39:11.916Z caller=tls_config.go:191 msg="TLS is disabled." http2=false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>Node Exporter v1.0.0之前的版本不支持TLS和认证，所以默认情况下是通过http暴露的/metrics，默认没有任何访问限制。对于有些环境硬性要求不允许使用http提供访问，和对安全性要求较高必须有认证的情况下，原来只能通过额外增加一层反向代理（如nginx）来解决。但给每个node_export配1个nginx，这显然这太复杂太重了。<br>从 v1.0.0版本开始实验性的支持https和基本认证。 从 Node Exporter 开始到后续其他的组件，都将支持 TLS 和 basic auth， 同时也列出了最新的安全基准（默认情况下都支持 TLS v1.2 及以上）。下面让我们来看看具体配置。</p><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><pre class="line-numbers language-none"><code class="language-none">openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -keyout node_exporter.key -out node_exporter.crt -subj "/C=CN/ST=Beijing/L=Beijing/O=test.cn/CN=localhost"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令执行完生成两个文件 node_exporter.crt  node_exporter.key。</p><h3 id="配置Node-Exporter-开启-TLS"><a href="#配置Node-Exporter-开启-TLS" class="headerlink" title="配置Node Exporter 开启 TLS"></a>配置Node Exporter 开启 TLS</h3><p>将<code>node_exporter</code> 和<code>node_exporter.crt node_exporter.key</code> 放在同一个目录。</p><p>编写配置文件，并保存为 config.yaml(文件名自定义)</p><pre class="line-numbers language-none"><code class="language-none">tls_server_config:  cert_file: node_exporter.crt  key_file: node_exporter.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用配置文件启动启动node_exporter</p><pre class="line-numbers language-none"><code class="language-none">./node_exporter --web.config=config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你看到如下日志，说明TLS已生效。</p><pre class="line-numbers language-none"><code class="language-none">level=info ts=2022-02-22T12:48:49.747Z caller=node_exporter.go:199 msg="Listening on" address=:9100level=info ts=2022-02-22T12:48:49.748Z caller=tls_config.go:224 msg="TLS is enabled." http2=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证：</p><pre class="line-numbers language-none"><code class="language-none"> # curl localhost:9100/metricsClient sent an HTTP request to an HTTPS server. # curl https://localhost:9100/metrics  curl: (60) SSL certificate problem: self signed certificateMore details here: https://curl.haxx.se/docs/sslcerts.htmlcurl failed to verify the legitimacy of the server and therefore could notestablish a secure connection to it. To learn more about this situation andhow to fix it, please visit the web page mentioned above.#### 使用-k跳过证书验证就可以获得metrics了curl  -k https://localhost:9100/metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Prometheus-配置"><a href="#Prometheus-配置" class="headerlink" title="Prometheus 配置"></a>Prometheus 配置</h3><p>在prometheus.yml文件下增加如下配置后，在Prometheus UI中应该就能看到target了。</p><pre class="line-numbers language-none"><code class="language-none">- job_name: 'node_exporter'  scheme: https  tls_config:    ca_file: node_exporter.crt  static_configs:  - targets: ['localhost:9100']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Prometheus/image-20220222214913716.png" alt="image-20220222214913716"></p><p>生成密码，如果没有htpasswd命令，Centos7 安装命令 yum install -y httpd-tools。</p><pre class="line-numbers language-none"><code class="language-none">这里我只用它来生成了密码 hash ， 没有传递用户名。# htpasswd -nBC 12 '' | tr -d ':\n'      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改node_exporter的配置文件config.yaml。</p><pre class="line-numbers language-none"><code class="language-none">tls_server_config:  cert_file: node_exporter.crt  key_file: node_exporter.keybasic_auth_users:  # 当前设置的用户名为 prometheus ， 可以设置多个  prometheus: $2y$12$CTF/pW97pUAsm2iyMn4cJeWQV9cYxWWd1Nxs23.VFmHnuub31qfRu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用配置文件启动启动node_exporter。</p><pre class="line-numbers language-none"><code class="language-none">./node_exporter --web.config=config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证，将提示401。</p><pre class="line-numbers language-none"><code class="language-none">#curl  -Ik https://localhost:9100/metricsHTTP/1.1 401 UnauthorizedContent-Type: text/plain; charset=utf-8Www-Authenticate: BasicX-Content-Type-Options: nosniffDate: Tue, 22 Feb 2022 13:56:28 GMTContent-Length: 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改Prometheus-配置"><a href="#修改Prometheus-配置" class="headerlink" title="修改Prometheus 配置"></a>修改Prometheus 配置</h4><pre class="line-numbers language-none"><code class="language-none">- job_name: 'node_exporter'  scheme: https  tls_config:    ca_file: node_exporter.crt  basic_auth:    username: prometheus    password: prometheuspassword    static_configs:  - targets: ['localhost:9100']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改配置文件后，只要让 Prometheus 重新加载配置文件即可：</p><pre class="line-numbers language-none"><code class="language-none">killall -HUP prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Prometheus Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus Node </tag>
            
            <tag> Node Exporter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25.K个一组翻转链表</title>
      <link href="/2022/01/19/25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/19/25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>219.存在重复元素II</title>
      <link href="/2022/01/19/219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/"/>
      <url>/2022/01/19/219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/</url>
      
        <content type="html"><![CDATA[<h3 id="219-存在重复元素II"><a href="#219-存在重复元素II" class="headerlink" title="219.存在重复元素II"></a>219.存在重复元素II</h3><p>给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) &lt;= k 。如果存在，返回 true ；否则，返回 false 。</p><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-none"><code class="language-none">func containsNearbyDuplicate(nums []int, k int) bool {m := map[int]int{}for i, v := range nums {if _, ok := m[v]; ok {if i - m[v] &lt;= k {return true}}m[v] = i}return false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61.旋转链表</title>
      <link href="/2022/01/18/61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/18/61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61.旋转链表"></a>61.旋转链表</h3><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p><p><a href="https://leetcode-cn.com/problems/rotate-list/">https://leetcode-cn.com/problems/rotate-list/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>当 <em>k</em>≥<em>n</em> 时，链表仅需向右移动 k mod n 次，新链表的最后一个节点为原链表的第 (n - 1) - (k \bmod n)(<em>n</em>−1)−(<em>k</em>mod<em>n</em>) 个节点（从 0 开始计数）。</p><p>计算出链表的长度n，将链表首尾相连。找到新链表的最后一个节点，将当前闭合为环的链表断开。</p><p>当链表长度不大于 1，或者 k 为 n 的倍数时，新链表将与原链表相同。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span><span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>Next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> head<span class="token punctuation">}</span>h <span class="token operator">:=</span> headn <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> h<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>h <span class="token operator">=</span> h<span class="token punctuation">.</span>Nextn<span class="token operator">++</span><span class="token punctuation">}</span>k <span class="token operator">=</span> n <span class="token operator">-</span> k<span class="token operator">%</span>n<span class="token keyword">if</span> k <span class="token operator">==</span> n <span class="token punctuation">{</span><span class="token keyword">return</span> head<span class="token punctuation">}</span>h<span class="token punctuation">.</span>Next <span class="token operator">=</span> head<span class="token keyword">for</span> k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>h <span class="token operator">=</span> h<span class="token punctuation">.</span>Nextk<span class="token operator">--</span><span class="token punctuation">}</span>ret <span class="token operator">:=</span> h<span class="token punctuation">.</span>Nexth<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token keyword">return</span> ret<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.删除链表的倒数第N个节点</title>
      <link href="/2022/01/18/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/2022/01/18/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>双指针，先让后面的指针往后遍历n步，然后两个指针同步遍历。当后面的指针到达链表尾时，前面的指针到达链表的倒数第n+1个节点，最后跳过倒数第n个节点即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>h <span class="token operator">:=</span> headl1<span class="token punctuation">,</span> l2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Next<span class="token punctuation">:</span> h<span class="token punctuation">}</span><span class="token punctuation">,</span> h<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span class="token keyword">for</span> l2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>Nextl2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>Next<span class="token punctuation">}</span>l1<span class="token punctuation">.</span>Next <span class="token operator">=</span> l1<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next<span class="token keyword">return</span> h<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>387.字符串中的第一个唯一字符</title>
      <link href="/2022/01/18/387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/01/18/387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387.字符串中的第一个唯一字符"></a>387.字符串中的第一个唯一字符</h3><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p><p><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">https://leetcode-cn.com/problems/first-unique-character-in-a-string/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        a<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> k        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>539.最小时间差</title>
      <link href="/2022/01/18/539-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
      <url>/2022/01/18/539-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="539-最小时间差"><a href="#539-最小时间差" class="headerlink" title="539.最小时间差"></a>539.最小时间差</h3><p>给定一个 24 小时制（小时:分钟 “HH:MM”）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。如果 timePoints 的长度超过 14401440，那么必然会有两个相同的时间，此时可以直接返回 0。</p><p><a href="https://leetcode-cn.com/problems/minimum-time-difference/">https://leetcode-cn.com/problems/minimum-time-difference/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>将时间排序，比较相邻时间分钟差。根据题意，一共有 24 \times 60=144024×60=1440 种不同的时间。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span>timePoints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1440</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">)</span>    <span class="token comment">//将时间从小到大排序</span>ans <span class="token operator">:=</span> math<span class="token punctuation">.</span>MaxInt32t1 <span class="token operator">:=</span> <span class="token function">timeToInt</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//t1存储最小的时间</span>t2 <span class="token operator">:=</span> t1<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> timePoints<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>t <span class="token operator">:=</span> <span class="token function">timeToInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t <span class="token operator">-</span> t2<span class="token punctuation">)</span>t2 <span class="token operator">=</span> t<span class="token punctuation">}</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t1 <span class="token operator">+</span> <span class="token number">1440</span> <span class="token operator">-</span> t2<span class="token punctuation">)</span>   <span class="token comment">//比较首尾时间</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">timeToInt</span><span class="token punctuation">(</span>t <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span>  <span class="token comment">//将时间分钟数表示</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token punctuation">{</span><span class="token keyword">return</span> y<span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1220.统计元音字母序列的数目</title>
      <link href="/2022/01/17/1220-%E7%BB%9F%E8%AE%A1%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
      <url>/2022/01/17/1220-%E7%BB%9F%E8%AE%A1%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1220-统计元音字母序列的数目"><a href="#1220-统计元音字母序列的数目" class="headerlink" title="1220.统计元音字母序列的数目"></a>1220.统计元音字母序列的数目</h3><p>给你一个整数 n，请你帮忙统计一下我们可以按下述规则形成多少个长度为 n 的字符串：</p><p>字符串中的每个字符都应当是小写元音字母（’a’, ‘e’, ‘i’, ‘o’, ‘u’）<br>每个元音 ‘a’ 后面都只能跟着 ‘e’<br>每个元音 ‘e’ 后面只能跟着 ‘a’ 或者是 ‘i’<br>每个元音 ‘i’ 后面 不能 再跟着另一个 ‘i’<br>每个元音 ‘o’ 后面只能跟着 ‘i’ 或者是 ‘u’<br>每个元音 ‘u’ 后面只能跟着 ‘a’<br>由于答案可能会很大，所以请你返回 模 10^9 + 7 之后的结果。</p><p><a href="https://leetcode-cn.com/problems/count-vowels-permutation/">https://leetcode-cn.com/problems/count-vowels-permutation/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">countVowelPermutation</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>dp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> mod <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> <span class="token comment">// a 前面可以为 e,u,i</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>         <span class="token comment">// e 前面可以为 a,i</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>         <span class="token comment">// i 前面可以为 e,o</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token comment">// o 前面可以为 i</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>         <span class="token comment">// u 前面可以为 i,o</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus+Grafana监控</title>
      <link href="/2022/01/16/Prometheus-Grafana%E7%9B%91%E6%8E%A7/"/>
      <url>/2022/01/16/Prometheus-Grafana%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus-Grafana监控"><a href="#Prometheus-Grafana监控" class="headerlink" title="Prometheus+Grafana监控"></a>Prometheus+Grafana监控</h2><h3 id="第1章-Prometheus-入门"><a href="#第1章-Prometheus-入门" class="headerlink" title="第1章 Prometheus 入门"></a>第1章 Prometheus 入门</h3><p>Prometheus 受启发于 Google 的Brogmon 监控系统（相似的 Kubernetes 是从 Google的 Brog 系统演变而来），从 2012 年开始由前 Google 工程师在 Soundcloud 以开源软件的形式进行研发，并且于 2015 年早期对外发布早期版本。</p><p>2016 年 5 月继 Kubernetes 之后成为第二个正式加入 CNCF 基金会的项目，同年 6 月正式发布 1.0 版本。2017 年底发布了基于全新存储层的 2.0 版本，能更好地与容器平台、云平台配合。</p><p>Prometheus 作为新一代的云原生监控系统，目前已经有超过 650+位贡献者参与到Prometheus 的研发工作上，并且超过 120+项的第三方集成。</p><h4 id="1-1-Prometheus-的特点"><a href="#1-1-Prometheus-的特点" class="headerlink" title="1.1 Prometheus 的特点"></a>1.1 Prometheus 的特点</h4><p>Prometheus 是一个开源的完整监控解决方案，其对传统监控系统的测试和告警模型进行了彻底的颠覆，形成了基于中央化的规则计算、统一分析和告警的新模型。 相比于传统监控系统，Prometheus 具有以下优点：</p><h4 id="1-1-1-易于管理"><a href="#1-1-1-易于管理" class="headerlink" title="1.1.1 易于管理"></a>1.1.1 易于管理</h4><p>➢ Prometheus 核心部分只有一个单独的二进制文件，不存在任何的第三方依赖(数据库，缓存等等)。唯一需要的就是本地磁盘，因此不会有潜在级联故障的风险。</p><p>➢ Prometheus 基于 Pull 模型的架构方式，可以在任何地方（本地电脑，开发环境，测试环境）搭建我们的监控系统。</p><p>➢ 对于一些复杂的情况，还可以使用 Prometheus 服务发现(Service Discovery)的能力动态管理监控目标。</p><h4 id="1-1-2-监控服务的内部运行状态"><a href="#1-1-2-监控服务的内部运行状态" class="headerlink" title="1.1.2 监控服务的内部运行状态"></a>1.1.2 监控服务的内部运行状态</h4><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Prometheus/20220116203512.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer52.两个链表的第一个公共节点</title>
      <link href="/2022/01/15/%E5%89%91%E6%8C%87Offer52-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/"/>
      <url>/2022/01/15/%E5%89%91%E6%8C%87Offer52-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指Offer52-两个链表的第一个公共节点"><a href="#剑指Offer52-两个链表的第一个公共节点" class="headerlink" title="剑指Offer52.两个链表的第一个公共节点"></a>剑指Offer52.两个链表的第一个公共节点</h3><p>输入两个链表，找出它们的第一个公共节点。</p><p><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>func getIntersectionNode(headA, headB *ListNode) *ListNode {</p><p>  if headA == nil || headB == nil {</p><p>​    return nil</p><p>  }</p><p>  a, b := headA, headB</p><p>  for a != b {</p><p>​    if a == nil {</p><p>​      a = headB</p><p>​    } else {</p><p>​      a = a.Next</p><p>​    }</p><p>​    if b == nil {</p><p>​      b = headA</p><p>​    } else {</p><p>​      b = b.Next</p><p>​    }</p><p>  }</p><p>  return a </p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1716.计算力扣银行的钱</title>
      <link href="/2022/01/15/1716-%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1/"/>
      <url>/2022/01/15/1716-%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="1716-计算力扣银行的钱"><a href="#1716-计算力扣银行的钱" class="headerlink" title="1716.计算力扣银行的钱"></a>1716.计算力扣银行的钱</h3><p>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</p><p>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</p><p>给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</p><p><a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">totalMoney</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>k <span class="token operator">:=</span> <span class="token number">21</span>i <span class="token operator">:=</span> n <span class="token operator">/</span> <span class="token number">7</span>sum <span class="token operator">:=</span> i <span class="token operator">*</span> ksum <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">if</span> x <span class="token operator">:=</span> n <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>y <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> yy<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> sum<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer II 034. 外星语言是否排序</title>
      <link href="/2022/01/13/%E5%89%91%E6%8C%87OfferII034-%E5%A4%96%E6%98%9F%E8%AF%AD%E8%A8%80%E6%98%AF%E5%90%A6%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/01/13/%E5%89%91%E6%8C%87OfferII034-%E5%A4%96%E6%98%9F%E8%AF%AD%E8%A8%80%E6%98%AF%E5%90%A6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-II-034-外星语言是否排序"><a href="#剑指-Offer-II-034-外星语言是否排序" class="headerlink" title="剑指 Offer II 034. 外星语言是否排序"></a>剑指 Offer II 034. 外星语言是否排序</h3><p><a href="https://leetcode-cn.com/problems/lwyVBB/">https://leetcode-cn.com/problems/lwyVBB/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isAlienSorted</span><span class="token punctuation">(</span>words <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> order <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint8</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>m<span class="token punctuation">[</span>order<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">}</span>n <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>str1<span class="token punctuation">,</span> str2 <span class="token operator">:=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> m<span class="token punctuation">[</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> m<span class="token punctuation">[</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> m<span class="token punctuation">[</span>str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token punctuation">{</span><span class="token keyword">return</span> y<span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>747.至少是其他数字两倍的最大数</title>
      <link href="/2022/01/13/747-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
      <url>/2022/01/13/747-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="747-至少是其他数字两倍的最大数"><a href="#747-至少是其他数字两倍的最大数" class="headerlink" title="747.至少是其他数字两倍的最大数"></a>747.至少是其他数字两倍的最大数</h3><p>给你一个整数数组 nums ，其中总是存在 唯一的 一个最大整数 。</p><p>请你找出数组中的最大元素并检查它是否 至少是数组中每个其他数字的两倍 。如果是，则返回 最大元素的下标 ，否则返回 -1 。</p><p><a href="https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/">https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>遍历数组分别找到数组的最大值 max1 和次大值 max2 。如果 max1 ≥ max2 × 2 成立，则最大值至少是数组其余数字的两倍，此时返回最大值的下标，否则返回 -1−1。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">dominantIndex</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>max1<span class="token punctuation">,</span> max2<span class="token punctuation">,</span> k <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span><span class="token keyword">if</span> num <span class="token operator">&gt;</span> max1 <span class="token punctuation">{</span> max1<span class="token punctuation">,</span> max2<span class="token punctuation">,</span> k <span class="token operator">=</span> num<span class="token punctuation">,</span> max1<span class="token punctuation">,</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&gt;</span> max2<span class="token punctuation">{</span>max2 <span class="token operator">=</span> num<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> max1 <span class="token operator">&gt;=</span> max2 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">{</span><span class="token keyword">return</span> k<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>334.递增的三元子序列</title>
      <link href="/2022/01/12/334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2022/01/12/334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="334-递增的三元子序列"><a href="#334-递增的三元子序列" class="headerlink" title="334.递增的三元子序列"></a>334.递增的三元子序列</h3><p>给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。</p><p>如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true ；否则，返回 false 。</p><p><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">334.递增的三元子序列</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果数组 nums 中存在一个下标  i  满足 1≤ i &lt; n − 1，使得在 nums[i]  的左边存在一个元素小于   nums[i] 且在 nums[i]  的右边存在一个元素大于 nums[i]，则数组 nums 中存在递增的三元子序列。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-none"><code class="language-none">func increasingTriplet(nums []int) bool {   n := len(nums)   max := make([]int, n)   min := make([]int, n)   min[0] = nums[0]   for i := 1; i &lt; n; i++ {      min[i] = Min(nums[i], min[i-1])   }   max[n-1] = nums[n-1]   for i := n - 2; i &gt; 0; i-- {      max[i] = Max(nums[i], max[i+1])   }   n -= 1   for i := 1; i &lt; n; i++ {      if nums[i] &gt; min[i-1] &amp;&amp; nums[i] &lt; max[i+1] {         return true      }   }   return false}func Max(x, y int) int {   if x &gt; y {      return x   } else {      return y   }}func Min(x, y int) int {   if x &gt; y {      return x   } else {      return y   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>278.第一个错误的版本</title>
      <link href="/2022/01/11/278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/"/>
      <url>/2022/01/11/278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278.第一个错误的版本"></a>278.第一个错误的版本</h3><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p><a href="https://leetcode-cn.com/problems/first-bad-version/">https://leetcode-cn.com/problems/first-bad-version/</a></p><h3 id="思路及算法"><a href="#思路及算法" class="headerlink" title="思路及算法"></a>思路及算法</h3><p>二分查找</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    r<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> n    mid <span class="token operator">:=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">for</span> r <span class="token operator">&lt;</span> l <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l <span class="token operator">=</span> mid        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            r <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">isBadVersion</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>794.有效的井字游戏</title>
      <link href="/2021/12/10/794-%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
      <url>/2021/12/10/794-%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">validTicTacToe</span><span class="token punctuation">(</span>board <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">var</span> player1<span class="token punctuation">,</span> player2 <span class="token builtin">int</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> board <span class="token punctuation">{</span>player1<span class="token operator">+=</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">)</span>        player2<span class="token operator">+=</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> player1 <span class="token operator">&lt;</span> player2 <span class="token operator">||</span> player1 <span class="token operator">-</span> player2 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>sum1 <span class="token operator">:=</span> <span class="token number">0</span>sum2 <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>  board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>  board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> sum1 <span class="token operator">==</span> sum2 <span class="token punctuation">{</span><span class="token keyword">if</span> sum1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">if</span> player1 <span class="token operator">&gt;</span> player2 <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">if</span> player1 <span class="token operator">==</span> player2 <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性hash算法</title>
      <link href="/2021/12/05/hash/"/>
      <url>/2021/12/05/hash/</url>
      
        <content type="html"><![CDATA[<h1 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h1><h3 id="分布式缓存应用场景"><a href="#分布式缓存应用场景" class="headerlink" title="分布式缓存应用场景"></a>分布式缓存应用场景</h3><p>假设我们有3台缓存服务器，服务器编号分别为S0、S1、S2，同时我们有3万张图片需要缓存，最好这些图片能均匀的缓存到服务器上，这样能够分担缓存的压力。那么应该如何实现这个功能。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205201655.png"></p><p>简单的做法是对缓存上的key进行hash计算，hash后的值是一个整数，再用缓存服务器的数量对这个数进行取模计算，用取模产生的余数来决定数据应该缓存到哪一台服务器上。</p><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>假设我们使用图片名称作为访问缓存的key，那么我们可以把计算过程写成公式。首先对图片名称进行hash计算再用机器数取模得到余数。这里我们有3台服务器，使用hash值得到的数字再用3取模，取模之后对应3个数字0、1、2正好与服务器编号对应，假设某张图片对应的hash值为6,对3取模，取模的结果为0，我们就把图片缓存到S0服务器上。因为对同一张图片的名称进行hash运算得到的值是不变的，所以需要访问图片的时候，只要再次对图片进行hash值计算和取模计算，我们就能知道图片存放在那台服务器上，只要到这台服务器上查找图片就行。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205203024.png" alt="img"></p><p>通过这种方法我们就可以将3万张图片分布到3台缓存服务器上，下次访问某张图片时，能够直接计算出图片缓存在哪台服务器上，这样就可以满足我们的需求，这种算法也被称为hash算法 。</p><p>但是hash算法有一个缺陷，假如现在要往缓存服务器集群增加一台服务器，缓存服务器的数量由3台增加到了4台，这个时候要计算图片存在哪台缓存服务器时，先对图片名称进行hash值计算得到被取余数，但是取余数由3变成了4，在被取余数不变的情况下，余数不同，那么访问这张图片的服务器的编号就会改变，之前6%3=0,现在6%4=2，程序会在S2服务器上找图片，但是我们知道图片是存放在S0上面的所以是读取不到图片的。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205204002.png" alt="img"></p><p>由于缓存服务器数量发生变化导致不能正常访问缓存数据，而程序在无法访问缓存数据时，就会向后端服务器请求数据，由于大量缓存在同一时间失效，造成缓存雪崩，缓存服务器无法起到承担缓存压力的作用，压力就转到后端服务器，整个系统很有可能被压垮，为了避免这种问题，就需要使用一致性hash算法。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205204350.png" alt="img"></p><h3 id="一致性hash算法-1"><a href="#一致性hash算法-1" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><p>我们先来看一下一致性hash算法的原理， 先想象一个2^32的圆，这个圆由2^32个点组成，这个圆环被称为hash环。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205204745.png" alt="img"></p><p>假设我们还是有3台缓存服务器，服务器编号分别是A，B，C。我们用他们各自的hash编号进行hash计算，然后将hash后的结果用2^32取模，算出来的结果一定是在0-2^32-1之间的整数，我们就用对服务器A算出来的整数来代表服务器A，hash环上必定有一个点与这个整数对应，这样就可以把服务器A映射到这个环上，用同样的方法可以将服务器A，B映射到这个环上，这样就可以把缓存服务器都映射到这个环上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205205358.png" alt="img"></p><p>对于需要缓存的记录我们以同样的方法将被缓存的对象映射到hash环上。假设我们需要缓存图片a.jpg，我们使用图片的名称作为找到图片的key，那么我们就可以以相同的公式将图片映射到上面的hash环上，现在缓存服务器与图片都被映射到hash环上了。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205205800.png" alt="img"></p><p>现在要确定图片到底缓存在哪个服务器上，其实很简单，只需要从图片的位置开始，沿顺时针方向查找，遇到的第一个服务器就是数据缓存的服务器，假设要3张图片a,b,c需要缓存。a图片会被缓存到服务器B上，b图片会被缓存到服务器C上,c图片会被缓存到服务器A上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205210216.png" alt="img"></p><p>由于被缓存对象与服务器hash后的值是固定的，所以在服务器不变的情况下，在想要访问这张图片时，只要进行相同的hash计算，就可以计算出这张图片被缓存在哪台服务器下，直接去对应服务器上查找图片即可。</p><p>现在来看看一致性hash算法能不能解决hash算法的问题，hash算法执行简单的对服务器数量进行取模时，如果服务器数量发生变化，就会导致大量缓存失效，产生缓存雪崩。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205210919.png" alt="img"></p><p>我们使用一致性hash算法来模拟一遍，假设增加了一台服务器D，按照一致性hash算法的规则，先将服务器D映射到hash环上，这样一部分图片沿顺时针遇到的第一台缓存服务器就由服务器A变成了服务器D。也就是说如果增加了一台服务器，会导致一小部分图片无法访问，但是大部分图片仍可以正常访问，这就是一致性hash算法的优点。</p><p>一致性hash算法的优点，缓存服务器的数量发生了改变，并不是所有的缓存失效，而是只有部分缓存失效，缓存仍然能够分担整个系统大部分的压力，而不是所有压力在同一时间集中到后端服务器上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205211536.png" alt="img"></p><h3 id="hash偏斜"><a href="#hash偏斜" class="headerlink" title="hash偏斜"></a>hash偏斜</h3><p>在介绍一致性hash的原理时，我们理想化的认为3台服务器均匀的映射到了hash环上，但是在实际的映射中，服务器映射到hash环上很有可能是斜的，这种情况称为hash环的偏斜，hash环偏斜的情况下，大部分的缓存对象很有可能缓存到一台服务器上，导致缓存分布极度不均匀，3台服务器没有被平均使用。如果缓存数据较多的服务器出现故障，由于失效的缓存太多，在极端的情况下，很有可能引起系统故障。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205212235.png" alt="img"></p><p>要想均匀的将缓存分布到服务器上，最好是能让服务器尽量多，这样才能出现在hash环上。具体的实行方式是增加一层虚拟节点，这里真是的服务器资源只有3台，但是根据现有的物理节点，映射出很多虚拟节点。对于服务器A，我们可以映射出A1，A2……An。再将这些虚拟结点加入hash环，引入虚拟节点之后，虚拟节点越多，hash环上的服务器结点就越多，缓存被均匀分布的概率就越大，这样就可以一定程度上减少hash环偏斜带来的影响。</p><p>具体在缓存读写时，可以先找到缓存对应的虚拟节点，然后虚拟节点再找到自己的真实节点，再进行缓存数据的读写。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205212655.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> hash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/11/18/Docker/"/>
      <url>/2021/11/18/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-配置虚拟机IP"><a href="#1-配置虚拟机IP" class="headerlink" title="1.配置虚拟机IP"></a>1.配置虚拟机IP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编辑网络配置文件[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33TYPE=Ethernet# 静态IPBOOTPROTO=staticNAME=ens33DEVICE=ens33# 开机自启ONBOOT=yes# IP地址IPADDR=192.168.1.202# 子网掩码NETMASK=255.255.255.0# 网关GATEWAY=192.168.1.1# DNSDNS1=114.114.114.114DNS2=1.2.4.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023155716216.png" alt="image-20211023155716216"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 重启网卡[root@localhost ~]# systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-安装Docker引擎"><a href="#2-安装Docker引擎" class="headerlink" title="2.安装Docker引擎"></a>2.安装Docker引擎</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# sudo yum install -y yum-utils# 安装yum-utils包# 设置仓库地址-阿里云[root@localhost ~]# sudo yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 安装docker引擎[root@localhost ~]# sudo yum install docker-ce docker-ce-cli containerd.io# 启动docker[root@localhost ~]# sudo systemctl start docker# 查看docker版本[root@localhost ~]# docker -vDocker version 20.10.9, build c2ea9bc# 通过run hello-world 验证 Docker Engine 是否已正确安装。[root@localhost ~]# sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023163223998.png" alt="image-20211023163223998"></p><h2 id="3-Doker的启动与停止命令"><a href="#3-Doker的启动与停止命令" class="headerlink" title="3.Doker的启动与停止命令"></a>3.Doker的启动与停止命令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# sudo systemctl start docker# 启动docker[root@localhost ~]# sudo systemctl stop docker# 停止docker[root@localhost ~]# sudo systemctl restart docker# 重启docker[root@localhost ~]# sudo systemctl enable docker# 设置开机自启docker[root@localhost ~]# sudo systemctl status docker# 查看docker状态[root@localhost ~]# sudo docker info# 查看docker的概要信息[root@localhost ~]# sudo docker --help# 查看docker的帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-配置镜像加速"><a href="#4-配置镜像加速" class="headerlink" title="4.配置镜像加速"></a>4.配置镜像加速</h2><blockquote><p>Docker 从 Docker Hub 拉取镜像，因为是从国外获取，所以速度较慢<br>可以通过配置国内镜像源的方式，从国内获取镜像，提高拉取速度。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编辑文件vim /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023164554380.png" alt="image-20211023164554380"></p><p>设置163和中国科技大学的镜像</p><ul><li><p>重新加载配置信息及重启docker服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 重新加载文件[root@localhost ~]# sudo systemctl daemon-reload# 重启docker[root@localhost ~]# sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-镜像相关命令"><a href="#5-镜像相关命令" class="headerlink" title="5.镜像相关命令"></a>5.镜像相关命令</h2><h3 id="1-查看镜像"><a href="#1-查看镜像" class="headerlink" title="1.查看镜像"></a>1.查看镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>REPOSITORY</strong> : 镜像在仓库中的名称</p></li><li><p><strong>TAG</strong>：镜像标签，latest代表最新版本</p></li><li><p><strong>IMAGE ID</strong>：镜像ID</p></li><li><p><strong>CREATED</strong>：镜像创建的日期</p></li><li><p><strong>SIZE</strong>：镜像大小</p><p>这些镜像都是存储在宿主机**/etc/lib/docker**目录下的</p></li></ul><h3 id="3-搜索镜像"><a href="#3-搜索镜像" class="headerlink" title="3.搜索镜像"></a>3.搜索镜像</h3><p>语法:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker search redis# 搜索名为redis的镜像NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDredis                            Redis is an open source key-value store that…   10076     [OK]       sameersbn/redis                                                                  83                   [OK]grokzen/redis-cluster            Redis cluster 3.0, 3.2, 4.0, 5.0, 6.0, 6.2      79                   rediscommander/redis-commander   Alpine image for redis-commander - Redis man…   66                   [OK]redislabs/redisearch             Redis With the RedisSearch module pre-loaded…   40                   redislabs/redisinsight           RedisInsight - The GUI for Redis                35                   oliver006/redis_exporter          Prometheus Exporter for Redis Metrics. Supp…   31                   redislabs/redis                  Clustered in-memory database engine compatib…   31                   redislabs/rejson                 RedisJSON - Enhanced JSON data type processi…   29                   arm32v7/redis                    Redis is an open source key-value store that…   25                   redislabs/redisgraph             A graph database module for Redis               16                   [OK]arm64v8/redis                    Redis is an open source key-value store that…   16                   redislabs/rebloom                A probablistic datatypes module for Redis       16                   [OK]redislabs/redismod               An automated build of redismod - latest Redi…   15                   [OK]webhippie/redis                  Docker image for redis                          11                   [OK]redislabs/redistimeseries        A time series database module for Redis         10                   s7anley/redis-sentinel-docker    Redis Sentinel                                  10                   [OK]insready/redis-stat              Docker image for the real-time Redis monitor…   10                   [OK]goodsmileduck/redis-cli          redis-cli on alpine                             9                    [OK]centos/redis-32-centos7          Redis in-memory data structure store, used a…   5                    clearlinux/redis                 Redis key-value data structure server with t…   3                    wodby/redis                      Redis container image with orchestration        1                    [OK]tiredofit/redis                  Redis Server w/ Zabbix monitoring and S6 Ove…   1                    [OK]xetamus/redis-resource           forked redis-resource                           0                    [OK]centos/redis-5-centos7           Redis in-memory data structure store, used a…   0                    [root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-拉取镜像"><a href="#4-拉取镜像" class="headerlink" title="4.拉取镜像"></a>4.拉取镜像</h3><pre><code>语法：</code></pre><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>假如我们要拉去centos镜像到本地，如果不声明镜像TAG标签信息则默认拉取latest版本，也可以通过hub.docker.com搜索该镜像，查看支持的TAG信息。</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull redisUsing default tag: latestlatest: Pulling from library/redis7d63c13d9b9b: Pull complete a2c3b174c5ad: Pull complete 283a10257b0f: Pull complete 7a08c63a873a: Pull complete 0531663a7f55: Pull complete 9bf50efb265c: Pull complete Digest: sha256:a89cb097693dd354de598d279c304a1c73ee550fbfff6d9ee515568e0c749cfeStatus: Downloaded newer image for redis:latestdocker.io/library/redis:latest[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEredis         latest    7faaec683238   12 days ago   113MBhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# docker pull redis:55: Pulling from library/redis7d63c13d9b9b: Already exists a2c3b174c5ad: Already exists 283a10257b0f: Already exists 54ac4e97e390: Pull complete 0d3ede1e63a5: Pull complete 878bf2d7168d: Pull complete Digest: sha256:8217ee751b6a72bc4b3ef757c18aa9619e939d5073d5a26ce2074905385000b0Status: Downloaded newer image for redis:5docker.io/library/redis:5[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEredis         5         02fee89f17ad   12 days ago   110MBredis         latest    7faaec683238   12 days ago   113MBhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5.删除镜像"></a>5.删除镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rmi 镜像名/镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker rmi redisUntagged: redis:latestUntagged: redis@sha256:a89cb097693dd354de598d279c304a1c73ee550fbfff6d9ee515568e0c749cfeDeleted: sha256:7faaec68323851b2265bddb239bd9476c7d4e4335e9fd88cbfcc1df374dded2fDeleted: sha256:e6deb90762475cda72e21895911f830ed99fd1cc6d920d92873270be91235274Deleted: sha256:2649acad13241d9c8d81e49357bc66cce459b352ded7f423d70ede7bd3bb7b89Deleted: sha256:64007bba5fc220df4d3da33cecdc2d55dd6a73528c138b0fa1acd79fd6a9c217[root@localhost ~]# docker rmi redis:5Untagged: redis:5Untagged: redis@sha256:8217ee751b6a72bc4b3ef757c18aa9619e939d5073d5a26ce2074905385000b0Deleted: sha256:02fee89f17adc8213b560b929d5ac585137612651f8eeb26423aadfe39dc3847Deleted: sha256:f92e4de257018a916bd0715da7b1dd39a3540fa393799c2219a82f0ce99d57e2Deleted: sha256:b13f2ab83d74b48551107876f35dcdaa7197a557fd4769cd4bfeb56bc4f031b6Deleted: sha256:58ca4126d8128345fc58de904cb9029f2a1deb1f88b1fa0ac3f3f0e707f099b9Deleted: sha256:b2cc2f1bf8b1cca8ba7c19e1697f7b73755903ad8f880b83673fd6a697aca935Deleted: sha256:fbd1283ab782925be4d990bd4bebe9ad5e5cf9a525abfb6fa87465e072da9d31Deleted: sha256:e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-容器相关命令"><a href="#6-容器相关命令" class="headerlink" title="6.容器相关命令"></a>6.容器相关命令</h2><h3 id="1-查看容器"><a href="#1-查看容器" class="headerlink" title="1.查看容器"></a>1.查看容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>CONTAINER</strong> ID：容器ID</li><li><strong>IMAGE</strong>：所属镜像</li><li><strong>COMMAND</strong>：</li><li><strong>CREATED</strong>：创建时间</li><li><strong>STATUS</strong>：状态</li><li><strong>PORTS</strong>：端口</li><li><strong>NAMES</strong>：容器名称</li></ul><pre><code>查看所有容器(停止和运行)</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -aCONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMESa08d44d00165   hello-world   "/hello"   27 hours ago   Exited (0) 27 hours ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>查看停止运行的容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -f status=exitedCONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMESa08d44d00165   hello-world   "/hello"   27 hours ago   Exited (0) 27 hours ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>查看最后一次运行的容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -lCONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMESa08d44d00165   hello-world   "/hello"   2 days ago   Exited (0) 2 days ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>列出最近创建的n个容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -n 2CONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMESa08d44d00165   hello-world   "/hello"   2 days ago   Exited (0) 2 days ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建与启动容器"><a href="#2-创建与启动容器" class="headerlink" title="2.创建与启动容器"></a>2.创建与启动容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>-i：表示运行的容器</p></li><li><p>-t ：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登陆进去。即分配一个伪终端。</p></li><li><p>–name：为创建的容器命名。</p></li><li><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p></li><li><p>-d：在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后就不会自动登录容器，如果只加-i -t两个参数，创建容器后就会自动进容器里）。</p></li><li><p>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。</p></li><li><p>-P：随机使用宿主机的可用端口与容器暴露的端口映射。</p><p>  创建容器并进入</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run --name mynginx -P nginx# 创建一个nginx容器，自定义名称为mynginx,将nginx的端口随机映射到宿主机端口[root@localhost ~]# docker ps# 查看正在运行的容器，发现nginx映射到了宿主机的49153端口CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                     NAMES12c76efcc8f7   nginx     "/docker-entrypoint.…"   48 seconds ago   Up 47 seconds   0.0.0.0:49153-&gt;80/tcp, :::49153-&gt;80/tcp   mynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>守护方式创建容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run -di --name mynginx -p 80:80 nginxa0a190090a232b9d3ed1a0882d77088c198d710b129ec764d9b66cedc960f096[root@localhost ~]# [root@localhost ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMESa0a190090a23   nginx     "/docker-entrypoint.…"   11 seconds ago   Up 11 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   mynginx[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>登录到守护方式创建的容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker exec -it mynginx /bin/bashroot@a0a190090a23:/#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>启动与停止容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker start mynginxmynginx[root@localhost ~]# docker stop mynginxmynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker rm 12c76efcc8f7# 删除id为12c76efcc8f7的容器12c76efcc8f7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-文件拷贝"><a href="#3-文件拷贝" class="headerlink" title="3.文件拷贝"></a>3.文件拷贝</h3><pre><code>宿主机拷贝到容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker cp 需要拷贝的文件或目录 容器名称:容器目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>例：将宿主机中的test.py文件拷贝到mynginx容器中的/root目录下</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# vi test.py[root@localhost ~]# docker cp test.py mynginx:/rootCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                               NAMESa0a190090a23   nginx     "/docker-entrypoint.…"   10 minutes ago   Up 3 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   mynginx[root@localhost ~]# docker exec -it mynginx /bin/bashroot@a0a190090a23:/# ls /root/test.pyroot@a0a190090a23:/# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>容器拷贝到宿主机</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker cp 容器名称:容器目录 需要拷贝的文件或目录 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>例：</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@a0a190090a23:~# touch test.txtroot@a0a190090a23:~# exitexit[root@localhost ~]# docker cp mynginx:/root/test.txt ./[root@localhost ~]# lsanaconda-ks.cfg  index.txt  test.py  test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-目录挂载"><a href="#7-目录挂载" class="headerlink" title="7.目录挂载"></a>7.目录挂载</h2><h3 id="1-指定目录挂载"><a href="#1-指定目录挂载" class="headerlink" title="1.指定目录挂载"></a>1.指定目录挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个nginx容器，端口映射为81端口，宿主机的/root/mynginx_02映射到容器的/root/mynginx_02目录# 此时，修改宿主机的/root/mynginx_02同时会修改容器的/root/mynginx_02[root@localhost ~]# docker run -di --name nginx02 -p 81:80 -v /root/mynginx_02/:/root/mynginx_02 nginx64e80e6ff89ecefea568b317690baa8c9072c270a480db3c749d0ebc07202616<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>查看某个容器的详细信息</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost mynginx_02]# docker inspect nginx02# 查看nginx02的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-匿名挂载"><a href="#2-匿名挂载" class="headerlink" title="2.匿名挂载"></a>2.匿名挂载</h3><blockquote><p>匿名挂载就是在宿主机中生成的目录名称是随机命名的</p></blockquote><pre><code>匿名挂载只需要写容器的目录即可，容器外对应的目录会在/var/lib/docker/volume中生成。</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 匿名挂载docker run -di -v /usr/local/data --name centos7-02 centos:7 # 查看volume数据卷信息docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>例:</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 匿名挂载目录[root@localhost ~]# docker run -di -v /usr/local/data --name centos7-02 centos:7 59778edd9a81bc5c5dcd24799429c05fec27e8d6042c88735f23d301f78a80c1# 查看生成的数据卷信息[root@localhost ~]# ls /var/lib/docker/volumes/backingFsBlockDev  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db# 进入容器的/usr/local/data目录随意创建一个文件[root@localhost ~]# docker exec -it centos7-02 /bin/bash[root@59778edd9a81 /]# cd /usr/local/data/[root@59778edd9a81 data]# ls[root@59778edd9a81 data]# touch test.txt      # 在宿主机中查看容器对应的目录[root@localhost ~]# cd /var/lib/docker/volumes/backingFsBlockDev                                                 metadata.dbe83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54/ [root@localhost ~]# cd /var/lib/docker/volumes/e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95[root@localhost e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54]# ls_data[root@localhost e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54]# cd _data/# 发现宿主机此目录下同容器一样，有刚创建的test.txt文件[root@localhost _data]# lstest.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-具名挂载"><a href="#3-具名挂载" class="headerlink" title="3.具名挂载"></a>3.具名挂载</h3><blockquote><p>具名挂载就是在宿主机中生成的目录名称是我们指定的名称</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个nginx容器，指定宿主机目录为docker_nginx_data,容器中对应的目录为/usr/local/data,[root@localhost volumes]# docker run -di -v docker_nginx_data:/usr/local/data --name nginx06 nginxe832041a8a3804f68204b8740c8addb8865df7ae8bec9b477ab851d0b1671c83# 查看宿主机生成的新目录，发现有了docker_nginx_data[root@localhost volumes]# ls /var/lib/docker/volumes/backingFsBlockDev  docker_nginx_data  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数据卷只读"><a href="#4-数据卷只读" class="headerlink" title="4.数据卷只读"></a>4.数据卷只读</h3><blockquote><p>数据卷只读就是挂载到容器中目录，容器只有读取权限。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost volumes]# docker run -di --name nginx07 -P -v /nginx07:/nginx07:ro nginx8ca4534cb21f57ff7d7a4fe2d6caa4caa25f604132982072c8664db1289c43d0# 发现在var/lib/docker/volumes/目录中不会有目录生成，新目录生成在宿主机的/nginx07[root@localhost volumes]# ls /var/lib/docker/volumes/backingFsBlockDev  docker_nginx_data  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db# 此时想在容器中创建文件就会报错root@8ca4534cb21f:/nginx07# touch 123touch: cannot touch '123': Read-only file system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-volume-form继承"><a href="#5-volume-form继承" class="headerlink" title="5.volume-form继承"></a>5.volume-form继承</h3><blockquote><p>一个容器继承领另一个容器挂载的地址</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个新的容器nginx09，继承nginx07挂载的地址[root@localhost _data]# docker run -di --name nginx09 --volumes-from nginx07 nginx0bc9b443996448b613df2841d229ec769418d1365737da16ed39ab1fc15df722# 此时进入容器中查看[root@localhost _data]# docker exec -it nginx09 /bin/bash# 发现有nginx07目录root@0bc9b4439964:/# lsbin  boot  devdocker-entrypoint.d  docker-entrypoint.sh  etchome  lib  lib64  media  mnt  nginx07  opt  proc  rootrun  sbin  srvsys  tmp  usr  var# 进入nginx07目录，发现有1.txt文件root@0bc9b4439964:/# cd nginx07/root@0bc9b4439964:/nginx07# ls 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查看目录卷挂载关系"><a href="#6-查看目录卷挂载关系" class="headerlink" title="6.查看目录卷挂载关系"></a>6.查看目录卷挂载关系</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看目录卷的创建时间、名称、位置[root@localhost _data]# docker volume inspect docker_nginx_data[    {        "CreatedAt": "2021-10-31T04:41:05-04:00",        "Driver": "local",        "Labels": null,        "Mountpoint": "/var/lib/docker/volumes/docker_nginx_data/_data",        "Name": "docker_nginx_data",        "Options": null,        "Scope": "local"    }]# 查看某个容器的ip[root@localhost _data]# docker inspect --format='{{.NetworkSettings.IPAddress}}' nginx07172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-docker镜像构建"><a href="#8-docker镜像构建" class="headerlink" title="8.docker镜像构建"></a>8.docker镜像构建</h2><ul><li>docker commit：从容器创建一个新镜像</li><li>docker bulid：配合dockerfile创建一个镜像</li></ul><h3 id="1-通过docker-commit来实现镜像的构建"><a href="#1-通过docker-commit来实现镜像的构建" class="headerlink" title="1.通过docker commit来实现镜像的构建"></a>1.通过<strong>docker commit</strong>来实现镜像的构建</h3><blockquote><p>我们通过基础镜像centos7，在容器中安装jdk和tomcat来创建一个新的镜像mycentos:<span class="github-emoji"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><ol><li><strong>创建容器</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost _data]# docker pull cnetos:7# 拉取镜像[root@localhost _data]# docker run -di --name centos7 centos:7# 基于centos:7镜像创建一个容器centosd38288c7a5bd5ee4edc1586d20b7e3b1900084f8267d6be977187793d898f00a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>拷贝资源</strong></li></ol><blockquote><p>先在宿主机中准备好tomcat和jdk的安装包，然后将安装包拷贝到容器中</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将安装包拷贝到容器[root@localhost ~]# docker cp /root/apache-tomcat-8.5.72.tar.gz centos7:/root[root@localhost ~]# docker cp /root/jdk-8u311-linux-x64.tar.gz centos7:/root# 进入容器中查看拷贝的东西[root@localhost ~]# docker exec -it centos7 /bin/bash[root@d38288c7a5bd /]# cd /root/[root@d38288c7a5bd ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  jdk-8u311-linux-x64.tar.gz# 解压文件[root@d38288c7a5bd ~]# tar -zxvf apache-tomcat-8.5.72.tar.gz -C /usr/local/tomcat/[root@d38288c7a5bd ~]# tar -zxvf jdk-8u311-linux-x64.tar.gz -C /usr/local/java/# 配置环境变量[root@d38288c7a5bd ~]# vi /etc/profile# 添加以下配置，然后保存退出export JAVA_HOME=/usr/local/java/jdk1.8.0_311export PATH=$PATH:$JAVA_HOME/bin# 使配置生效[root@d38288c7a5bd ~]# source /etc/profile# 检查java环境是否配好[root@d38288c7a5bd ~]# java -versionjava version "1.8.0_311"Java(TM) SE Runtime Environment (build 1.8.0_311-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211101180436025.png" alt="image-20211101180436025"></p><ol start="3"><li><strong>构建镜像</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit [options] CONTAINER [REPOSITORY[:TAG]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-a : 提交镜像的作者</li><li>-m：提交镜像时的说明文字</li><li>-c：使用Dockerfile指令来创建镜像</li><li>-p：在创建镜像时将容器暂停</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将自己的centos7容器生成一个mycentos7:7的镜像，-a代表镜像作者，-m代表这次构建镜像提交的信息[root@localhost ~]# docker commit -a="myhelloworld" -m="java8 and tomcat9" centos7 mycentos:7sha256:4def58ba6be8479e46dc18af7189c0ae64db802fda4af16da3d33d37d3601d8b# 查看docker有哪些镜像，发现多了一个自己创建的mycentos[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEmycentos      7         4def58ba6be8   11 seconds ago   741MBnginx         latest    87a94228f133   2 weeks ago      133MBhello-world   latest    feb5d9fea6a5   5 weeks ago      13.3kBcentos        7         eeb6ee3f44bd   6 weeks ago      204MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>用自己的镜像创建容器</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 尝试用自己构建的镜像创建容器[root@localhost ~]# docker run -di --name centos7 -p 8080:8080 mycentos:7e4137800776b4b2e6dd37ee2a8203ae7a3e37d343cd140cd4de73190948d9337# 进入容器[root@localhost ~]# docker exec -it centos7 bash[root@e4137800776b /]# [root@e4137800776b /]# cd /usr/local/tomcat/apache-tomcat-8.5.72/# 尝试运行tomcat，发现报错[root@e4137800776b apache-tomcat-8.5.72]# ./bin/startup.sh Neither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program# 使环境变量生效[root@e4137800776b apache-tomcat-8.5.72]# source /etc/profile# 再次尝试，发现成功[root@e4137800776b apache-tomcat-8.5.72]# ./bin/startup.sh Using CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.72Using CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.72Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.72/tempUsing JRE_HOME:        /usr/local/java/jdk1.8.0_311Using CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.72/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.72/bin/tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时用一台电脑访问宿主机ip:8080即可看到如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211101182522409.png" alt="image-20211101182522409"></p><h3 id="2-Dockerfile作用"><a href="#2-Dockerfile作用" class="headerlink" title="2.Dockerfile作用"></a>2.Dockerfile作用</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/local/dockerfile[root@localhost dockerfile]# vi DockerfileENV JAVA_HOME=/usr/loacl/java/jdk1.8.0_311ENV PATH=$PATH:$JAVA_HOME/bin# 启动容器时启动tomcatCMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"][root@localhost ~]# vi /usr/local/dockerfile/Dockerfile # 指明构建的新镜像的基础镜像是来自centos:7的FROM centos:7# 通过镜像标签声明了作者信息LABEL maintainer="mrhelloworld.com"# 设置工作目录WORKDIR /usr/local# 新镜像构建成功以后创建指定目录RUN mkdir -p /usr/local/java &amp;&amp; /usr/local/tomcat# 拷贝文件到镜像中并解压ADD jdk-8u311-linux-x64.tar.gz /usr/local/javaADD apache-tomcat-8.5.72.tar.gz /usr/local/tomcat# 暴露容器运行时的8080监听端口给外部EXPOSE 8080# 设置容器内JAVA_HOME的环境变量ENV JAVA_HOME=/usr/loacl/java/jdk1.8.0_311ENV PATH=$PATH:$JAVA_HOME/bin# 启动容器时启动tomcatCMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"][root@localhost /]# cd root/[root@localhost ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  index.txt  jdk-8u311-linux-x64.tar.gz  mynginx_02  test.py  test.txt[root@localhost ~]# cp jdk-8u311-linux-x64.tar.gz /usr/local/dockerfile/[root@localhost ~]# cp apache-tomcat-8.5.72.tar.gz /usr/local/dockerfile/[root@localhost dockerfile]# lsapache-tomcat-8.5.72.tar.gz  Dockerfile  jdk-8u311-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211110203555946.png" alt="image-20211110203555946"></p><h3 id="3-利用Dockerfile构建镜像"><a href="#3-利用Dockerfile构建镜像" class="headerlink" title="3.利用Dockerfile构建镜像"></a>3.利用Dockerfile构建镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># /usr/local/dockerfile代表Dockerfile所需的安装包存放的位置[root@localhost dockerfile]# docker build -f /usr/local/dockerfile/Dockerfile -t mycentos:7 /usr/local/dockerfileSending build context to Docker daemon  157.4MBStep 1/11 : FROM centos:7 ---&gt; eeb6ee3f44bdStep 2/11 : LABEL maintainer="mrhelloworld.com" ---&gt; Running in acc7170cea8aRemoving intermediate container acc7170cea8a ---&gt; f31f5a212077Step 3/11 : WORKDIR /usr/local ---&gt; Running in e547a711ed7aRemoving intermediate container e547a711ed7a ---&gt; 5be9f42fcad7Step 4/11 : RUN mkdir -p /usr/local/java ---&gt; Running in 1a3724eaec53Removing intermediate container 1a3724eaec53 ---&gt; 32f4418fdda7Step 5/11 : RUN mkdir -p /usr/local/tomcat ---&gt; Running in c418f32a0523Removing intermediate container c418f32a0523 ---&gt; 8f58e412bacaStep 6/11 : ADD jdk-8u311-linux-x64.tar.gz /usr/local/java ---&gt; f4ecfe50eafaStep 7/11 : ADD apache-tomcat-8.5.72.tar.gz /usr/local/tomcat ---&gt; 66b44bc9677aStep 8/11 : EXPOSE 8080 ---&gt; Running in 17c52ce48b43Removing intermediate container 17c52ce48b43 ---&gt; c54233396b41Step 9/11 : ENV JAVA_HOME=/usr/local/java/jdk1.8.0_311 ---&gt; Running in cfb5833a22c1Removing intermediate container cfb5833a22c1 ---&gt; 6252c1aba29dStep 10/11 : ENV PATH=$PATH:$JAVA_HOME/bin ---&gt; Running in 74cb21f735fdRemoving intermediate container 74cb21f735fd ---&gt; 2d4b07c042a1Step 11/11 : CMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"] ---&gt; Running in fcee15fd66aeRemoving intermediate container fcee15fd66ae ---&gt; bd1032e5d52eSuccessfully built bd1032e5d52eSuccessfully tagged mycentos:7[root@localhost dockerfile]#[root@localhost dockerfile]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEmycentos      7         bd1032e5d52e   24 seconds ago   584MBhello-world   latest    feb5d9fea6a5   6 weeks ago      13.3kBcentos        7         eeb6ee3f44bd   7 weeks ago      204MB# 用构建的镜像创建容器[root@localhost dockerfile]# docker run -di --name mycentos7 -p 8080 mycentos:7835d9e6796d019c46bd6b97d1b396a9c47f76df6d09982148684a5d93d7f6b52# 查看容器是否已运行[root@localhost dockerfile]# docker ps CONTAINER ID   IMAGE        COMMAND                  CREATED         STATUS         PORTS                                         NAMES835d9e6796d0   mycentos:7   "/usr/local/tomcat/a…"   3 seconds ago   Up 2 seconds   0.0.0.0:49156-&gt;8080/tcp, :::49156-&gt;8080/tcp   mycentos7[root@localhost dockerfile]## 接着直接在网页中访问ip:8080即可直接访问tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211110204650718.png" alt="image-20211110204650718"></p><h2 id="9-Docker的备份恢复迁移"><a href="#9-Docker的备份恢复迁移" class="headerlink" title="9.Docker的备份恢复迁移"></a>9.Docker的备份恢复迁移</h2><h3 id="1-镜像备份"><a href="#1-镜像备份" class="headerlink" title="1.镜像备份"></a>1.镜像备份</h3><pre><code>使用 **docker save** 将指定镜像保存成tar文件</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker save [OPTIONS] IMAGE [IMAGE...]docker save -o /root/mycentos7.tar mycentos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-o ：镜像保存后保存的目录</li></ul><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看当前镜像有哪些[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 将centos:7镜像打包成tar文件[root@localhost ~]# docker save -o /root/mycentos.tar centos:7# 查看是否生成文件[root@localhost ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  index.txt  jdk-8u311-linux-x64.tar.gz  mycentos.tar  mynginx_02  test.py  test.txt[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-镜像恢复"><a href="#2-镜像恢复" class="headerlink" title="2.镜像恢复"></a>2.镜像恢复</h3><pre><code>使用**docker load**将**docker save**保存的tar文件导入到当前镜像</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker load [OPTIONS]docker load -i mycentos.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-i：指定导入的文件</li><li>-q：精简输出信息</li></ul><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 删除原始镜像[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# docker rmi centos:7Untagged: centos:7Untagged: centos@sha256:9d4bcbbb213dfd745b58be38b13b996ebb5ac315fe75711bd618426a630e0987Deleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9Deleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02# 导入我们刚刚导出的镜像[root@localhost ~]# docker load -i mycentos.tar 174f56854903: Loading layer [==================================================&gt;]  211.7MB/211.7MBLoaded image: centos:7# 查看是否导入[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-DockerHub的使用"><a href="#10-DockerHub的使用" class="headerlink" title="10.DockerHub的使用"></a>10.DockerHub的使用</h2><h3 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h3><p>先去<a href="https://hub.docker.com/%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7">https://hub.docker.com/注册一个账号</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113163804847.png" alt="image-20211113163804847"></p><h3 id="2-登陆账号"><a href="#2-登陆账号" class="headerlink" title="2.登陆账号"></a>2.登陆账号</h3><p>然后登陆账号:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.Username: 1787417712# 输入自己的账号Password: # 输入自己的密码WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded# 登陆成功提示[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-推送镜像至仓库"><a href="#3-推送镜像至仓库" class="headerlink" title="3.推送镜像至仓库"></a>3.推送镜像至仓库</h3><p>为了方便测试，我们将<strong>hello-world</strong>推送到仓库</p><p>先给镜像设置标签：<strong>docker tag local-image:tagname new-repo:tagname</strong></p><p>再将镜像推送到仓库：<strong>docker push new-repo:tagname</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看有哪些镜像[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 给一个镜像打标签[root@localhost ~]# docker tag hello-world:latest 1787417712/test-helloworld:1.0.0# 再次查看有哪些镜像[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB# 上传镜像[root@localhost ~]# docker push 1787417712/test-helloworld:1.0.0The push refers to repository [docker.io/1787417712/test-helloworld]e07ee1baac5f: Pushed 1.0.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着可以到hub.docker.com登陆自己的账号查看是否上传成功:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113164236499.png" alt="image-20211113164236499"></p><h3 id="4-尝试拉取自己上传的镜像"><a href="#4-尝试拉取自己上传的镜像" class="headerlink" title="4.尝试拉取自己上传的镜像"></a>4.尝试拉取自己上传的镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看当前镜像[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB# 删除之前的镜像[root@localhost ~]# docker rmi 1787417712/test-helloworld:1.0.0Untagged: 1787417712/test-helloworld:1.0.0Untagged: 1787417712/test-helloworld@sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 拉取自己上传的镜像[root@localhost ~]# docker pull 1787417712/test-helloworld:1.0.01.0.0: Pulling from 1787417712/test-helloworldDigest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4Status: Downloaded newer image for 1787417712/test-helloworld:1.0.0docker.io/1787417712/test-helloworld:1.0.0# 查看是否拉取成功[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-退出账号"><a href="#5-退出账号" class="headerlink" title="5.退出账号"></a>5.退出账号</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker logoutRemoving login credentials for https://index.docker.io/v1/[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-Docker私有仓库搭建"><a href="#11-Docker私有仓库搭建" class="headerlink" title="11.Docker私有仓库搭建"></a>11.Docker私有仓库搭建</h2><h3 id="1-拉取registry镜像"><a href="#1-拉取registry镜像" class="headerlink" title="1.拉取registry镜像"></a>1.拉取registry镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull registryUsing default tag: latestlatest: Pulling from library/registry79e9f2f55bf5: Pull complete 0d96da54f60b: Pull complete 5b27040df4a2: Downloading [===============================================&gt;   ]  6.449MB/6.824MBe2ead8259a04: Downloading 3790aef225b9: Downloading latest: Pulling from library/registry79e9f2f55bf5: Pull complete 0d96da54f60b: Pull complete 5b27040df4a2: Pull complete e2ead8259a04: Pull complete 3790aef225b9: Pull complete Digest: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375Status: Downloaded newer image for registry:latestdocker.io/library/registry:latest[root@localhost ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113165513474.png" alt="image-20211113165513474"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# vim /etc/docker/daemon.json# 应用配置[root@localhost ~]# sudo systemctl daemon-reload# 重启docker[root@localhost ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建私有仓库容器"><a href="#3-创建私有仓库容器" class="headerlink" title="3.创建私有仓库容器"></a>3.创建私有仓库容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run -di --name registry -p 5000:5000 -v /mydata/docker_registry:/var/lib/registry registry8ce589a0bce5a7703d5c9fb018cdbdf8e147c05f878f057c4078731f4e8b5d84[root@localhost ~]# [root@localhost ~]# cd /mydata/docker_registry/[root@localhost docker_registry]# [root@localhost docker_registry]# ls[root@localhost docker_registry]# docker psCONTAINER ID   IMAGE      COMMAND                  CREATED              STATUS              PORTS                                       NAMES8ce589a0bce5   registry   "/entrypoint.sh /etc…"   About a minute ago   Up About a minute   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   registry[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着打开浏览器输入ip:5000/v2/_catalog看到：</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113170311963.png" alt="image-20211113170311963"></p><p>即代表成功！</p><h3 id="4-推送镜像到私有仓库"><a href="#4-推送镜像到私有仓库" class="headerlink" title="4.推送镜像到私有仓库"></a>4.推送镜像到私有仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker_registry]# docker tag hello-world:latest 192.168.1.250:5000/test-helloworld:1.0.0#  192.168.1.250:5000是自己的ip+端口号[root@localhost docker_registry]# docker push 192.168.1.250:5000/test-helloworld:1.0.0The push refers to repository [192.168.1.250:5000/test-helloworld]e07ee1baac5f: Pushed 1.0.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新浏览器可以看到:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113170647521.png" alt="image-20211113170647521"></p><h3 id="5-拉取私有仓库镜像"><a href="#5-拉取私有仓库镜像" class="headerlink" title="5.拉取私有仓库镜像"></a>5.拉取私有仓库镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker_registry]# docker pull 192.168.1.250:5000/test-helloworld:1.0.01.0.0: Pulling from test-helloworldDigest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4Status: Downloaded newer image for 192.168.1.250:5000/test-helloworld:1.0.0192.168.1.250:5000/test-helloworld:1.0.0[root@localhost docker_registry]# docker imagesREPOSITORY                           TAG       IMAGE ID       CREATED       SIZEregistry                             latest    b8604a3fe854   3 hours ago   26.2MB192.168.1.250:5000/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kB1787417712/test-helloworld           1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                          latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                               7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-Docker网络模式"><a href="#12-Docker网络模式" class="headerlink" title="12.Docker网络模式"></a>12.Docker网络模式</h2><p><a href="https://www.jianshu.com/p/22a7032bb7bd">Docker四种网络模式</a></p><table><thead><tr><th>Docker网络模式</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>host模式</td><td>–net=host</td><td>容器和宿主机共享Network namespace。</td></tr><tr><td>container模式</td><td>–net=container:NAME_or_ID</td><td>容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td></tr><tr><td>none模式</td><td>–net=none</td><td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td></tr><tr><td>bridge模式</td><td>–net=bridge</td><td>（默认为该模式）</td></tr></tbody></table><h3 id="1-host模式"><a href="#1-host模式" class="headerlink" title="1.host模式"></a>1.host模式</h3><p>创建容器时加上参数:<strong>–network host</strong>即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个容器，指定网络模式为host[root@localhost /]# docker run -it --name bbox02 --network host busybox/ # # 查看网卡ip/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever/ # exit[root@localhost /]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever[root@localhost /]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 发现两者是相同的，即host模式就是容器使用的是宿主机的卡，相同的网络环境。</p><h3 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 容器默认为bridge模式，所以创建的时候可以不加参数即为bridge模式[root@localhost /]# docker run -it --name bbox02 busybox/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # # 查看宿主机网卡情况，发现多了个13: veth7e697be@if12，容器和宿主机通信就是靠的这个网卡[root@localhost ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever13: veth7e697be@if12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP     link/ether 96:86:47:33:2b:55 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::9486:47ff:fe33:2b55/64 scope link        valid_lft forever preferred_lft forever[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-none模式"><a href="#3-none模式" class="headerlink" title="3.none模式"></a>3.none模式</h3><p>指定容器为None模式即容器开始没有网络，需要自己配置。</p><p>创建容器的时候加上参数**–network none**即可创建网络模式为none的容器。</p><h3 id="4-container模式"><a href="#4-container模式" class="headerlink" title="4.container模式"></a>4.container模式</h3><p>创建容器时加上参数:**–network container:已运行的容器名/容器ID **即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个网络模式为container模式的容器，用bbox1相同的网络模式[root@localhost /]# docker run -it --name bbox04 --network container:bbox1 busybox/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever14: eth0@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # # 查看bbox1的网卡信息，发现和bbox04的一样[root@localhost ~]# docker exec -it bbox1 sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever14: eth0@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-自定义网络"><a href="#12-自定义网络" class="headerlink" title="12.自定义网络"></a>12.自定义网络</h2><h3 id="1-创建网络"><a href="#1-创建网络" class="headerlink" title="1.创建网络"></a>1.创建网络</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个新的网络[root@localhost /]# docker network create custom_network358dcd3df93625bb7328383e89fc38cadb7046e5e31e4123bf72976d3ea874ca# 查看是否创建成功[root@localhost /]# docker network lsNETWORK ID     NAME             DRIVER    SCOPEa4417a6df8fc   bridge           bridge    local358dcd3df936   custom_network   bridge    local7e8bff04dc54   host             host      local466f8d7fd78e   none             null      local[root@localhost /]# # 分别创建bbox05和bbox06,网络模式选择刚创建的custom[root@localhost /]# docker run -it --name bbox05 --network custom_network busybox[root@localhost ~]# docker run -it --name bbox06 --network custom_network busybox# 进入容器bbox05内,发现可以直接用容器名字ping/ # ping bbox06PING bbox06 (172.18.0.3): 56 data bytes64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.054 ms64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.189 ms64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.127 ms64 bytes from 172.18.0.3: seq=3 ttl=64 time=0.131 ms64 bytes from 172.18.0.3: seq=4 ttl=64 time=0.102 ms^C--- bbox06 ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 0.054/0.120/0.189 ms/ # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-搭建Redis集群"><a href="#13-搭建Redis集群" class="headerlink" title="13.搭建Redis集群"></a>13.搭建Redis集群</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>两台虚拟机:192.168.1.250,192.168.1.251</p><p>docker环境:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211114143238251.png" alt="image-20211114143238251"></p><p>docker镜像：redis</p><h3 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2.搭建"></a>2.搭建</h3><ul><li><p>下载redis镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写redis配置文件</p><p>在两台虚拟机中分别执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/local/docker-redis/redis-cluster[root@localhost ~]# cd /usr/local/docker-redis/redis-cluster/[root@localhost redis-cluster]# vi redis-cluster.tmpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250中编辑文件写入:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">port ${PORT}# 端口requirepass 1234# 密码masterauth 1234# 集群节点密码protected-mode no# 安全模式- 关闭daemonize no    # 是否后台appendonly yes# aof文件是否开启cluster-enabled yes# 集群环境是否开启cluster-config-file nodes.conf# 配置文件名称cluster-node-timeout 15000# 超市时间cluster-announce-ip 192.168.1.250# ipcluster-announce-port ${PORT}# 集群端口cluster-announce-bus-port  1${PORT}# 消息总线内部端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中编辑文件写入:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">port ${PORT}# 端口requirepass 1234# 密码masterauth 1234# 集群节点密码protected-mode no# 安全模式- 关闭daemonize no    # 是否后台appendonly yes# aof文件是否开启cluster-enabled yes# 集群环境是否开启cluster-config-file nodes.conf# 配置文件名称cluster-node-timeout 15000# 超市时间cluster-announce-ip 192.168.1.251# ipcluster-announce-port ${PORT}# 集群端口cluster-announce-bus-port  1${PORT}# 消息总线内部端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in `seq 6371 6373`; do \mkdir -p ${port}/conf \&amp;&amp; PORT=${port} envsubst &lt; redis-cluster.tmpl &gt; ${port}/conf/redis.conf \&amp;&amp; mkdir -p ${port}/data;\done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in `seq 6374 6376`; do \mkdir -p ${port}/conf \&amp;&amp; PORT=${port} envsubst &lt; redis-cluster.tmpl &gt; ${port}/conf/redis.conf \&amp;&amp; mkdir -p ${port}/data;\done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost redis-cluster]# tree /usr/local/docker-redis/redis-cluster//usr/local/docker-redis/redis-cluster/├── 6371│   ├── conf│   │   └── redis.conf│   └── data├── 6372│   ├── conf│   │   └── redis.conf│   └── data├── 6373│   ├── conf│   │   └── redis.conf│   └── data└── redis-cluster.tmpl9 directories, 4 files[root@localhost redis-cluster]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost redis-cluster]# tree /usr/local/docker-redis/redis-cluster//usr/local/docker-redis/redis-cluster/├── 6374│   ├── conf│   │   └── redis.conf│   └── data├── 6375│   ├── conf│   │   └── redis.conf│   └── data├── 6376│   ├── conf│   │   └── redis.conf│   └── data└── redis-cluster.tmpl9 directories, 4 files[root@localhost redis-cluster]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建redis容器</p></li></ul><p>在192.168.1.250中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in $(seq 6371 6373); do \  docker run -id --restart always --name redis-${port} --net host \  -v /usr/local/docker-redis/redis-cluster/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \  -v /usr/local/docker-redis/redis-cluster/${port}/data:/data \  redis redis-server /usr/local/etc/redis/redis.conf; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in $(seq 6374 6376); do \  docker run -id --restart always --name redis-${port} --net host \  -v /usr/local/docker-redis/redis-cluster/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \  -v /usr/local/docker-redis/redis-cluster/${port}/data:/data \  redis redis-server /usr/local/etc/redis/redis.conf; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就分别在两台虚拟机中各创建了3个redis容器</p><ul><li>创建redis cluster集群</li></ul><p>在192.168.1.250中执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost redis-cluster]# docker exec -it redis-6371 bashroot@localhost:/data# cd /usr/local/bin/root@localhost:/usr/local/bin# lsdocker-entrypoint.sh  gosu  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-serverroot@localhost:/usr/local/bin# root@localhost:/data# redis-cli -a 1234 --cluster create 192.168.1.250:6371 192.168.1.250:6372 192.168.1.250:6373 192.168.1.251:6374  192.168.1.251:6375 192.168.1.251:6376 --cluster-replicas 1Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 192.168.1.251:6376 to 192.168.1.250:6371Adding replica 192.168.1.250:6373 to 192.168.1.251:6374Adding replica 192.168.1.251:6375 to 192.168.1.250:6372M: 456297129cb486b101c40e341365c10aa75ef9d6 192.168.1.250:6371   slots:[0-5460] (5461 slots) masterM: ce097bae6e524e927a3c618cff0842b8e2ee733e 192.168.1.250:6372   slots:[10923-16383] (5461 slots) masterS: 0dac43912efbda099854300fa6e1026247ff0808 192.168.1.250:6373   replicates 1f11869fb991614ba37bc21944e9fe1a39a667eaM: 1f11869fb991614ba37bc21944e9fe1a39a667ea 192.168.1.251:6374   slots:[5461-10922] (5462 slots) masterS: 34365fc1c7931a5025364a7acd6f8c0a7b59e538 192.168.1.251:6375   replicates ce097bae6e524e927a3c618cff0842b8e2ee733eS: 7b13fc4d721522edd661755e058a9dda7b6dc579 192.168.1.251:6376   replicates 456297129cb486b101c40e341365c10aa75ef9d6Can I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join.&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.250:6371)M: 456297129cb486b101c40e341365c10aa75ef9d6 192.168.1.250:6371   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: ce097bae6e524e927a3c618cff0842b8e2ee733e 192.168.1.250:6372   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: 1f11869fb991614ba37bc21944e9fe1a39a667ea 192.168.1.251:6374   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: 0dac43912efbda099854300fa6e1026247ff0808 192.168.1.250:6373   slots: (0 slots) slave   replicates 1f11869fb991614ba37bc21944e9fe1a39a667eaS: 7b13fc4d721522edd661755e058a9dda7b6dc579 192.168.1.251:6376   slots: (0 slots) slave   replicates 456297129cb486b101c40e341365c10aa75ef9d6S: 34365fc1c7931a5025364a7acd6f8c0a7b59e538 192.168.1.251:6375   slots: (0 slots) slave   replicates ce097bae6e524e927a3c618cff0842b8e2ee733e[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.root@localhost:/data# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-DockerCompose安装"><a href="#14-DockerCompose安装" class="headerlink" title="14.DockerCompose安装"></a>14.DockerCompose安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装[root@localhost redis-cluster]#  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--  100   633  100   633    0     0    880      0 --:--:-- --:--:-- --:--:--   881  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--    6 12.1M    6  804k    0     0   383k      0  0:00:32  0:00:02  0:00:30  100 12.1M  100 12.1M    0     0   204k      0  0:01:00  0:01:00 --:--:--  162k[root@localhost redis-cluster]# cd /usr/local/bin/[root@localhost bin]# lsdocker-compose# 赋予执行权限[root@localhost bin]# sudo chmod +x /usr/local/bin/docker-compose [root@localhost bin]# lltotal 12440-rwxr-xr-x. 1 root root 12737304 Nov 14 02:27 docker-compose[root@localhost bin]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
