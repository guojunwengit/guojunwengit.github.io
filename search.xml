<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux卸载Mysql</title>
      <link href="/2022/03/09/Linux%E5%8D%B8%E8%BD%BDMysql/"/>
      <url>/2022/03/09/Linux%E5%8D%B8%E8%BD%BDMysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux卸载Mysql"><a href="#Linux卸载Mysql" class="headerlink" title="Linux卸载Mysql"></a>Linux卸载Mysql</h3><p>停止MySQL服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询MySQL的安装文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -qa | grep -i mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220309162459794.png" alt="image-20220309162459794"></p><p>卸载上述查询出来的所有的MySQL安装包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rpm -e bt-mysql56-5.6.50-1.el7.x86_64 --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">rm -rf /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 卸载Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装redis</title>
      <link href="/2022/03/04/Centos7%E5%AE%89%E8%A3%85redis/"/>
      <url>/2022/03/04/Centos7%E5%AE%89%E8%A3%85redis/</url>
      
        <content type="html"><![CDATA[<h3 id="Centos7安装redis"><a href="#Centos7安装redis" class="headerlink" title="Centos7安装redis"></a>Centos7安装redis</h3><p>下载redis</p><pre class="line-numbers language-none"><code class="language-none">wget https://download.redis.io/releases/redis-6.2.6.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220304141111832.png" alt="image-20220304141111832"></p><p>解压到opt目录下，进入redis-6.2.6目录下，使用<code>make</code>命令加载依赖库，等待之后再执行make install。</p><pre class="line-numbers language-none"><code class="language-none">tar xf redis-6.2.6.tar.gzcd redis-6.2.6/makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220304141641527.png" alt="image-20220304141641527"></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2022/02/28/SQL/"/>
      <url>/2022/02/28/SQL/</url>
      
        <content type="html"><![CDATA[<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h5 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h5><ol><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>SQL语句可以使用空格/缩进来增强语句的可读性。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</p></li><li><p>注释:</p><p>单行注释：– 注释内容或#注释内容(MySQL特有)</p><p>多行注释： /* 注释内容“/</p></li></ol><h5 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h5><table><thead><tr><th>分类</th><th align="center">说明</th></tr></thead><tbody><tr><td>DDL</td><td align="center">数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td align="center">数据查询语言，用来查询数据库中的记录</td></tr><tr><td>DCL</td><td align="center">数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h4 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL 数据库操作"></a>DDL 数据库操作</h4><p>查询所有数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228201712701.png" alt="image-20220228201712701"></p><p>查询当前数据库</p><pre class="line-numbers language-none"><code class="language-none">select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228201912497.png" alt="image-20220228201912497"></p><p>创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> 字符集<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COLLATE</span> 排序规则<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228202954836.png" alt="image-20220228202954836"></p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228203031643.png" alt="image-20220228203031643"></p><p>删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:\Users\16477\AppData\Roaming\Typora\typora-user-images\image-20220228203401553.png" alt="image-20220228203401553"></p><p>使用数据库</p><pre class="line-numbers language-none"><code class="language-none">USE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228203544529.png" alt="image-20220228203544529"></p><h5 id="DDL-表操作-查询"><a href="#DDL-表操作-查询" class="headerlink" title="DDL 表操作 查询"></a>DDL 表操作 查询</h5><p>查询当前数据库所有表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询表结构</p><pre class="line-numbers language-none"><code class="language-none">DESC 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询指定表的建表语句</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE TABLE 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228210144335.png" alt="image-20220228210144335"></p><h5 id="DDL-表操作-创建"><a href="#DDL-表操作-创建" class="headerlink" title="DDL 表操作 创建"></a>DDL 表操作 创建</h5><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE 表名(字段1 字段1类型[COMMENT 字段1注释],字段2 字段2类型[COMMENT 字段2注释],......字段n 字段n类型[COMMENT 字段n注释])[COMMENT 表注释];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[…]为可选参数，最后一个字段后面没有逗号</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220228205943985.png" alt="image-20220228205943985"></p><h5 id="DDL-表操作-数据类型"><a href="#DDL-表操作-数据类型" class="headerlink" title="DDL-表操作-数据类型"></a>DDL-表操作-数据类型</h5><p>MySQL中的数据类型有很多，主要分为三类:数值类型、字符串类型、日期时间类型。</p><p>数值类型</p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1  byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2  bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3  bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4  bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8  bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4  bytes</td><td>(-3.402823466 E+38，3.402823466351  E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8  bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr></tbody></table><p>age  TINYINT UNSIGNED </p><p>score double(4, 1)</p><p>字符串类型</p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>char的性能高于varchar</p><p>日期时间</p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h5 id="DDL-表操作-修改"><a href="#DDL-表操作-修改" class="headerlink" title="DDL-表操作-修改"></a>DDL-表操作-修改</h5><p>添加字段</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改数据类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 字段名 新数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改字段名和字段类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 字段名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220308202525181.png" alt="image-20220308202525181"></p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220308202754226.png" alt="image-20220308202754226"></p><h5 id="DDL-表操作-删除"><a href="#DDL-表操作-删除" class="headerlink" title="DDL-表操作-删除"></a>DDL-表操作-删除</h5><p>删除表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除指定表，并重新创建该表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DML-介绍"><a href="#DML-介绍" class="headerlink" title="DML 介绍"></a>DML 介绍</h4><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增删改操作。</p><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE</li><li>修改数据（UPDATE</li></ul><h5 id="DML-添加数据"><a href="#DML-添加数据" class="headerlink" title="DML-添加数据"></a>DML-添加数据</h5><ul><li><p>给指定字段添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给全部字段添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批量添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Redis/image-20220309154605439.png" alt="image-20220309154605439"></p><h5 id="DML-修改数据"><a href="#DML-修改数据" class="headerlink" title="DML-修改数据"></a>DML-修改数据</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 字段名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</li></ul><h5 id="DML-删除数据"><a href="#DML-删除数据" class="headerlink" title="DML-删除数据"></a>DML-删除数据</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</li><li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE)。</li></ul><h4 id="DQL-介绍"><a href="#DQL-介绍" class="headerlink" title="DQL-介绍"></a>DQL-介绍</h4><p>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录。</p><p>查询关键字：SELECT</p><h5 id="DQL-语法"><a href="#DQL-语法" class="headerlink" title="DQL-语法"></a>DQL-语法</h5><ul><li>基本查询</li><li>条件查询（WHERE）</li><li>聚合函数（count、max、min、avg、sum）</li><li> 分组查询（GROUP BY）</li><li>排序查询（ORDER BY）</li><li>分页查询（LIMIT）</li></ul><h5 id="DQL-基本查询"><a href="#DQL-基本查询" class="headerlink" title="DQL-基本查询"></a>DQL-基本查询</h5><ul><li> 查询多个字段</li></ul>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> 字段<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>设置别名</p><pre class="line-numbers language-none"><code class="language-none">SELECT 字段1 [AS 别名1], 字段2 [AS 别名2], 字段3 [AS 别名3], ... FROM 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>去除重复记录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 字段列表 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>*号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</p><h5 id="DQL-条件查询"><a href="#DQL-条件查询" class="headerlink" title="DQL-条件查询"></a>DQL-条件查询</h5><ul><li>语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件列表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>条件</li></ul><table><thead><tr><th align="left">比较运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td></tr><tr><td align="left">=</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt; 或 !=</td><td align="left">不等于</td></tr><tr><td align="left">BETWEEN … AND …</td><td align="left">在某个范围之内(含最小、最大值)</td></tr><tr><td align="left">IN(…)</td><td align="left">在in之后的列表中的值，多选一</td></tr><tr><td align="left">LIKE 占位符</td><td align="left">模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td align="left">IS NULL</td><td align="left">是NULL</td></tr></tbody></table><table><thead><tr><th align="left">逻辑运算符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">AND 或 &amp;&amp;</td><td align="left">并且 (多个条件同时成立)</td></tr><tr><td align="left">OR 或 ||</td><td align="left">或者 (多个条件任意一个成立)</td></tr><tr><td align="left">NOT 或 !</td><td align="left">非 , 不是</td></tr></tbody></table><h5 id="DQL-聚合函数"><a href="#DQL-聚合函数" class="headerlink" title="DQL-聚合函数"></a>DQL-聚合函数</h5><ul><li><p>介绍</p><p>将一列数据作为一个整体，进行纵向计算 。</p></li><li><p>常见聚合函数</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table></li><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="DQL-分组查询"><a href="#DQL-分组查询" class="headerlink" title="DQL-分组查询"></a>DQL-分组查询</h5><ul><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组字段名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后过滤条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>where与having区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul></li><li><p>注意</p><ul><li>执行顺序: where &gt; 聚合函数 &gt; having 。</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装mysql8.0</title>
      <link href="/2022/02/23/Centos7%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/02/23/Centos7%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Centos7安装mysql8-0"><a href="#Centos7安装mysql8-0" class="headerlink" title="Centos7安装mysql8.0"></a>Centos7安装mysql8.0</h3><h3 id="下载MySQL-安装包："><a href="#下载MySQL-安装包：" class="headerlink" title="下载MySQL 安装包："></a>下载MySQL 安装包：</h3><pre class="line-numbers language-none"><code class="language-none">wget https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装mysql 安装源：</p><pre class="line-numbers language-none"><code class="language-none">yum -y localinstall mysql80-community-release-el7-5.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在线安装MySQL"><a href="#在线安装MySQL" class="headerlink" title="在线安装MySQL"></a>在线安装MySQL</h3><pre class="line-numbers language-none"><code class="language-none">yum -y install mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223203237323.png" alt="image-20220223203237323"></p><h3 id="启动mysql-服务"><a href="#启动mysql-服务" class="headerlink" title="启动mysql 服务"></a>启动mysql 服务</h3><pre class="line-numbers language-none"><code class="language-none">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><pre class="line-numbers language-none"><code class="language-none">systemctl enable mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改root登录密码"><a href="#修改root登录密码" class="headerlink" title="修改root登录密码"></a>修改root登录密码</h2><p>mysql安装完成之后，会在/var/log/mysqld.log文件中给root生成了一个临时的默认密码。</p><pre class="line-numbers language-none"><code class="language-none">vim /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223203638341.png" alt="image-20220223203638341"></p><p>记住初始密码：</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录后，需要第一时间修改密码，但是如果是测试库的话，密码没必要设置的很复杂，就需要修改一下</p><p>永久修改validate_password 参数，修改完之后重启mysql服务</p><pre class="line-numbers language-none"><code class="language-none"># systemctl restart mysqld# vi /etc/my.cnfvalidate_password.policy=0validate_password.length=4validate_password.number_count=0validate_password.mixed_case_count=0validate_password.special_char_count=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改root用户密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER  USER  'root'@'localhost'  IDENTIFIED BY 'mysqlmysql';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223205301081.png" alt="image-20220223205301081"></p><h3 id="设置远程登录"><a href="#设置远程登录" class="headerlink" title="设置远程登录"></a>设置远程登录</h3><p>默认的root用户只能当前节点localhost访问，是无法远程访问的，我们还需要创建一个root账户，用户远程访问。</p><pre class="line-numbers language-none"><code class="language-none">create user 'root'@'%' identified by '密码';alter user 'root'@'%' identified with mysql_native_password by '密码';grant all on *.* to 'root'@'%';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Mysql/image-20220223210225424.png" alt="image-20220223210225424"></p><p>MysQL客户端连接</p><pre class="line-numbers language-none"><code class="language-none">mysql [-h 127.0.0.1] [-P 3306] -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus Node Exporter TLS认证</title>
      <link href="/2022/02/22/PrometheusNodeExporterTLS%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/02/22/PrometheusNodeExporterTLS%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="Prometheus-Node-Exporter-TLS认证"><a href="#Prometheus-Node-Exporter-TLS认证" class="headerlink" title="Prometheus Node Exporter TLS认证"></a>Prometheus Node Exporter TLS认证</h3><p>Node Exporter 启动失败，日志信息如下，配置TLS认证可以解决。</p><pre class="line-numbers language-none"><code class="language-none">level=info ts=2022-02-22T12:39:11.916Z caller=tls_config.go:191 msg="TLS is disabled." http2=false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>Node Exporter v1.0.0之前的版本不支持TLS和认证，所以默认情况下是通过http暴露的/metrics，默认没有任何访问限制。对于有些环境硬性要求不允许使用http提供访问，和对安全性要求较高必须有认证的情况下，原来只能通过额外增加一层反向代理（如nginx）来解决。但给每个node_export配1个nginx，这显然这太复杂太重了。<br>从 v1.0.0版本开始实验性的支持https和基本认证。 从 Node Exporter 开始到后续其他的组件，都将支持 TLS 和 basic auth， 同时也列出了最新的安全基准（默认情况下都支持 TLS v1.2 及以上）。下面让我们来看看具体配置。</p><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><pre class="line-numbers language-none"><code class="language-none">openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -keyout node_exporter.key -out node_exporter.crt -subj "/C=CN/ST=Beijing/L=Beijing/O=test.cn/CN=localhost"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令执行完生成两个文件 node_exporter.crt  node_exporter.key。</p><h3 id="配置Node-Exporter-开启-TLS"><a href="#配置Node-Exporter-开启-TLS" class="headerlink" title="配置Node Exporter 开启 TLS"></a>配置Node Exporter 开启 TLS</h3><p>将<code>node_exporter</code> 和<code>node_exporter.crt node_exporter.key</code> 放在同一个目录。</p><p>编写配置文件，并保存为 config.yaml(文件名自定义)</p><pre class="line-numbers language-none"><code class="language-none">tls_server_config:  cert_file: node_exporter.crt  key_file: node_exporter.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用配置文件启动启动node_exporter</p><pre class="line-numbers language-none"><code class="language-none">./node_exporter --web.config=config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当你看到如下日志，说明TLS已生效。</p><pre class="line-numbers language-none"><code class="language-none">level=info ts=2022-02-22T12:48:49.747Z caller=node_exporter.go:199 msg="Listening on" address=:9100level=info ts=2022-02-22T12:48:49.748Z caller=tls_config.go:224 msg="TLS is enabled." http2=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>验证：</p><pre class="line-numbers language-none"><code class="language-none"> # curl localhost:9100/metricsClient sent an HTTP request to an HTTPS server. # curl https://localhost:9100/metrics  curl: (60) SSL certificate problem: self signed certificateMore details here: https://curl.haxx.se/docs/sslcerts.htmlcurl failed to verify the legitimacy of the server and therefore could notestablish a secure connection to it. To learn more about this situation andhow to fix it, please visit the web page mentioned above.#### 使用-k跳过证书验证就可以获得metrics了curl  -k https://localhost:9100/metrics<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Prometheus-配置"><a href="#Prometheus-配置" class="headerlink" title="Prometheus 配置"></a>Prometheus 配置</h3><p>在prometheus.yml文件下增加如下配置后，在Prometheus UI中应该就能看到target了。</p><pre class="line-numbers language-none"><code class="language-none">- job_name: 'node_exporter'  scheme: https  tls_config:    ca_file: node_exporter.crt  static_configs:  - targets: ['localhost:9100']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Prometheus/image-20220222214913716.png" alt="image-20220222214913716"></p><p>生成密码，如果没有htpasswd命令，Centos7 安装命令 yum install -y httpd-tools。</p><pre class="line-numbers language-none"><code class="language-none">这里我只用它来生成了密码 hash ， 没有传递用户名。# htpasswd -nBC 12 '' | tr -d ':\n'      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改node_exporter的配置文件config.yaml。</p><pre class="line-numbers language-none"><code class="language-none">tls_server_config:  cert_file: node_exporter.crt  key_file: node_exporter.keybasic_auth_users:  # 当前设置的用户名为 prometheus ， 可以设置多个  prometheus: $2y$12$CTF/pW97pUAsm2iyMn4cJeWQV9cYxWWd1Nxs23.VFmHnuub31qfRu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用配置文件启动启动node_exporter。</p><pre class="line-numbers language-none"><code class="language-none">./node_exporter --web.config=config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证，将提示401。</p><pre class="line-numbers language-none"><code class="language-none">#curl  -Ik https://localhost:9100/metricsHTTP/1.1 401 UnauthorizedContent-Type: text/plain; charset=utf-8Www-Authenticate: BasicX-Content-Type-Options: nosniffDate: Tue, 22 Feb 2022 13:56:28 GMTContent-Length: 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改Prometheus-配置"><a href="#修改Prometheus-配置" class="headerlink" title="修改Prometheus 配置"></a>修改Prometheus 配置</h4><pre class="line-numbers language-none"><code class="language-none">- job_name: 'node_exporter'  scheme: https  tls_config:    ca_file: node_exporter.crt  basic_auth:    username: prometheus    password: prometheuspassword    static_configs:  - targets: ['localhost:9100']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改配置文件后，只要让 Prometheus 重新加载配置文件即可：</p><pre class="line-numbers language-none"><code class="language-none">killall -HUP prometheus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Prometheus Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Prometheus Node </tag>
            
            <tag> Node Exporter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25.K个一组翻转链表</title>
      <link href="/2022/01/19/25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/19/25-K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>219.存在重复元素II</title>
      <link href="/2022/01/19/219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/"/>
      <url>/2022/01/19/219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/</url>
      
        <content type="html"><![CDATA[<h3 id="219-存在重复元素II"><a href="#219-存在重复元素II" class="headerlink" title="219.存在重复元素II"></a>219.存在重复元素II</h3><p>给你一个整数数组 nums 和一个整数 k ，判断数组中是否存在两个 不同的索引 i 和 j ，满足 nums[i] == nums[j] 且 abs(i - j) &lt;= k 。如果存在，返回 true ；否则，返回 false 。</p><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-none"><code class="language-none">func containsNearbyDuplicate(nums []int, k int) bool {m := map[int]int{}for i, v := range nums {if _, ok := m[v]; ok {if i - m[v] &lt;= k {return true}}m[v] = i}return false}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61.旋转链表</title>
      <link href="/2022/01/18/61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/18/61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61.旋转链表"></a>61.旋转链表</h3><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p><p><a href="https://leetcode-cn.com/problems/rotate-list/">https://leetcode-cn.com/problems/rotate-list/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>当 <em>k</em>≥<em>n</em> 时，链表仅需向右移动 k mod n 次，新链表的最后一个节点为原链表的第 (n - 1) - (k \bmod n)(<em>n</em>−1)−(<em>k</em>mod<em>n</em>) 个节点（从 0 开始计数）。</p><p>计算出链表的长度n，将链表首尾相连。找到新链表的最后一个节点，将当前闭合为环的链表断开。</p><p>当链表长度不大于 1，或者 k 为 n 的倍数时，新链表将与原链表相同。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span><span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> head <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>Next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> head<span class="token punctuation">}</span>h <span class="token operator">:=</span> headn <span class="token operator">:=</span> <span class="token number">1</span><span class="token keyword">for</span> h<span class="token punctuation">.</span>Next <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>h <span class="token operator">=</span> h<span class="token punctuation">.</span>Nextn<span class="token operator">++</span><span class="token punctuation">}</span>k <span class="token operator">=</span> n <span class="token operator">-</span> k<span class="token operator">%</span>n<span class="token keyword">if</span> k <span class="token operator">==</span> n <span class="token punctuation">{</span><span class="token keyword">return</span> head<span class="token punctuation">}</span>h<span class="token punctuation">.</span>Next <span class="token operator">=</span> head<span class="token keyword">for</span> k <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>h <span class="token operator">=</span> h<span class="token punctuation">.</span>Nextk<span class="token operator">--</span><span class="token punctuation">}</span>ret <span class="token operator">:=</span> h<span class="token punctuation">.</span>Nexth<span class="token punctuation">.</span>Next <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token keyword">return</span> ret<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.删除链表的倒数第N个节点</title>
      <link href="/2022/01/18/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/2022/01/18/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>双指针，先让后面的指针往后遍历n步，然后两个指针同步遍历。当后面的指针到达链表尾时，前面的指针到达链表的倒数第n+1个节点，最后跳过倒数第n个节点即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head <span class="token operator">*</span>ListNode<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ListNode <span class="token punctuation">{</span>h <span class="token operator">:=</span> headl1<span class="token punctuation">,</span> l2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>ListNode<span class="token punctuation">{</span>Next<span class="token punctuation">:</span> h<span class="token punctuation">}</span><span class="token punctuation">,</span> h<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>Next<span class="token punctuation">}</span><span class="token keyword">for</span> l2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>Nextl2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>Next<span class="token punctuation">}</span>l1<span class="token punctuation">.</span>Next <span class="token operator">=</span> l1<span class="token punctuation">.</span>Next<span class="token punctuation">.</span>Next<span class="token keyword">return</span> h<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>387.字符串中的第一个唯一字符</title>
      <link href="/2022/01/18/387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
      <url>/2022/01/18/387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387.字符串中的第一个唯一字符"></a>387.字符串中的第一个唯一字符</h3><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p><p><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">https://leetcode-cn.com/problems/first-unique-character-in-a-string/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        a<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token function">int</span><span class="token punctuation">(</span>v<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> k        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>539.最小时间差</title>
      <link href="/2022/01/18/539-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
      <url>/2022/01/18/539-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="539-最小时间差"><a href="#539-最小时间差" class="headerlink" title="539.最小时间差"></a>539.最小时间差</h3><p>给定一个 24 小时制（小时:分钟 “HH:MM”）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。如果 timePoints 的长度超过 14401440，那么必然会有两个相同的时间，此时可以直接返回 0。</p><p><a href="https://leetcode-cn.com/problems/minimum-time-difference/">https://leetcode-cn.com/problems/minimum-time-difference/</a></p><h3 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h3><p>将时间排序，比较相邻时间分钟差。根据题意，一共有 24 \times 60=144024×60=1440 种不同的时间。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">findMinDifference</span><span class="token punctuation">(</span>timePoints <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1440</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">)</span>    <span class="token comment">//将时间从小到大排序</span>ans <span class="token operator">:=</span> math<span class="token punctuation">.</span>MaxInt32t1 <span class="token operator">:=</span> <span class="token function">timeToInt</span><span class="token punctuation">(</span>timePoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">//t1存储最小的时间</span>t2 <span class="token operator">:=</span> t1<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> timePoints<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>t <span class="token operator">:=</span> <span class="token function">timeToInt</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t <span class="token operator">-</span> t2<span class="token punctuation">)</span>t2 <span class="token operator">=</span> t<span class="token punctuation">}</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t1 <span class="token operator">+</span> <span class="token number">1440</span> <span class="token operator">-</span> t2<span class="token punctuation">)</span>   <span class="token comment">//比较首尾时间</span><span class="token keyword">return</span> ans<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">timeToInt</span><span class="token punctuation">(</span>t <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span>  <span class="token comment">//将时间分钟数表示</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token punctuation">{</span><span class="token keyword">return</span> y<span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1220.统计元音字母序列的数目</title>
      <link href="/2022/01/17/1220-%E7%BB%9F%E8%AE%A1%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
      <url>/2022/01/17/1220-%E7%BB%9F%E8%AE%A1%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%E7%9A%84%E6%95%B0%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1220-统计元音字母序列的数目"><a href="#1220-统计元音字母序列的数目" class="headerlink" title="1220.统计元音字母序列的数目"></a>1220.统计元音字母序列的数目</h3><p>给你一个整数 n，请你帮忙统计一下我们可以按下述规则形成多少个长度为 n 的字符串：</p><p>字符串中的每个字符都应当是小写元音字母（’a’, ‘e’, ‘i’, ‘o’, ‘u’）<br>每个元音 ‘a’ 后面都只能跟着 ‘e’<br>每个元音 ‘e’ 后面只能跟着 ‘a’ 或者是 ‘i’<br>每个元音 ‘i’ 后面 不能 再跟着另一个 ‘i’<br>每个元音 ‘o’ 后面只能跟着 ‘i’ 或者是 ‘u’<br>每个元音 ‘u’ 后面只能跟着 ‘a’<br>由于答案可能会很大，所以请你返回 模 10^9 + 7 之后的结果。</p><p><a href="https://leetcode-cn.com/problems/count-vowels-permutation/">https://leetcode-cn.com/problems/count-vowels-permutation/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">countVowelPermutation</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>dp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> mod <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> <span class="token comment">// a 前面可以为 e,u,i</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>         <span class="token comment">// e 前面可以为 a,i</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>         <span class="token comment">// i 前面可以为 e,o</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token comment">// o 前面可以为 i</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span>         <span class="token comment">// u 前面可以为 i,o</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus+Grafana监控</title>
      <link href="/2022/01/16/Prometheus-Grafana%E7%9B%91%E6%8E%A7/"/>
      <url>/2022/01/16/Prometheus-Grafana%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus-Grafana监控"><a href="#Prometheus-Grafana监控" class="headerlink" title="Prometheus+Grafana监控"></a>Prometheus+Grafana监控</h2><h3 id="第1章-Prometheus-入门"><a href="#第1章-Prometheus-入门" class="headerlink" title="第1章 Prometheus 入门"></a>第1章 Prometheus 入门</h3><p>Prometheus 受启发于 Google 的Brogmon 监控系统（相似的 Kubernetes 是从 Google的 Brog 系统演变而来），从 2012 年开始由前 Google 工程师在 Soundcloud 以开源软件的形式进行研发，并且于 2015 年早期对外发布早期版本。</p><p>2016 年 5 月继 Kubernetes 之后成为第二个正式加入 CNCF 基金会的项目，同年 6 月正式发布 1.0 版本。2017 年底发布了基于全新存储层的 2.0 版本，能更好地与容器平台、云平台配合。</p><p>Prometheus 作为新一代的云原生监控系统，目前已经有超过 650+位贡献者参与到Prometheus 的研发工作上，并且超过 120+项的第三方集成。</p><h4 id="1-1-Prometheus-的特点"><a href="#1-1-Prometheus-的特点" class="headerlink" title="1.1 Prometheus 的特点"></a>1.1 Prometheus 的特点</h4><p>Prometheus 是一个开源的完整监控解决方案，其对传统监控系统的测试和告警模型进行了彻底的颠覆，形成了基于中央化的规则计算、统一分析和告警的新模型。 相比于传统监控系统，Prometheus 具有以下优点：</p><h4 id="1-1-1-易于管理"><a href="#1-1-1-易于管理" class="headerlink" title="1.1.1 易于管理"></a>1.1.1 易于管理</h4><p>➢ Prometheus 核心部分只有一个单独的二进制文件，不存在任何的第三方依赖(数据库，缓存等等)。唯一需要的就是本地磁盘，因此不会有潜在级联故障的风险。</p><p>➢ Prometheus 基于 Pull 模型的架构方式，可以在任何地方（本地电脑，开发环境，测试环境）搭建我们的监控系统。</p><p>➢ 对于一些复杂的情况，还可以使用 Prometheus 服务发现(Service Discovery)的能力动态管理监控目标。</p><h4 id="1-1-2-监控服务的内部运行状态"><a href="#1-1-2-监控服务的内部运行状态" class="headerlink" title="1.1.2 监控服务的内部运行状态"></a>1.1.2 监控服务的内部运行状态</h4><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/Prometheus/20220116203512.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Prometheus </tag>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指Offer52.两个链表的第一个公共节点</title>
      <link href="/2022/01/15/%E5%89%91%E6%8C%87Offer52-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/"/>
      <url>/2022/01/15/%E5%89%91%E6%8C%87Offer52-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指Offer52-两个链表的第一个公共节点"><a href="#剑指Offer52-两个链表的第一个公共节点" class="headerlink" title="剑指Offer52.两个链表的第一个公共节点"></a>剑指Offer52.两个链表的第一个公共节点</h3><p>输入两个链表，找出它们的第一个公共节点。</p><p><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>func getIntersectionNode(headA, headB *ListNode) *ListNode {</p><p>  if headA == nil || headB == nil {</p><p>​    return nil</p><p>  }</p><p>  a, b := headA, headB</p><p>  for a != b {</p><p>​    if a == nil {</p><p>​      a = headB</p><p>​    } else {</p><p>​      a = a.Next</p><p>​    }</p><p>​    if b == nil {</p><p>​      b = headA</p><p>​    } else {</p><p>​      b = b.Next</p><p>​    }</p><p>  }</p><p>  return a </p><p>}</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1716.计算力扣银行的钱</title>
      <link href="/2022/01/15/1716-%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1/"/>
      <url>/2022/01/15/1716-%E8%AE%A1%E7%AE%97%E5%8A%9B%E6%89%A3%E9%93%B6%E8%A1%8C%E7%9A%84%E9%92%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="1716-计算力扣银行的钱"><a href="#1716-计算力扣银行的钱" class="headerlink" title="1716.计算力扣银行的钱"></a>1716.计算力扣银行的钱</h3><p>Hercy 想要为购买第一辆车存钱。他 每天 都往力扣银行里存钱。</p><p>最开始，他在周一的时候存入 1 块钱。从周二到周日，他每天都比前一天多存入 1 块钱。在接下来每一个周一，他都会比 前一个周一 多存入 1 块钱。</p><p>给你 n ，请你返回在第 n 天结束的时候他在力扣银行总共存了多少块钱。</p><p><a href="https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/">https://leetcode-cn.com/problems/calculate-money-in-leetcode-bank/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">totalMoney</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>k <span class="token operator">:=</span> <span class="token number">21</span>i <span class="token operator">:=</span> n <span class="token operator">/</span> <span class="token number">7</span>sum <span class="token operator">:=</span> i <span class="token operator">*</span> ksum <span class="token operator">+=</span> i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">if</span> x <span class="token operator">:=</span> n <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>y <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> yy<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> sum<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer II 034. 外星语言是否排序</title>
      <link href="/2022/01/13/%E5%89%91%E6%8C%87OfferII034-%E5%A4%96%E6%98%9F%E8%AF%AD%E8%A8%80%E6%98%AF%E5%90%A6%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/01/13/%E5%89%91%E6%8C%87OfferII034-%E5%A4%96%E6%98%9F%E8%AF%AD%E8%A8%80%E6%98%AF%E5%90%A6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-II-034-外星语言是否排序"><a href="#剑指-Offer-II-034-外星语言是否排序" class="headerlink" title="剑指 Offer II 034. 外星语言是否排序"></a>剑指 Offer II 034. 外星语言是否排序</h3><p><a href="https://leetcode-cn.com/problems/lwyVBB/">https://leetcode-cn.com/problems/lwyVBB/</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isAlienSorted</span><span class="token punctuation">(</span>words <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> order <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint8</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>m<span class="token punctuation">[</span>order<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">}</span>n <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>str1<span class="token punctuation">,</span> str2 <span class="token operator">:=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> m<span class="token punctuation">[</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> m<span class="token punctuation">[</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> m<span class="token punctuation">[</span>str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">if</span> x <span class="token operator">&gt;</span> y <span class="token punctuation">{</span><span class="token keyword">return</span> y<span class="token punctuation">}</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>747.至少是其他数字两倍的最大数</title>
      <link href="/2022/01/13/747-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
      <url>/2022/01/13/747-%E8%87%B3%E5%B0%91%E6%98%AF%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E4%B8%A4%E5%80%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="747-至少是其他数字两倍的最大数"><a href="#747-至少是其他数字两倍的最大数" class="headerlink" title="747.至少是其他数字两倍的最大数"></a>747.至少是其他数字两倍的最大数</h3><p>给你一个整数数组 nums ，其中总是存在 唯一的 一个最大整数 。</p><p>请你找出数组中的最大元素并检查它是否 至少是数组中每个其他数字的两倍 。如果是，则返回 最大元素的下标 ，否则返回 -1 。</p><p><a href="https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/">https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others/</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>遍历数组分别找到数组的最大值 max1 和次大值 max2 。如果 max1 ≥ max2 × 2 成立，则最大值至少是数组其余数字的两倍，此时返回最大值的下标，否则返回 -1−1。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">dominantIndex</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>max1<span class="token punctuation">,</span> max2<span class="token punctuation">,</span> k <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span><span class="token keyword">if</span> num <span class="token operator">&gt;</span> max1 <span class="token punctuation">{</span> max1<span class="token punctuation">,</span> max2<span class="token punctuation">,</span> k <span class="token operator">=</span> num<span class="token punctuation">,</span> max1<span class="token punctuation">,</span> i<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&gt;</span> max2<span class="token punctuation">{</span>max2 <span class="token operator">=</span> num<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> max1 <span class="token operator">&gt;=</span> max2 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">{</span><span class="token keyword">return</span> k<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>334.递增的三元子序列</title>
      <link href="/2022/01/12/334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2022/01/12/334-%E9%80%92%E5%A2%9E%E7%9A%84%E4%B8%89%E5%85%83%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="334-递增的三元子序列"><a href="#334-递增的三元子序列" class="headerlink" title="334.递增的三元子序列"></a>334.递增的三元子序列</h3><p>给你一个整数数组 nums ，判断这个数组中是否存在长度为 3 的递增子序列。</p><p>如果存在这样的三元组下标 (i, j, k) 且满足 i &lt; j &lt; k ，使得 nums[i] &lt; nums[j] &lt; nums[k] ，返回 true ；否则，返回 false 。</p><p><a href="https://leetcode-cn.com/problems/increasing-triplet-subsequence/">334.递增的三元子序列</a></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果数组 nums 中存在一个下标  i  满足 1≤ i &lt; n − 1，使得在 nums[i]  的左边存在一个元素小于   nums[i] 且在 nums[i]  的右边存在一个元素大于 nums[i]，则数组 nums 中存在递增的三元子序列。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-none"><code class="language-none">func increasingTriplet(nums []int) bool {   n := len(nums)   max := make([]int, n)   min := make([]int, n)   min[0] = nums[0]   for i := 1; i &lt; n; i++ {      min[i] = Min(nums[i], min[i-1])   }   max[n-1] = nums[n-1]   for i := n - 2; i &gt; 0; i-- {      max[i] = Max(nums[i], max[i+1])   }   n -= 1   for i := 1; i &lt; n; i++ {      if nums[i] &gt; min[i-1] &amp;&amp; nums[i] &lt; max[i+1] {         return true      }   }   return false}func Max(x, y int) int {   if x &gt; y {      return x   } else {      return y   }}func Min(x, y int) int {   if x &gt; y {      return x   } else {      return y   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>278.第一个错误的版本</title>
      <link href="/2022/01/11/278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/"/>
      <url>/2022/01/11/278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278.第一个错误的版本"></a>278.第一个错误的版本</h3><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p><a href="https://leetcode-cn.com/problems/first-bad-version/">https://leetcode-cn.com/problems/first-bad-version/</a></p><h3 id="思路及算法"><a href="#思路及算法" class="headerlink" title="思路及算法"></a>思路及算法</h3><p>二分查找</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    r<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> n    mid <span class="token operator">:=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">for</span> r <span class="token operator">&lt;</span> l <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l <span class="token operator">=</span> mid        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            r <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">isBadVersion</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> r    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golang </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>794.有效的井字游戏</title>
      <link href="/2021/12/10/794-%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
      <url>/2021/12/10/794-%E6%9C%89%E6%95%88%E7%9A%84%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">validTicTacToe</span><span class="token punctuation">(</span>board <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">var</span> player1<span class="token punctuation">,</span> player2 <span class="token builtin">int</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> board <span class="token punctuation">{</span>player1<span class="token operator">+=</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">)</span>        player2<span class="token operator">+=</span>strings<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"O"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> player1 <span class="token operator">&lt;</span> player2 <span class="token operator">||</span> player1 <span class="token operator">-</span> player2 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span>sum1 <span class="token operator">:=</span> <span class="token number">0</span>sum2 <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>  board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>  board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> board<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token punctuation">{</span><span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span> <span class="token punctuation">{</span>sum1<span class="token operator">++</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span> <span class="token punctuation">{</span>sum2<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> sum1 <span class="token operator">==</span> sum2 <span class="token punctuation">{</span><span class="token keyword">if</span> sum1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">if</span> player1 <span class="token operator">&gt;</span> player2 <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> sum2 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">if</span> player1 <span class="token operator">==</span> player2 <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> golng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性hash算法</title>
      <link href="/2021/12/05/hash/"/>
      <url>/2021/12/05/hash/</url>
      
        <content type="html"><![CDATA[<h1 id="一致性hash算法"><a href="#一致性hash算法" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h1><h3 id="分布式缓存应用场景"><a href="#分布式缓存应用场景" class="headerlink" title="分布式缓存应用场景"></a>分布式缓存应用场景</h3><p>假设我们有3台缓存服务器，服务器编号分别为S0、S1、S2，同时我们有3万张图片需要缓存，最好这些图片能均匀的缓存到服务器上，这样能够分担缓存的压力。那么应该如何实现这个功能。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205201655.png"></p><p>简单的做法是对缓存上的key进行hash计算，hash后的值是一个整数，再用缓存服务器的数量对这个数进行取模计算，用取模产生的余数来决定数据应该缓存到哪一台服务器上。</p><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><p>假设我们使用图片名称作为访问缓存的key，那么我们可以把计算过程写成公式。首先对图片名称进行hash计算再用机器数取模得到余数。这里我们有3台服务器，使用hash值得到的数字再用3取模，取模之后对应3个数字0、1、2正好与服务器编号对应，假设某张图片对应的hash值为6,对3取模，取模的结果为0，我们就把图片缓存到S0服务器上。因为对同一张图片的名称进行hash运算得到的值是不变的，所以需要访问图片的时候，只要再次对图片进行hash值计算和取模计算，我们就能知道图片存放在那台服务器上，只要到这台服务器上查找图片就行。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205203024.png" alt="img"></p><p>通过这种方法我们就可以将3万张图片分布到3台缓存服务器上，下次访问某张图片时，能够直接计算出图片缓存在哪台服务器上，这样就可以满足我们的需求，这种算法也被称为hash算法 。</p><p>但是hash算法有一个缺陷，假如现在要往缓存服务器集群增加一台服务器，缓存服务器的数量由3台增加到了4台，这个时候要计算图片存在哪台缓存服务器时，先对图片名称进行hash值计算得到被取余数，但是取余数由3变成了4，在被取余数不变的情况下，余数不同，那么访问这张图片的服务器的编号就会改变，之前6%3=0,现在6%4=2，程序会在S2服务器上找图片，但是我们知道图片是存放在S0上面的所以是读取不到图片的。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205204002.png" alt="img"></p><p>由于缓存服务器数量发生变化导致不能正常访问缓存数据，而程序在无法访问缓存数据时，就会向后端服务器请求数据，由于大量缓存在同一时间失效，造成缓存雪崩，缓存服务器无法起到承担缓存压力的作用，压力就转到后端服务器，整个系统很有可能被压垮，为了避免这种问题，就需要使用一致性hash算法。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205204350.png" alt="img"></p><h3 id="一致性hash算法-1"><a href="#一致性hash算法-1" class="headerlink" title="一致性hash算法"></a>一致性hash算法</h3><p>我们先来看一下一致性hash算法的原理， 先想象一个2^32的圆，这个圆由2^32个点组成，这个圆环被称为hash环。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205204745.png" alt="img"></p><p>假设我们还是有3台缓存服务器，服务器编号分别是A，B，C。我们用他们各自的hash编号进行hash计算，然后将hash后的结果用2^32取模，算出来的结果一定是在0-2^32-1之间的整数，我们就用对服务器A算出来的整数来代表服务器A，hash环上必定有一个点与这个整数对应，这样就可以把服务器A映射到这个环上，用同样的方法可以将服务器A，B映射到这个环上，这样就可以把缓存服务器都映射到这个环上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205205358.png" alt="img"></p><p>对于需要缓存的记录我们以同样的方法将被缓存的对象映射到hash环上。假设我们需要缓存图片a.jpg，我们使用图片的名称作为找到图片的key，那么我们就可以以相同的公式将图片映射到上面的hash环上，现在缓存服务器与图片都被映射到hash环上了。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205205800.png" alt="img"></p><p>现在要确定图片到底缓存在哪个服务器上，其实很简单，只需要从图片的位置开始，沿顺时针方向查找，遇到的第一个服务器就是数据缓存的服务器，假设要3张图片a,b,c需要缓存。a图片会被缓存到服务器B上，b图片会被缓存到服务器C上,c图片会被缓存到服务器A上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205210216.png" alt="img"></p><p>由于被缓存对象与服务器hash后的值是固定的，所以在服务器不变的情况下，在想要访问这张图片时，只要进行相同的hash计算，就可以计算出这张图片被缓存在哪台服务器下，直接去对应服务器上查找图片即可。</p><p>现在来看看一致性hash算法能不能解决hash算法的问题，hash算法执行简单的对服务器数量进行取模时，如果服务器数量发生变化，就会导致大量缓存失效，产生缓存雪崩。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205210919.png" alt="img"></p><p>我们使用一致性hash算法来模拟一遍，假设增加了一台服务器D，按照一致性hash算法的规则，先将服务器D映射到hash环上，这样一部分图片沿顺时针遇到的第一台缓存服务器就由服务器A变成了服务器D。也就是说如果增加了一台服务器，会导致一小部分图片无法访问，但是大部分图片仍可以正常访问，这就是一致性hash算法的优点。</p><p>一致性hash算法的优点，缓存服务器的数量发生了改变，并不是所有的缓存失效，而是只有部分缓存失效，缓存仍然能够分担整个系统大部分的压力，而不是所有压力在同一时间集中到后端服务器上。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205211536.png" alt="img"></p><h3 id="hash偏斜"><a href="#hash偏斜" class="headerlink" title="hash偏斜"></a>hash偏斜</h3><p>在介绍一致性hash的原理时，我们理想化的认为3台服务器均匀的映射到了hash环上，但是在实际的映射中，服务器映射到hash环上很有可能是斜的，这种情况称为hash环的偏斜，hash环偏斜的情况下，大部分的缓存对象很有可能缓存到一台服务器上，导致缓存分布极度不均匀，3台服务器没有被平均使用。如果缓存数据较多的服务器出现故障，由于失效的缓存太多，在极端的情况下，很有可能引起系统故障。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205212235.png" alt="img"></p><p>要想均匀的将缓存分布到服务器上，最好是能让服务器尽量多，这样才能出现在hash环上。具体的实行方式是增加一层虚拟节点，这里真是的服务器资源只有3台，但是根据现有的物理节点，映射出很多虚拟节点。对于服务器A，我们可以映射出A1，A2……An。再将这些虚拟结点加入hash环，引入虚拟节点之后，虚拟节点越多，hash环上的服务器结点就越多，缓存被均匀分布的概率就越大，这样就可以一定程度上减少hash环偏斜带来的影响。</p><p>具体在缓存读写时，可以先找到缓存对应的虚拟节点，然后虚拟节点再找到自己的真实节点，再进行缓存数据的读写。</p><p><img src="https://cdn.jsdelivr.net/gh/guojunwengit/images/hash/20211205212655.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> hash </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/11/18/Docker/"/>
      <url>/2021/11/18/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-配置虚拟机IP"><a href="#1-配置虚拟机IP" class="headerlink" title="1.配置虚拟机IP"></a>1.配置虚拟机IP</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编辑网络配置文件[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33TYPE=Ethernet# 静态IPBOOTPROTO=staticNAME=ens33DEVICE=ens33# 开机自启ONBOOT=yes# IP地址IPADDR=192.168.1.202# 子网掩码NETMASK=255.255.255.0# 网关GATEWAY=192.168.1.1# DNSDNS1=114.114.114.114DNS2=1.2.4.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023155716216.png" alt="image-20211023155716216"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 重启网卡[root@localhost ~]# systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-安装Docker引擎"><a href="#2-安装Docker引擎" class="headerlink" title="2.安装Docker引擎"></a>2.安装Docker引擎</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# sudo yum install -y yum-utils# 安装yum-utils包# 设置仓库地址-阿里云[root@localhost ~]# sudo yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 安装docker引擎[root@localhost ~]# sudo yum install docker-ce docker-ce-cli containerd.io# 启动docker[root@localhost ~]# sudo systemctl start docker# 查看docker版本[root@localhost ~]# docker -vDocker version 20.10.9, build c2ea9bc# 通过run hello-world 验证 Docker Engine 是否已正确安装。[root@localhost ~]# sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023163223998.png" alt="image-20211023163223998"></p><h2 id="3-Doker的启动与停止命令"><a href="#3-Doker的启动与停止命令" class="headerlink" title="3.Doker的启动与停止命令"></a>3.Doker的启动与停止命令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# sudo systemctl start docker# 启动docker[root@localhost ~]# sudo systemctl stop docker# 停止docker[root@localhost ~]# sudo systemctl restart docker# 重启docker[root@localhost ~]# sudo systemctl enable docker# 设置开机自启docker[root@localhost ~]# sudo systemctl status docker# 查看docker状态[root@localhost ~]# sudo docker info# 查看docker的概要信息[root@localhost ~]# sudo docker --help# 查看docker的帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-配置镜像加速"><a href="#4-配置镜像加速" class="headerlink" title="4.配置镜像加速"></a>4.配置镜像加速</h2><blockquote><p>Docker 从 Docker Hub 拉取镜像，因为是从国外获取，所以速度较慢<br>可以通过配置国内镜像源的方式，从国内获取镜像，提高拉取速度。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编辑文件vim /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023164554380.png" alt="image-20211023164554380"></p><p>设置163和中国科技大学的镜像</p><ul><li><p>重新加载配置信息及重启docker服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 重新加载文件[root@localhost ~]# sudo systemctl daemon-reload# 重启docker[root@localhost ~]# sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-镜像相关命令"><a href="#5-镜像相关命令" class="headerlink" title="5.镜像相关命令"></a>5.镜像相关命令</h2><h3 id="1-查看镜像"><a href="#1-查看镜像" class="headerlink" title="1.查看镜像"></a>1.查看镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>REPOSITORY</strong> : 镜像在仓库中的名称</p></li><li><p><strong>TAG</strong>：镜像标签，latest代表最新版本</p></li><li><p><strong>IMAGE ID</strong>：镜像ID</p></li><li><p><strong>CREATED</strong>：镜像创建的日期</p></li><li><p><strong>SIZE</strong>：镜像大小</p><p>这些镜像都是存储在宿主机**/etc/lib/docker**目录下的</p></li></ul><h3 id="3-搜索镜像"><a href="#3-搜索镜像" class="headerlink" title="3.搜索镜像"></a>3.搜索镜像</h3><p>语法:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker search 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker search redis# 搜索名为redis的镜像NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDredis                            Redis is an open source key-value store that…   10076     [OK]       sameersbn/redis                                                                  83                   [OK]grokzen/redis-cluster            Redis cluster 3.0, 3.2, 4.0, 5.0, 6.0, 6.2      79                   rediscommander/redis-commander   Alpine image for redis-commander - Redis man…   66                   [OK]redislabs/redisearch             Redis With the RedisSearch module pre-loaded…   40                   redislabs/redisinsight           RedisInsight - The GUI for Redis                35                   oliver006/redis_exporter          Prometheus Exporter for Redis Metrics. Supp…   31                   redislabs/redis                  Clustered in-memory database engine compatib…   31                   redislabs/rejson                 RedisJSON - Enhanced JSON data type processi…   29                   arm32v7/redis                    Redis is an open source key-value store that…   25                   redislabs/redisgraph             A graph database module for Redis               16                   [OK]arm64v8/redis                    Redis is an open source key-value store that…   16                   redislabs/rebloom                A probablistic datatypes module for Redis       16                   [OK]redislabs/redismod               An automated build of redismod - latest Redi…   15                   [OK]webhippie/redis                  Docker image for redis                          11                   [OK]redislabs/redistimeseries        A time series database module for Redis         10                   s7anley/redis-sentinel-docker    Redis Sentinel                                  10                   [OK]insready/redis-stat              Docker image for the real-time Redis monitor…   10                   [OK]goodsmileduck/redis-cli          redis-cli on alpine                             9                    [OK]centos/redis-32-centos7          Redis in-memory data structure store, used a…   5                    clearlinux/redis                 Redis key-value data structure server with t…   3                    wodby/redis                      Redis container image with orchestration        1                    [OK]tiredofit/redis                  Redis Server w/ Zabbix monitoring and S6 Ove…   1                    [OK]xetamus/redis-resource           forked redis-resource                           0                    [OK]centos/redis-5-centos7           Redis in-memory data structure store, used a…   0                    [root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-拉取镜像"><a href="#4-拉取镜像" class="headerlink" title="4.拉取镜像"></a>4.拉取镜像</h3><pre><code>语法：</code></pre><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker">docker pull 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>假如我们要拉去centos镜像到本地，如果不声明镜像TAG标签信息则默认拉取latest版本，也可以通过hub.docker.com搜索该镜像，查看支持的TAG信息。</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull redisUsing default tag: latestlatest: Pulling from library/redis7d63c13d9b9b: Pull complete a2c3b174c5ad: Pull complete 283a10257b0f: Pull complete 7a08c63a873a: Pull complete 0531663a7f55: Pull complete 9bf50efb265c: Pull complete Digest: sha256:a89cb097693dd354de598d279c304a1c73ee550fbfff6d9ee515568e0c749cfeStatus: Downloaded newer image for redis:latestdocker.io/library/redis:latest[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEredis         latest    7faaec683238   12 days ago   113MBhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# docker pull redis:55: Pulling from library/redis7d63c13d9b9b: Already exists a2c3b174c5ad: Already exists 283a10257b0f: Already exists 54ac4e97e390: Pull complete 0d3ede1e63a5: Pull complete 878bf2d7168d: Pull complete Digest: sha256:8217ee751b6a72bc4b3ef757c18aa9619e939d5073d5a26ce2074905385000b0Status: Downloaded newer image for redis:5docker.io/library/redis:5[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEredis         5         02fee89f17ad   12 days ago   110MBredis         latest    7faaec683238   12 days ago   113MBhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5.删除镜像"></a>5.删除镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rmi 镜像名/镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker rmi redisUntagged: redis:latestUntagged: redis@sha256:a89cb097693dd354de598d279c304a1c73ee550fbfff6d9ee515568e0c749cfeDeleted: sha256:7faaec68323851b2265bddb239bd9476c7d4e4335e9fd88cbfcc1df374dded2fDeleted: sha256:e6deb90762475cda72e21895911f830ed99fd1cc6d920d92873270be91235274Deleted: sha256:2649acad13241d9c8d81e49357bc66cce459b352ded7f423d70ede7bd3bb7b89Deleted: sha256:64007bba5fc220df4d3da33cecdc2d55dd6a73528c138b0fa1acd79fd6a9c217[root@localhost ~]# docker rmi redis:5Untagged: redis:5Untagged: redis@sha256:8217ee751b6a72bc4b3ef757c18aa9619e939d5073d5a26ce2074905385000b0Deleted: sha256:02fee89f17adc8213b560b929d5ac585137612651f8eeb26423aadfe39dc3847Deleted: sha256:f92e4de257018a916bd0715da7b1dd39a3540fa393799c2219a82f0ce99d57e2Deleted: sha256:b13f2ab83d74b48551107876f35dcdaa7197a557fd4769cd4bfeb56bc4f031b6Deleted: sha256:58ca4126d8128345fc58de904cb9029f2a1deb1f88b1fa0ac3f3f0e707f099b9Deleted: sha256:b2cc2f1bf8b1cca8ba7c19e1697f7b73755903ad8f880b83673fd6a697aca935Deleted: sha256:fbd1283ab782925be4d990bd4bebe9ad5e5cf9a525abfb6fa87465e072da9d31Deleted: sha256:e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-容器相关命令"><a href="#6-容器相关命令" class="headerlink" title="6.容器相关命令"></a>6.容器相关命令</h2><h3 id="1-查看容器"><a href="#1-查看容器" class="headerlink" title="1.查看容器"></a>1.查看容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>CONTAINER</strong> ID：容器ID</li><li><strong>IMAGE</strong>：所属镜像</li><li><strong>COMMAND</strong>：</li><li><strong>CREATED</strong>：创建时间</li><li><strong>STATUS</strong>：状态</li><li><strong>PORTS</strong>：端口</li><li><strong>NAMES</strong>：容器名称</li></ul><pre><code>查看所有容器(停止和运行)</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -aCONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMESa08d44d00165   hello-world   "/hello"   27 hours ago   Exited (0) 27 hours ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>查看停止运行的容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -f status=exitedCONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMESa08d44d00165   hello-world   "/hello"   27 hours ago   Exited (0) 27 hours ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>查看最后一次运行的容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -lCONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMESa08d44d00165   hello-world   "/hello"   2 days ago   Exited (0) 2 days ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>列出最近创建的n个容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker ps -n 2CONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMESa08d44d00165   hello-world   "/hello"   2 days ago   Exited (0) 2 days ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建与启动容器"><a href="#2-创建与启动容器" class="headerlink" title="2.创建与启动容器"></a>2.创建与启动容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>-i：表示运行的容器</p></li><li><p>-t ：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登陆进去。即分配一个伪终端。</p></li><li><p>–name：为创建的容器命名。</p></li><li><p>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</p></li><li><p>-d：在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后就不会自动登录容器，如果只加-i -t两个参数，创建容器后就会自动进容器里）。</p></li><li><p>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。</p></li><li><p>-P：随机使用宿主机的可用端口与容器暴露的端口映射。</p><p>  创建容器并进入</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run --name mynginx -P nginx# 创建一个nginx容器，自定义名称为mynginx,将nginx的端口随机映射到宿主机端口[root@localhost ~]# docker ps# 查看正在运行的容器，发现nginx映射到了宿主机的49153端口CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                     NAMES12c76efcc8f7   nginx     "/docker-entrypoint.…"   48 seconds ago   Up 47 seconds   0.0.0.0:49153-&gt;80/tcp, :::49153-&gt;80/tcp   mynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>守护方式创建容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run -di --name mynginx -p 80:80 nginxa0a190090a232b9d3ed1a0882d77088c198d710b129ec764d9b66cedc960f096[root@localhost ~]# [root@localhost ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMESa0a190090a23   nginx     "/docker-entrypoint.…"   11 seconds ago   Up 11 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   mynginx[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>登录到守护方式创建的容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker exec -it mynginx /bin/bashroot@a0a190090a23:/#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>启动与停止容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker start mynginxmynginx[root@localhost ~]# docker stop mynginxmynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker rm 12c76efcc8f7# 删除id为12c76efcc8f7的容器12c76efcc8f7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-文件拷贝"><a href="#3-文件拷贝" class="headerlink" title="3.文件拷贝"></a>3.文件拷贝</h3><pre><code>宿主机拷贝到容器</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker cp 需要拷贝的文件或目录 容器名称:容器目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>例：将宿主机中的test.py文件拷贝到mynginx容器中的/root目录下</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# vi test.py[root@localhost ~]# docker cp test.py mynginx:/rootCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                               NAMESa0a190090a23   nginx     "/docker-entrypoint.…"   10 minutes ago   Up 3 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   mynginx[root@localhost ~]# docker exec -it mynginx /bin/bashroot@a0a190090a23:/# ls /root/test.pyroot@a0a190090a23:/# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>容器拷贝到宿主机</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker cp 容器名称:容器目录 需要拷贝的文件或目录 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>例：</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@a0a190090a23:~# touch test.txtroot@a0a190090a23:~# exitexit[root@localhost ~]# docker cp mynginx:/root/test.txt ./[root@localhost ~]# lsanaconda-ks.cfg  index.txt  test.py  test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-目录挂载"><a href="#7-目录挂载" class="headerlink" title="7.目录挂载"></a>7.目录挂载</h2><h3 id="1-指定目录挂载"><a href="#1-指定目录挂载" class="headerlink" title="1.指定目录挂载"></a>1.指定目录挂载</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个nginx容器，端口映射为81端口，宿主机的/root/mynginx_02映射到容器的/root/mynginx_02目录# 此时，修改宿主机的/root/mynginx_02同时会修改容器的/root/mynginx_02[root@localhost ~]# docker run -di --name nginx02 -p 81:80 -v /root/mynginx_02/:/root/mynginx_02 nginx64e80e6ff89ecefea568b317690baa8c9072c270a480db3c749d0ebc07202616<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>查看某个容器的详细信息</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost mynginx_02]# docker inspect nginx02# 查看nginx02的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-匿名挂载"><a href="#2-匿名挂载" class="headerlink" title="2.匿名挂载"></a>2.匿名挂载</h3><blockquote><p>匿名挂载就是在宿主机中生成的目录名称是随机命名的</p></blockquote><pre><code>匿名挂载只需要写容器的目录即可，容器外对应的目录会在/var/lib/docker/volume中生成。</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 匿名挂载docker run -di -v /usr/local/data --name centos7-02 centos:7 # 查看volume数据卷信息docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>例:</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 匿名挂载目录[root@localhost ~]# docker run -di -v /usr/local/data --name centos7-02 centos:7 59778edd9a81bc5c5dcd24799429c05fec27e8d6042c88735f23d301f78a80c1# 查看生成的数据卷信息[root@localhost ~]# ls /var/lib/docker/volumes/backingFsBlockDev  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db# 进入容器的/usr/local/data目录随意创建一个文件[root@localhost ~]# docker exec -it centos7-02 /bin/bash[root@59778edd9a81 /]# cd /usr/local/data/[root@59778edd9a81 data]# ls[root@59778edd9a81 data]# touch test.txt      # 在宿主机中查看容器对应的目录[root@localhost ~]# cd /var/lib/docker/volumes/backingFsBlockDev                                                 metadata.dbe83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54/ [root@localhost ~]# cd /var/lib/docker/volumes/e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95[root@localhost e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54]# ls_data[root@localhost e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54]# cd _data/# 发现宿主机此目录下同容器一样，有刚创建的test.txt文件[root@localhost _data]# lstest.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-具名挂载"><a href="#3-具名挂载" class="headerlink" title="3.具名挂载"></a>3.具名挂载</h3><blockquote><p>具名挂载就是在宿主机中生成的目录名称是我们指定的名称</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个nginx容器，指定宿主机目录为docker_nginx_data,容器中对应的目录为/usr/local/data,[root@localhost volumes]# docker run -di -v docker_nginx_data:/usr/local/data --name nginx06 nginxe832041a8a3804f68204b8740c8addb8865df7ae8bec9b477ab851d0b1671c83# 查看宿主机生成的新目录，发现有了docker_nginx_data[root@localhost volumes]# ls /var/lib/docker/volumes/backingFsBlockDev  docker_nginx_data  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数据卷只读"><a href="#4-数据卷只读" class="headerlink" title="4.数据卷只读"></a>4.数据卷只读</h3><blockquote><p>数据卷只读就是挂载到容器中目录，容器只有读取权限。</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost volumes]# docker run -di --name nginx07 -P -v /nginx07:/nginx07:ro nginx8ca4534cb21f57ff7d7a4fe2d6caa4caa25f604132982072c8664db1289c43d0# 发现在var/lib/docker/volumes/目录中不会有目录生成，新目录生成在宿主机的/nginx07[root@localhost volumes]# ls /var/lib/docker/volumes/backingFsBlockDev  docker_nginx_data  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db# 此时想在容器中创建文件就会报错root@8ca4534cb21f:/nginx07# touch 123touch: cannot touch '123': Read-only file system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-volume-form继承"><a href="#5-volume-form继承" class="headerlink" title="5.volume-form继承"></a>5.volume-form继承</h3><blockquote><p>一个容器继承领另一个容器挂载的地址</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个新的容器nginx09，继承nginx07挂载的地址[root@localhost _data]# docker run -di --name nginx09 --volumes-from nginx07 nginx0bc9b443996448b613df2841d229ec769418d1365737da16ed39ab1fc15df722# 此时进入容器中查看[root@localhost _data]# docker exec -it nginx09 /bin/bash# 发现有nginx07目录root@0bc9b4439964:/# lsbin  boot  devdocker-entrypoint.d  docker-entrypoint.sh  etchome  lib  lib64  media  mnt  nginx07  opt  proc  rootrun  sbin  srvsys  tmp  usr  var# 进入nginx07目录，发现有1.txt文件root@0bc9b4439964:/# cd nginx07/root@0bc9b4439964:/nginx07# ls 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查看目录卷挂载关系"><a href="#6-查看目录卷挂载关系" class="headerlink" title="6.查看目录卷挂载关系"></a>6.查看目录卷挂载关系</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看目录卷的创建时间、名称、位置[root@localhost _data]# docker volume inspect docker_nginx_data[    {        "CreatedAt": "2021-10-31T04:41:05-04:00",        "Driver": "local",        "Labels": null,        "Mountpoint": "/var/lib/docker/volumes/docker_nginx_data/_data",        "Name": "docker_nginx_data",        "Options": null,        "Scope": "local"    }]# 查看某个容器的ip[root@localhost _data]# docker inspect --format='{{.NetworkSettings.IPAddress}}' nginx07172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-docker镜像构建"><a href="#8-docker镜像构建" class="headerlink" title="8.docker镜像构建"></a>8.docker镜像构建</h2><ul><li>docker commit：从容器创建一个新镜像</li><li>docker bulid：配合dockerfile创建一个镜像</li></ul><h3 id="1-通过docker-commit来实现镜像的构建"><a href="#1-通过docker-commit来实现镜像的构建" class="headerlink" title="1.通过docker commit来实现镜像的构建"></a>1.通过<strong>docker commit</strong>来实现镜像的构建</h3><blockquote><p>我们通过基础镜像centos7，在容器中安装jdk和tomcat来创建一个新的镜像mycentos:<span class="github-emoji"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><ol><li><strong>创建容器</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost _data]# docker pull cnetos:7# 拉取镜像[root@localhost _data]# docker run -di --name centos7 centos:7# 基于centos:7镜像创建一个容器centosd38288c7a5bd5ee4edc1586d20b7e3b1900084f8267d6be977187793d898f00a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>拷贝资源</strong></li></ol><blockquote><p>先在宿主机中准备好tomcat和jdk的安装包，然后将安装包拷贝到容器中</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将安装包拷贝到容器[root@localhost ~]# docker cp /root/apache-tomcat-8.5.72.tar.gz centos7:/root[root@localhost ~]# docker cp /root/jdk-8u311-linux-x64.tar.gz centos7:/root# 进入容器中查看拷贝的东西[root@localhost ~]# docker exec -it centos7 /bin/bash[root@d38288c7a5bd /]# cd /root/[root@d38288c7a5bd ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  jdk-8u311-linux-x64.tar.gz# 解压文件[root@d38288c7a5bd ~]# tar -zxvf apache-tomcat-8.5.72.tar.gz -C /usr/local/tomcat/[root@d38288c7a5bd ~]# tar -zxvf jdk-8u311-linux-x64.tar.gz -C /usr/local/java/# 配置环境变量[root@d38288c7a5bd ~]# vi /etc/profile# 添加以下配置，然后保存退出export JAVA_HOME=/usr/local/java/jdk1.8.0_311export PATH=$PATH:$JAVA_HOME/bin# 使配置生效[root@d38288c7a5bd ~]# source /etc/profile# 检查java环境是否配好[root@d38288c7a5bd ~]# java -versionjava version "1.8.0_311"Java(TM) SE Runtime Environment (build 1.8.0_311-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211101180436025.png" alt="image-20211101180436025"></p><ol start="3"><li><strong>构建镜像</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker commit [options] CONTAINER [REPOSITORY[:TAG]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-a : 提交镜像的作者</li><li>-m：提交镜像时的说明文字</li><li>-c：使用Dockerfile指令来创建镜像</li><li>-p：在创建镜像时将容器暂停</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将自己的centos7容器生成一个mycentos7:7的镜像，-a代表镜像作者，-m代表这次构建镜像提交的信息[root@localhost ~]# docker commit -a="myhelloworld" -m="java8 and tomcat9" centos7 mycentos:7sha256:4def58ba6be8479e46dc18af7189c0ae64db802fda4af16da3d33d37d3601d8b# 查看docker有哪些镜像，发现多了一个自己创建的mycentos[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEmycentos      7         4def58ba6be8   11 seconds ago   741MBnginx         latest    87a94228f133   2 weeks ago      133MBhello-world   latest    feb5d9fea6a5   5 weeks ago      13.3kBcentos        7         eeb6ee3f44bd   6 weeks ago      204MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>用自己的镜像创建容器</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 尝试用自己构建的镜像创建容器[root@localhost ~]# docker run -di --name centos7 -p 8080:8080 mycentos:7e4137800776b4b2e6dd37ee2a8203ae7a3e37d343cd140cd4de73190948d9337# 进入容器[root@localhost ~]# docker exec -it centos7 bash[root@e4137800776b /]# [root@e4137800776b /]# cd /usr/local/tomcat/apache-tomcat-8.5.72/# 尝试运行tomcat，发现报错[root@e4137800776b apache-tomcat-8.5.72]# ./bin/startup.sh Neither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program# 使环境变量生效[root@e4137800776b apache-tomcat-8.5.72]# source /etc/profile# 再次尝试，发现成功[root@e4137800776b apache-tomcat-8.5.72]# ./bin/startup.sh Using CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.72Using CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.72Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.72/tempUsing JRE_HOME:        /usr/local/java/jdk1.8.0_311Using CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.72/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.72/bin/tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时用一台电脑访问宿主机ip:8080即可看到如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211101182522409.png" alt="image-20211101182522409"></p><h3 id="2-Dockerfile作用"><a href="#2-Dockerfile作用" class="headerlink" title="2.Dockerfile作用"></a>2.Dockerfile作用</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/local/dockerfile[root@localhost dockerfile]# vi DockerfileENV JAVA_HOME=/usr/loacl/java/jdk1.8.0_311ENV PATH=$PATH:$JAVA_HOME/bin# 启动容器时启动tomcatCMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"][root@localhost ~]# vi /usr/local/dockerfile/Dockerfile # 指明构建的新镜像的基础镜像是来自centos:7的FROM centos:7# 通过镜像标签声明了作者信息LABEL maintainer="mrhelloworld.com"# 设置工作目录WORKDIR /usr/local# 新镜像构建成功以后创建指定目录RUN mkdir -p /usr/local/java &amp;&amp; /usr/local/tomcat# 拷贝文件到镜像中并解压ADD jdk-8u311-linux-x64.tar.gz /usr/local/javaADD apache-tomcat-8.5.72.tar.gz /usr/local/tomcat# 暴露容器运行时的8080监听端口给外部EXPOSE 8080# 设置容器内JAVA_HOME的环境变量ENV JAVA_HOME=/usr/loacl/java/jdk1.8.0_311ENV PATH=$PATH:$JAVA_HOME/bin# 启动容器时启动tomcatCMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"][root@localhost /]# cd root/[root@localhost ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  index.txt  jdk-8u311-linux-x64.tar.gz  mynginx_02  test.py  test.txt[root@localhost ~]# cp jdk-8u311-linux-x64.tar.gz /usr/local/dockerfile/[root@localhost ~]# cp apache-tomcat-8.5.72.tar.gz /usr/local/dockerfile/[root@localhost dockerfile]# lsapache-tomcat-8.5.72.tar.gz  Dockerfile  jdk-8u311-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211110203555946.png" alt="image-20211110203555946"></p><h3 id="3-利用Dockerfile构建镜像"><a href="#3-利用Dockerfile构建镜像" class="headerlink" title="3.利用Dockerfile构建镜像"></a>3.利用Dockerfile构建镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># /usr/local/dockerfile代表Dockerfile所需的安装包存放的位置[root@localhost dockerfile]# docker build -f /usr/local/dockerfile/Dockerfile -t mycentos:7 /usr/local/dockerfileSending build context to Docker daemon  157.4MBStep 1/11 : FROM centos:7 ---&gt; eeb6ee3f44bdStep 2/11 : LABEL maintainer="mrhelloworld.com" ---&gt; Running in acc7170cea8aRemoving intermediate container acc7170cea8a ---&gt; f31f5a212077Step 3/11 : WORKDIR /usr/local ---&gt; Running in e547a711ed7aRemoving intermediate container e547a711ed7a ---&gt; 5be9f42fcad7Step 4/11 : RUN mkdir -p /usr/local/java ---&gt; Running in 1a3724eaec53Removing intermediate container 1a3724eaec53 ---&gt; 32f4418fdda7Step 5/11 : RUN mkdir -p /usr/local/tomcat ---&gt; Running in c418f32a0523Removing intermediate container c418f32a0523 ---&gt; 8f58e412bacaStep 6/11 : ADD jdk-8u311-linux-x64.tar.gz /usr/local/java ---&gt; f4ecfe50eafaStep 7/11 : ADD apache-tomcat-8.5.72.tar.gz /usr/local/tomcat ---&gt; 66b44bc9677aStep 8/11 : EXPOSE 8080 ---&gt; Running in 17c52ce48b43Removing intermediate container 17c52ce48b43 ---&gt; c54233396b41Step 9/11 : ENV JAVA_HOME=/usr/local/java/jdk1.8.0_311 ---&gt; Running in cfb5833a22c1Removing intermediate container cfb5833a22c1 ---&gt; 6252c1aba29dStep 10/11 : ENV PATH=$PATH:$JAVA_HOME/bin ---&gt; Running in 74cb21f735fdRemoving intermediate container 74cb21f735fd ---&gt; 2d4b07c042a1Step 11/11 : CMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"] ---&gt; Running in fcee15fd66aeRemoving intermediate container fcee15fd66ae ---&gt; bd1032e5d52eSuccessfully built bd1032e5d52eSuccessfully tagged mycentos:7[root@localhost dockerfile]#[root@localhost dockerfile]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEmycentos      7         bd1032e5d52e   24 seconds ago   584MBhello-world   latest    feb5d9fea6a5   6 weeks ago      13.3kBcentos        7         eeb6ee3f44bd   7 weeks ago      204MB# 用构建的镜像创建容器[root@localhost dockerfile]# docker run -di --name mycentos7 -p 8080 mycentos:7835d9e6796d019c46bd6b97d1b396a9c47f76df6d09982148684a5d93d7f6b52# 查看容器是否已运行[root@localhost dockerfile]# docker ps CONTAINER ID   IMAGE        COMMAND                  CREATED         STATUS         PORTS                                         NAMES835d9e6796d0   mycentos:7   "/usr/local/tomcat/a…"   3 seconds ago   Up 2 seconds   0.0.0.0:49156-&gt;8080/tcp, :::49156-&gt;8080/tcp   mycentos7[root@localhost dockerfile]## 接着直接在网页中访问ip:8080即可直接访问tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211110204650718.png" alt="image-20211110204650718"></p><h2 id="9-Docker的备份恢复迁移"><a href="#9-Docker的备份恢复迁移" class="headerlink" title="9.Docker的备份恢复迁移"></a>9.Docker的备份恢复迁移</h2><h3 id="1-镜像备份"><a href="#1-镜像备份" class="headerlink" title="1.镜像备份"></a>1.镜像备份</h3><pre><code>使用 **docker save** 将指定镜像保存成tar文件</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker save [OPTIONS] IMAGE [IMAGE...]docker save -o /root/mycentos7.tar mycentos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-o ：镜像保存后保存的目录</li></ul><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看当前镜像有哪些[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 将centos:7镜像打包成tar文件[root@localhost ~]# docker save -o /root/mycentos.tar centos:7# 查看是否生成文件[root@localhost ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  index.txt  jdk-8u311-linux-x64.tar.gz  mycentos.tar  mynginx_02  test.py  test.txt[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-镜像恢复"><a href="#2-镜像恢复" class="headerlink" title="2.镜像恢复"></a>2.镜像恢复</h3><pre><code>使用**docker load**将**docker save**保存的tar文件导入到当前镜像</code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker load [OPTIONS]docker load -i mycentos.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-i：指定导入的文件</li><li>-q：精简输出信息</li></ul><p>例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 删除原始镜像[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# docker rmi centos:7Untagged: centos:7Untagged: centos@sha256:9d4bcbbb213dfd745b58be38b13b996ebb5ac315fe75711bd618426a630e0987Deleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9Deleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02# 导入我们刚刚导出的镜像[root@localhost ~]# docker load -i mycentos.tar 174f56854903: Loading layer [==================================================&gt;]  211.7MB/211.7MBLoaded image: centos:7# 查看是否导入[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-DockerHub的使用"><a href="#10-DockerHub的使用" class="headerlink" title="10.DockerHub的使用"></a>10.DockerHub的使用</h2><h3 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h3><p>先去<a href="https://hub.docker.com/%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7">https://hub.docker.com/注册一个账号</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113163804847.png" alt="image-20211113163804847"></p><h3 id="2-登陆账号"><a href="#2-登陆账号" class="headerlink" title="2.登陆账号"></a>2.登陆账号</h3><p>然后登陆账号:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.Username: 1787417712# 输入自己的账号Password: # 输入自己的密码WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded# 登陆成功提示[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-推送镜像至仓库"><a href="#3-推送镜像至仓库" class="headerlink" title="3.推送镜像至仓库"></a>3.推送镜像至仓库</h3><p>为了方便测试，我们将<strong>hello-world</strong>推送到仓库</p><p>先给镜像设置标签：<strong>docker tag local-image:tagname new-repo:tagname</strong></p><p>再将镜像推送到仓库：<strong>docker push new-repo:tagname</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看有哪些镜像[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 给一个镜像打标签[root@localhost ~]# docker tag hello-world:latest 1787417712/test-helloworld:1.0.0# 再次查看有哪些镜像[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB# 上传镜像[root@localhost ~]# docker push 1787417712/test-helloworld:1.0.0The push refers to repository [docker.io/1787417712/test-helloworld]e07ee1baac5f: Pushed 1.0.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着可以到hub.docker.com登陆自己的账号查看是否上传成功:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113164236499.png" alt="image-20211113164236499"></p><h3 id="4-尝试拉取自己上传的镜像"><a href="#4-尝试拉取自己上传的镜像" class="headerlink" title="4.尝试拉取自己上传的镜像"></a>4.尝试拉取自己上传的镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看当前镜像[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB# 删除之前的镜像[root@localhost ~]# docker rmi 1787417712/test-helloworld:1.0.0Untagged: 1787417712/test-helloworld:1.0.0Untagged: 1787417712/test-helloworld@sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 拉取自己上传的镜像[root@localhost ~]# docker pull 1787417712/test-helloworld:1.0.01.0.0: Pulling from 1787417712/test-helloworldDigest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4Status: Downloaded newer image for 1787417712/test-helloworld:1.0.0docker.io/1787417712/test-helloworld:1.0.0# 查看是否拉取成功[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-退出账号"><a href="#5-退出账号" class="headerlink" title="5.退出账号"></a>5.退出账号</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker logoutRemoving login credentials for https://index.docker.io/v1/[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-Docker私有仓库搭建"><a href="#11-Docker私有仓库搭建" class="headerlink" title="11.Docker私有仓库搭建"></a>11.Docker私有仓库搭建</h2><h3 id="1-拉取registry镜像"><a href="#1-拉取registry镜像" class="headerlink" title="1.拉取registry镜像"></a>1.拉取registry镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull registryUsing default tag: latestlatest: Pulling from library/registry79e9f2f55bf5: Pull complete 0d96da54f60b: Pull complete 5b27040df4a2: Downloading [===============================================&gt;   ]  6.449MB/6.824MBe2ead8259a04: Downloading 3790aef225b9: Downloading latest: Pulling from library/registry79e9f2f55bf5: Pull complete 0d96da54f60b: Pull complete 5b27040df4a2: Pull complete e2ead8259a04: Pull complete 3790aef225b9: Pull complete Digest: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375Status: Downloaded newer image for registry:latestdocker.io/library/registry:latest[root@localhost ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113165513474.png" alt="image-20211113165513474"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# vim /etc/docker/daemon.json# 应用配置[root@localhost ~]# sudo systemctl daemon-reload# 重启docker[root@localhost ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建私有仓库容器"><a href="#3-创建私有仓库容器" class="headerlink" title="3.创建私有仓库容器"></a>3.创建私有仓库容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker run -di --name registry -p 5000:5000 -v /mydata/docker_registry:/var/lib/registry registry8ce589a0bce5a7703d5c9fb018cdbdf8e147c05f878f057c4078731f4e8b5d84[root@localhost ~]# [root@localhost ~]# cd /mydata/docker_registry/[root@localhost docker_registry]# [root@localhost docker_registry]# ls[root@localhost docker_registry]# docker psCONTAINER ID   IMAGE      COMMAND                  CREATED              STATUS              PORTS                                       NAMES8ce589a0bce5   registry   "/entrypoint.sh /etc…"   About a minute ago   Up About a minute   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   registry[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着打开浏览器输入ip:5000/v2/_catalog看到：</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113170311963.png" alt="image-20211113170311963"></p><p>即代表成功！</p><h3 id="4-推送镜像到私有仓库"><a href="#4-推送镜像到私有仓库" class="headerlink" title="4.推送镜像到私有仓库"></a>4.推送镜像到私有仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker_registry]# docker tag hello-world:latest 192.168.1.250:5000/test-helloworld:1.0.0#  192.168.1.250:5000是自己的ip+端口号[root@localhost docker_registry]# docker push 192.168.1.250:5000/test-helloworld:1.0.0The push refers to repository [192.168.1.250:5000/test-helloworld]e07ee1baac5f: Pushed 1.0.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新浏览器可以看到:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113170647521.png" alt="image-20211113170647521"></p><h3 id="5-拉取私有仓库镜像"><a href="#5-拉取私有仓库镜像" class="headerlink" title="5.拉取私有仓库镜像"></a>5.拉取私有仓库镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost docker_registry]# docker pull 192.168.1.250:5000/test-helloworld:1.0.01.0.0: Pulling from test-helloworldDigest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4Status: Downloaded newer image for 192.168.1.250:5000/test-helloworld:1.0.0192.168.1.250:5000/test-helloworld:1.0.0[root@localhost docker_registry]# docker imagesREPOSITORY                           TAG       IMAGE ID       CREATED       SIZEregistry                             latest    b8604a3fe854   3 hours ago   26.2MB192.168.1.250:5000/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kB1787417712/test-helloworld           1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                          latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                               7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-Docker网络模式"><a href="#12-Docker网络模式" class="headerlink" title="12.Docker网络模式"></a>12.Docker网络模式</h2><p><a href="https://www.jianshu.com/p/22a7032bb7bd">Docker四种网络模式</a></p><table><thead><tr><th>Docker网络模式</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>host模式</td><td>–net=host</td><td>容器和宿主机共享Network namespace。</td></tr><tr><td>container模式</td><td>–net=container:NAME_or_ID</td><td>容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td></tr><tr><td>none模式</td><td>–net=none</td><td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td></tr><tr><td>bridge模式</td><td>–net=bridge</td><td>（默认为该模式）</td></tr></tbody></table><h3 id="1-host模式"><a href="#1-host模式" class="headerlink" title="1.host模式"></a>1.host模式</h3><p>创建容器时加上参数:<strong>–network host</strong>即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个容器，指定网络模式为host[root@localhost /]# docker run -it --name bbox02 --network host busybox/ # # 查看网卡ip/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever/ # exit[root@localhost /]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever[root@localhost /]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 发现两者是相同的，即host模式就是容器使用的是宿主机的卡，相同的网络环境。</p><h3 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 容器默认为bridge模式，所以创建的时候可以不加参数即为bridge模式[root@localhost /]# docker run -it --name bbox02 busybox/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever10: eth0@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # # 查看宿主机网卡情况，发现多了个13: veth7e697be@if12，容器和宿主机通信就是靠的这个网卡[root@localhost ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever13: veth7e697be@if12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP     link/ether 96:86:47:33:2b:55 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::9486:47ff:fe33:2b55/64 scope link        valid_lft forever preferred_lft forever[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-none模式"><a href="#3-none模式" class="headerlink" title="3.none模式"></a>3.none模式</h3><p>指定容器为None模式即容器开始没有网络，需要自己配置。</p><p>创建容器的时候加上参数**–network none**即可创建网络模式为none的容器。</p><h3 id="4-container模式"><a href="#4-container模式" class="headerlink" title="4.container模式"></a>4.container模式</h3><p>创建容器时加上参数:**–network container:已运行的容器名/容器ID **即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个网络模式为container模式的容器，用bbox1相同的网络模式[root@localhost /]# docker run -it --name bbox04 --network container:bbox1 busybox/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever14: eth0@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # # 查看bbox1的网卡信息，发现和bbox04的一样[root@localhost ~]# docker exec -it bbox1 sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever14: eth0@if15: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-自定义网络"><a href="#12-自定义网络" class="headerlink" title="12.自定义网络"></a>12.自定义网络</h2><h3 id="1-创建网络"><a href="#1-创建网络" class="headerlink" title="1.创建网络"></a>1.创建网络</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建一个新的网络[root@localhost /]# docker network create custom_network358dcd3df93625bb7328383e89fc38cadb7046e5e31e4123bf72976d3ea874ca# 查看是否创建成功[root@localhost /]# docker network lsNETWORK ID     NAME             DRIVER    SCOPEa4417a6df8fc   bridge           bridge    local358dcd3df936   custom_network   bridge    local7e8bff04dc54   host             host      local466f8d7fd78e   none             null      local[root@localhost /]# # 分别创建bbox05和bbox06,网络模式选择刚创建的custom[root@localhost /]# docker run -it --name bbox05 --network custom_network busybox[root@localhost ~]# docker run -it --name bbox06 --network custom_network busybox# 进入容器bbox05内,发现可以直接用容器名字ping/ # ping bbox06PING bbox06 (172.18.0.3): 56 data bytes64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.054 ms64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.189 ms64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.127 ms64 bytes from 172.18.0.3: seq=3 ttl=64 time=0.131 ms64 bytes from 172.18.0.3: seq=4 ttl=64 time=0.102 ms^C--- bbox06 ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 0.054/0.120/0.189 ms/ # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-搭建Redis集群"><a href="#13-搭建Redis集群" class="headerlink" title="13.搭建Redis集群"></a>13.搭建Redis集群</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>两台虚拟机:192.168.1.250,192.168.1.251</p><p>docker环境:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211114143238251.png" alt="image-20211114143238251"></p><p>docker镜像：redis</p><h3 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2.搭建"></a>2.搭建</h3><ul><li><p>下载redis镜像</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写redis配置文件</p><p>在两台虚拟机中分别执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/local/docker-redis/redis-cluster[root@localhost ~]# cd /usr/local/docker-redis/redis-cluster/[root@localhost redis-cluster]# vi redis-cluster.tmpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250中编辑文件写入:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">port ${PORT}# 端口requirepass 1234# 密码masterauth 1234# 集群节点密码protected-mode no# 安全模式- 关闭daemonize no    # 是否后台appendonly yes# aof文件是否开启cluster-enabled yes# 集群环境是否开启cluster-config-file nodes.conf# 配置文件名称cluster-node-timeout 15000# 超市时间cluster-announce-ip 192.168.1.250# ipcluster-announce-port ${PORT}# 集群端口cluster-announce-bus-port  1${PORT}# 消息总线内部端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中编辑文件写入:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">port ${PORT}# 端口requirepass 1234# 密码masterauth 1234# 集群节点密码protected-mode no# 安全模式- 关闭daemonize no    # 是否后台appendonly yes# aof文件是否开启cluster-enabled yes# 集群环境是否开启cluster-config-file nodes.conf# 配置文件名称cluster-node-timeout 15000# 超市时间cluster-announce-ip 192.168.1.251# ipcluster-announce-port ${PORT}# 集群端口cluster-announce-bus-port  1${PORT}# 消息总线内部端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in `seq 6371 6373`; do \mkdir -p ${port}/conf \&amp;&amp; PORT=${port} envsubst &lt; redis-cluster.tmpl &gt; ${port}/conf/redis.conf \&amp;&amp; mkdir -p ${port}/data;\done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in `seq 6374 6376`; do \mkdir -p ${port}/conf \&amp;&amp; PORT=${port} envsubst &lt; redis-cluster.tmpl &gt; ${port}/conf/redis.conf \&amp;&amp; mkdir -p ${port}/data;\done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost redis-cluster]# tree /usr/local/docker-redis/redis-cluster//usr/local/docker-redis/redis-cluster/├── 6371│   ├── conf│   │   └── redis.conf│   └── data├── 6372│   ├── conf│   │   └── redis.conf│   └── data├── 6373│   ├── conf│   │   └── redis.conf│   └── data└── redis-cluster.tmpl9 directories, 4 files[root@localhost redis-cluster]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost redis-cluster]# tree /usr/local/docker-redis/redis-cluster//usr/local/docker-redis/redis-cluster/├── 6374│   ├── conf│   │   └── redis.conf│   └── data├── 6375│   ├── conf│   │   └── redis.conf│   └── data├── 6376│   ├── conf│   │   └── redis.conf│   └── data└── redis-cluster.tmpl9 directories, 4 files[root@localhost redis-cluster]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建redis容器</p></li></ul><p>在192.168.1.250中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in $(seq 6371 6373); do \  docker run -id --restart always --name redis-${port} --net host \  -v /usr/local/docker-redis/redis-cluster/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \  -v /usr/local/docker-redis/redis-cluster/${port}/data:/data \  redis redis-server /usr/local/etc/redis/redis.conf; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中执行:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">for port in $(seq 6374 6376); do \  docker run -id --restart always --name redis-${port} --net host \  -v /usr/local/docker-redis/redis-cluster/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \  -v /usr/local/docker-redis/redis-cluster/${port}/data:/data \  redis redis-server /usr/local/etc/redis/redis.conf; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就分别在两台虚拟机中各创建了3个redis容器</p><ul><li>创建redis cluster集群</li></ul><p>在192.168.1.250中执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[root@localhost redis-cluster]# docker exec -it redis-6371 bashroot@localhost:/data# cd /usr/local/bin/root@localhost:/usr/local/bin# lsdocker-entrypoint.sh  gosu  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-serverroot@localhost:/usr/local/bin# root@localhost:/data# redis-cli -a 1234 --cluster create 192.168.1.250:6371 192.168.1.250:6372 192.168.1.250:6373 192.168.1.251:6374  192.168.1.251:6375 192.168.1.251:6376 --cluster-replicas 1Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 192.168.1.251:6376 to 192.168.1.250:6371Adding replica 192.168.1.250:6373 to 192.168.1.251:6374Adding replica 192.168.1.251:6375 to 192.168.1.250:6372M: 456297129cb486b101c40e341365c10aa75ef9d6 192.168.1.250:6371   slots:[0-5460] (5461 slots) masterM: ce097bae6e524e927a3c618cff0842b8e2ee733e 192.168.1.250:6372   slots:[10923-16383] (5461 slots) masterS: 0dac43912efbda099854300fa6e1026247ff0808 192.168.1.250:6373   replicates 1f11869fb991614ba37bc21944e9fe1a39a667eaM: 1f11869fb991614ba37bc21944e9fe1a39a667ea 192.168.1.251:6374   slots:[5461-10922] (5462 slots) masterS: 34365fc1c7931a5025364a7acd6f8c0a7b59e538 192.168.1.251:6375   replicates ce097bae6e524e927a3c618cff0842b8e2ee733eS: 7b13fc4d721522edd661755e058a9dda7b6dc579 192.168.1.251:6376   replicates 456297129cb486b101c40e341365c10aa75ef9d6Can I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join.&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.250:6371)M: 456297129cb486b101c40e341365c10aa75ef9d6 192.168.1.250:6371   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: ce097bae6e524e927a3c618cff0842b8e2ee733e 192.168.1.250:6372   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: 1f11869fb991614ba37bc21944e9fe1a39a667ea 192.168.1.251:6374   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: 0dac43912efbda099854300fa6e1026247ff0808 192.168.1.250:6373   slots: (0 slots) slave   replicates 1f11869fb991614ba37bc21944e9fe1a39a667eaS: 7b13fc4d721522edd661755e058a9dda7b6dc579 192.168.1.251:6376   slots: (0 slots) slave   replicates 456297129cb486b101c40e341365c10aa75ef9d6S: 34365fc1c7931a5025364a7acd6f8c0a7b59e538 192.168.1.251:6375   slots: (0 slots) slave   replicates ce097bae6e524e927a3c618cff0842b8e2ee733e[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.root@localhost:/data# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-DockerCompose安装"><a href="#14-DockerCompose安装" class="headerlink" title="14.DockerCompose安装"></a>14.DockerCompose安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装[root@localhost redis-cluster]#  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--  100   633  100   633    0     0    880      0 --:--:-- --:--:-- --:--:--   881  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--    6 12.1M    6  804k    0     0   383k      0  0:00:32  0:00:02  0:00:30  100 12.1M  100 12.1M    0     0   204k      0  0:01:00  0:01:00 --:--:--  162k[root@localhost redis-cluster]# cd /usr/local/bin/[root@localhost bin]# lsdocker-compose# 赋予执行权限[root@localhost bin]# sudo chmod +x /usr/local/bin/docker-compose [root@localhost bin]# lltotal 12440-rwxr-xr-x. 1 root root 12737304 Nov 14 02:27 docker-compose[root@localhost bin]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
